CCCREATE TABLE so.sequence_cv_lookup_table (
	sequence_cv_lookup_table_id serial NOT NULL,
	original_cvterm_name varchar(1024),
	relation_name varchar(128),
	PRIMARY KEY (sequence_cv_lookup_table_id)
);

CREATE VIEW so.a_box (a_box_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS a_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'A_box_type_1'::text) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'A_box'::text));

CREATE VIEW so.a_box_type_1 (a_box_type_1_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS a_box_type_1_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'A_box_type_1'::text);

CREATE VIEW so.a_box_type_2 (a_box_type_2_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS a_box_type_2_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'A_box_type_2'::text);

CREATE VIEW so.a_minor_rna_motif (a_minor_rna_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS a_minor_rna_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'A_minor_RNA_motif'::text);

CREATE VIEW so.a_to_c_transversion (a_to_c_transversion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS a_to_c_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'A_to_C_transversion'::text);

CREATE VIEW so.a_to_g_transition (a_to_g_transition_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS a_to_g_transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'A_to_G_transition'::text);

CREATE VIEW so.a_to_t_transversion (a_to_t_transversion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS a_to_t_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'A_to_T_transversion'::text);

CREATE VIEW so.aberrant_processed_transcript (aberrant_processed_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS aberrant_processed_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'aberrant_processed_transcript'::text);

CREATE VIEW so.active_peptide (active_peptide_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS active_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'active_peptide'::text);

CREATE VIEW so.adaptive_island (adaptive_island_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS adaptive_island_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'adaptive_island'::text);

CREATE VIEW so.alanine (alanine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS alanine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alanine'::text);

CREATE VIEW so.alanine_trna_primary_transcript (alanine_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS alanine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text);

CREATE VIEW so.alanyl_trna (alanyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS alanyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alanyl_tRNA'::text);

CREATE VIEW so.allele (allele_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS allele_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'polymorphic_sequence_variant'::text) OR ((cvterm.name)::text = 'allele'::text));

CREATE VIEW so.allelically_excluded (allelically_excluded_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS allelically_excluded_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'allelically_excluded'::text);

CREATE VIEW so.allelically_excluded_gene (allelically_excluded_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS allelically_excluded_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'allelically_excluded_gene'::text);

CREATE VIEW so.allopolyploid (allopolyploid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS allopolyploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'allopolyploid'::text);

CREATE VIEW so.alpha_beta_motif (alpha_beta_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS alpha_beta_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alpha_beta_motif'::text);

CREATE VIEW so.alpha_helix (alpha_helix_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS alpha_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alpha_helix'::text);

CREATE VIEW so.alteration_attribute (alteration_attribute_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS alteration_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((cvterm.name)::text = 'chromosomal_variation_attribute'::text) OR ((cvterm.name)::text = 'insertion_attribute'::text)) OR ((cvterm.name)::text = 'inversion_attribute'::text)) OR ((cvterm.name)::text = 'translocaton_attribute'::text)) OR ((cvterm.name)::text = 'duplication_attribute'::text)) OR ((cvterm.name)::text = 'intrachromosomal'::text)) OR ((cvterm.name)::text = 'interchromosomal'::text)) OR ((cvterm.name)::text = 'tandem'::text)) OR ((cvterm.name)::text = 'direct'::text)) OR ((cvterm.name)::text = 'inverted'::text)) OR ((cvterm.name)::text = 'pericentric'::text)) OR ((cvterm.name)::text = 'paracentric'::text)) OR ((cvterm.name)::text = 'reciprocal'::text)) OR ((cvterm.name)::text = 'insertional'::text)) OR ((cvterm.name)::text = 'free'::text)) OR ((cvterm.name)::text = 'alteration_attribute'::text));

CREATE VIEW so.alternate_sequence_site (alternate_sequence_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS alternate_sequence_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alternate_sequence_site'::text);

CREATE VIEW so.alternatively_spliced (alternatively_spliced_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS alternatively_spliced_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alternatively_spliced'::text);

CREATE VIEW so.alternatively_spliced_transcript (alternatively_spliced_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS alternatively_spliced_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alternatively_spliced_transcript'::text);

CREATE VIEW so.ambisense_ssrna_viral_sequence (ambisense_ssrna_viral_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ambisense_ssrna_viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text);

CREATE VIEW so.amino_acid (amino_acid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS amino_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'catalytic_residue'::text) OR ((cvterm.name)::text = 'modified_amino_acid_feature'::text)) OR ((cvterm.name)::text = 'alanine'::text)) OR ((cvterm.name)::text = 'valine'::text)) OR ((cvterm.name)::text = 'leucine'::text)) OR ((cvterm.name)::text = 'isoleucine'::text)) OR ((cvterm.name)::text = 'proline'::text)) OR ((cvterm.name)::text = 'tryptophan'::text)) OR ((cvterm.name)::text = 'phenylalanine'::text)) OR ((cvterm.name)::text = 'methionine'::text)) OR ((cvterm.name)::text = 'glycine'::text)) OR ((cvterm.name)::text = 'serine'::text)) OR ((cvterm.name)::text = 'threonine'::text)) OR ((cvterm.name)::text = 'tyrosine'::text)) OR ((cvterm.name)::text = 'cysteine'::text)) OR ((cvterm.name)::text = 'glutamine'::text)) OR ((cvterm.name)::text = 'asparagine'::text)) OR ((cvterm.name)::text = 'lysine'::text)) OR ((cvterm.name)::text = 'arginine'::text)) OR ((cvterm.name)::text = 'histidine'::text)) OR ((cvterm.name)::text = 'aspartic_acid'::text)) OR ((cvterm.name)::text = 'glutamic_acid'::text)) OR ((cvterm.name)::text = 'selenocysteine'::text)) OR ((cvterm.name)::text = 'pyrrolysine'::text)) OR ((cvterm.name)::text = 'modified_glycine'::text)) OR ((cvterm.name)::text = 'modified_L_alanine'::text)) OR ((cvterm.name)::text = 'modified_L_asparagine'::text)) OR ((cvterm.name)::text = 'modified_L_aspartic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_cysteine'::text)) OR ((cvterm.name)::text = 'modified_L_glutamic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_threonine'::text)) OR ((cvterm.name)::text = 'modified_L_tryptophan'::text)) OR ((cvterm.name)::text = 'modified_L_glutamine'::text)) OR ((cvterm.name)::text = 'modified_L_methionine'::text)) OR ((cvterm.name)::text = 'modified_L_isoleucine'::text)) OR ((cvterm.name)::text = 'modified_L_phenylalanine'::text)) OR ((cvterm.name)::text = 'modified_L_histidine'::text)) OR ((cvterm.name)::text = 'modified_L_serine'::text)) OR ((cvterm.name)::text = 'modified_L_lysine'::text)) OR ((cvterm.name)::text = 'modified_L_leucine'::text)) OR ((cvterm.name)::text = 'modified_L_selenocysteine'::text)) OR ((cvterm.name)::text = 'modified_L_valine'::text)) OR ((cvterm.name)::text = 'modified_L_proline'::text)) OR ((cvterm.name)::text = 'modified_L_tyrosine'::text)) OR ((cvterm.name)::text = 'modified_L_arginine'::text)) OR ((cvterm.name)::text = 'amino_acid'::text));

CREATE VIEW so.amino_acid_deletion (amino_acid_deletion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS amino_acid_deletion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'amino_acid_deletion'::text);

CREATE VIEW so.amino_acid_insertion (amino_acid_insertion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS amino_acid_insertion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'amino_acid_insertion'::text);

CREATE VIEW so.amino_acid_substitution (amino_acid_substitution_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS amino_acid_substitution_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'conservative_amino_acid_substitution'::text) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'amino_acid_substitution'::text));

CREATE VIEW so.amplification_origin (amplification_origin_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS amplification_origin_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'amplification_origin'::text);

CREATE VIEW so.anchor_binding_site (anchor_binding_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS anchor_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'anchor_binding_site'::text);

CREATE VIEW so.anchor_region (anchor_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS anchor_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'anchor_region'::text);

CREATE VIEW so.aneuploid (aneuploid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS aneuploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'hyperploid'::text) OR ((cvterm.name)::text = 'hypoploid'::text)) OR ((cvterm.name)::text = 'aneuploid'::text));

CREATE VIEW so.aneuploid_chromosome (aneuploid_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS aneuploid_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text) OR ((cvterm.name)::text = 'aneuploid_chromosome'::text));

CREATE VIEW so.annotation_directed_improved_draft (annotation_directed_improved_draft_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS annotation_directed_improved_draft_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'annotation_directed_improved_draft'::text);

CREATE VIEW so.anticodon (anticodon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS anticodon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'anticodon'::text);

CREATE VIEW so.anticodon_loop (anticodon_loop_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS anticodon_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'anticodon_loop'::text);

CREATE VIEW so.antiparallel_beta_strand (antiparallel_beta_strand_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS antiparallel_beta_strand_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'antiparallel_beta_strand'::text);

CREATE VIEW so.antisense (antisense_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS antisense_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'antisense'::text);

CREATE VIEW so.antisense_primary_transcript (antisense_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS antisense_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'antisense_primary_transcript'::text);

CREATE VIEW so.antisense_rna (antisense_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS antisense_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'MicF_RNA'::text) OR ((cvterm.name)::text = 'antisense_RNA'::text));

CREATE VIEW so.apicoplast_chromosome (apicoplast_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS apicoplast_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'apicoplast_chromosome'::text);

CREATE VIEW so.apicoplast_gene (apicoplast_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS apicoplast_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'apicoplast_gene'::text);

CREATE VIEW so.apicoplast_sequence (apicoplast_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS apicoplast_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'apicoplast_sequence'::text);

CREATE VIEW so.aptamer (aptamer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS aptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'DNA_aptamer'::text) OR ((cvterm.name)::text = 'RNA_aptamer'::text)) OR ((cvterm.name)::text = 'aptamer'::text));

CREATE VIEW so.archaeal_intron (archaeal_intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS archaeal_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'archaeal_intron'::text);

CREATE VIEW so.archaeosine (archaeosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS archaeosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'archaeosine'::text);

CREATE VIEW so.arg_trna_primary_transcript (arg_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS arg_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text);

CREATE VIEW so.arginine (arginine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS arginine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'arginine'::text);

CREATE VIEW so.arginyl_trna (arginyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS arginyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'arginyl_tRNA'::text);

CREATE VIEW so.ars (ars_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ars_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ARS'::text);

CREATE VIEW so.asparagine (asparagine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS asparagine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asparagine'::text);

CREATE VIEW so.asparagine_trna_primary_transcript (asparagine_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS asparagine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text);

CREATE VIEW so.asparaginyl_trna (asparaginyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS asparaginyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asparaginyl_tRNA'::text);

CREATE VIEW so.aspartic_acid (aspartic_acid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS aspartic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'aspartic_acid'::text);

CREATE VIEW so.aspartic_acid_trna_primary_transcript (aspartic_acid_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS aspartic_acid_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text);

CREATE VIEW so.aspartyl_trna (aspartyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS aspartyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'aspartyl_tRNA'::text);

CREATE VIEW so.aspe_primer (aspe_primer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS aspe_primer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ASPE_primer'::text);

CREATE VIEW so.assembly (assembly_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS assembly_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((cvterm.name)::text = 'sequence_assembly'::text) OR ((cvterm.name)::text = 'fragment_assembly'::text)) OR ((cvterm.name)::text = 'supercontig'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'tiling_path'::text)) OR ((cvterm.name)::text = 'virtual_sequence'::text)) OR ((cvterm.name)::text = 'golden_path'::text)) OR ((cvterm.name)::text = 'ultracontig'::text)) OR ((cvterm.name)::text = 'expressed_sequence_assembly'::text)) OR ((cvterm.name)::text = 'fingerprint_map'::text)) OR ((cvterm.name)::text = 'STS_map'::text)) OR ((cvterm.name)::text = 'RH_map'::text)) OR ((cvterm.name)::text = 'assembly'::text));

CREATE VIEW so.assembly_component (assembly_component_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS assembly_component_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((cvterm.name)::text = 'contig'::text) OR ((cvterm.name)::text = 'read'::text)) OR ((cvterm.name)::text = 'restriction_fragment'::text)) OR ((cvterm.name)::text = 'golden_path_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_fragment'::text)) OR ((cvterm.name)::text = 'gap'::text)) OR ((cvterm.name)::text = 'sonicate_fragment'::text)) OR ((cvterm.name)::text = 'paired_end_fragment'::text)) OR ((cvterm.name)::text = 'read_pair'::text)) OR ((cvterm.name)::text = 'contig_read'::text)) OR ((cvterm.name)::text = 'BAC_end'::text)) OR ((cvterm.name)::text = 'dye_terminator_read'::text)) OR ((cvterm.name)::text = 'pyrosequenced_read'::text)) OR ((cvterm.name)::text = 'ligation_based_read'::text)) OR ((cvterm.name)::text = 'polymerase_synthesis_read'::text)) OR ((cvterm.name)::text = 'PAC_end'::text)) OR ((cvterm.name)::text = 'YAC_end'::text)) OR ((cvterm.name)::text = 'clone_end'::text)) OR ((cvterm.name)::text = 'RFLP_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'assembly_component'::text));

CREATE VIEW so.assembly_error_correction (assembly_error_correction_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS assembly_error_correction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'assembly_error_correction'::text);

CREATE VIEW so.assortment_derived_aneuploid (assortment_derived_aneuploid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS assortment_derived_aneuploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'assortment_derived_aneuploid'::text);

CREATE VIEW so.assortment_derived_deficiency (assortment_derived_deficiency_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS assortment_derived_deficiency_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'assortment_derived_deficiency'::text);

CREATE VIEW so.assortment_derived_deficiency_plus_duplication (assortment_derived_deficiency_plus_duplication_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS assortment_derived_deficiency_plus_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'assortment_derived_deficiency_plus_duplication'::text);

CREATE VIEW so.assortment_derived_duplication (assortment_derived_duplication_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS assortment_derived_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'assortment_derived_duplication'::text);

CREATE VIEW so.assortment_derived_variation (assortment_derived_variation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS assortment_derived_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'assortment_derived_duplication'::text) OR ((cvterm.name)::text = 'assortment_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency'::text)) OR ((cvterm.name)::text = 'assortment_derived_aneuploid'::text)) OR ((cvterm.name)::text = 'assortment_derived_variation'::text));

CREATE VIEW so.asx_motif (asx_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS asx_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asx_motif'::text);

CREATE VIEW so.asx_turn (asx_turn_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS asx_turn_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn'::text));

CREATE VIEW so.asx_turn_left_handed_type_one (asx_turn_left_handed_type_one_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS asx_turn_left_handed_type_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text);

CREATE VIEW so.asx_turn_left_handed_type_two (asx_turn_left_handed_type_two_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS asx_turn_left_handed_type_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text);

CREATE VIEW so.asx_turn_right_handed_type_one (asx_turn_right_handed_type_one_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS asx_turn_right_handed_type_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text);

CREATE VIEW so.asx_turn_right_handed_type_two (asx_turn_right_handed_type_two_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS asx_turn_right_handed_type_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text);

CREATE VIEW so.asymmetric_rna_internal_loop (asymmetric_rna_internal_loop_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS asymmetric_rna_internal_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'K_turn_RNA_motif'::text) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text));

CREATE VIEW so.attb_site (attb_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS attb_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attB_site'::text);

CREATE VIEW so.attc_site (attc_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS attc_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attC_site'::text);

CREATE VIEW so.attctn_site (attctn_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS attctn_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attCtn_site'::text);

CREATE VIEW so.attenuator (attenuator_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS attenuator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attenuator'::text);

CREATE VIEW so.atti_site (atti_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS atti_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attI_site'::text);

CREATE VIEW so.attl_site (attl_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS attl_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attL_site'::text);

CREATE VIEW so.attp_site (attp_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS attp_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attP_site'::text);

CREATE VIEW so.attr_site (attr_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS attr_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attR_site'::text);

CREATE VIEW so.au_rich_element (au_rich_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS au_rich_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'AU_rich_element'::text);

CREATE VIEW so.autocatalytically_spliced_intron (autocatalytically_spliced_intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS autocatalytically_spliced_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'group_I_intron'::text) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text));

CREATE VIEW so.autopolyploid (autopolyploid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS autopolyploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'autopolyploid'::text);

CREATE VIEW so.autoregulated (autoregulated_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS autoregulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'negatively_autoregulated'::text) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'autoregulated'::text));

CREATE VIEW so.autosynaptic_chromosome (autosynaptic_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS autosynaptic_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text) OR ((cvterm.name)::text = 'laevosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'autosynaptic_chromosome'::text));

CREATE VIEW so.b_box (b_box_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS b_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'B_box'::text);

CREATE VIEW so.bac (bac_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS bac_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'BAC'::text);

CREATE VIEW so.bac_cloned_genomic_insert (bac_cloned_genomic_insert_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS bac_cloned_genomic_insert_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text);

CREATE VIEW so.bac_end (bac_end_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS bac_end_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'BAC_end'::text);

CREATE VIEW so.bacterial_rnapol_promoter (bacterial_rnapol_promoter_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS bacterial_rnapol_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text));

CREATE VIEW so.bacterial_rnapol_promoter_sigma54 (bacterial_rnapol_promoter_sigma54_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS bacterial_rnapol_promoter_sigma54_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text);

CREATE VIEW so.bacterial_rnapol_promoter_sigma_70 (bacterial_rnapol_promoter_sigma_70_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS bacterial_rnapol_promoter_sigma_70_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text);

CREATE VIEW so.bacterial_terminator (bacterial_terminator_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS bacterial_terminator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text));

CREATE VIEW so.base (base_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS base_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'modified_RNA_base_feature'::text) OR ((cvterm.name)::text = 'inosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanine'::text)) OR ((cvterm.name)::text = 'ribothymidine'::text)) OR ((cvterm.name)::text = 'modified_adenosine'::text)) OR ((cvterm.name)::text = 'modified_cytidine'::text)) OR ((cvterm.name)::text = 'modified_guanosine'::text)) OR ((cvterm.name)::text = 'modified_uridine'::text)) OR ((cvterm.name)::text = 'modified_inosine'::text)) OR ((cvterm.name)::text = 'methylinosine'::text)) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'one_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text)) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text)) OR ((cvterm.name)::text = 'three_methylcytidine'::text)) OR ((cvterm.name)::text = 'five_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_thiocytidine'::text)) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text)) OR ((cvterm.name)::text = 'five_formylcytidine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'lysidine'::text)) OR ((cvterm.name)::text = 'N4_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text)) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text)) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'one_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_methylguanosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text)) OR ((cvterm.name)::text = 'wybutosine'::text)) OR ((cvterm.name)::text = 'peroxywybutosine'::text)) OR ((cvterm.name)::text = 'hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'wyosine'::text)) OR ((cvterm.name)::text = 'methylwyosine'::text)) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'four_demethylwyosine'::text)) OR ((cvterm.name)::text = 'isowyosine'::text)) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'queuosine'::text)) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'dihydrouridine'::text)) OR ((cvterm.name)::text = 'pseudouridine'::text)) OR ((cvterm.name)::text = 'five_methyluridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_thiouridine'::text)) OR ((cvterm.name)::text = 'four_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text)) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text)) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text)) OR ((cvterm.name)::text = 'five_methoxyuridine'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'three_methyluridine'::text)) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text)) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text)) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'base'::text));

CREATE VIEW so.base_call_error_correction (base_call_error_correction_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS base_call_error_correction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'base_call_error_correction'::text);

CREATE VIEW so.base_pair (base_pair_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS base_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'WC_base_pair'::text) OR ((cvterm.name)::text = 'sugar_edge_base_pair'::text)) OR ((cvterm.name)::text = 'Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'wobble_base_pair'::text)) OR ((cvterm.name)::text = 'base_pair'::text));

CREATE VIEW so.benign_variant (benign_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS benign_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'benign_variant'::text);

CREATE VIEW so.beta_bulge (beta_bulge_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS beta_bulge_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_bulge'::text);

CREATE VIEW so.beta_bulge_loop (beta_bulge_loop_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS beta_bulge_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'beta_bulge_loop_five'::text) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text));

CREATE VIEW so.beta_bulge_loop_five (beta_bulge_loop_five_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS beta_bulge_loop_five_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_bulge_loop_five'::text);

CREATE VIEW so.beta_bulge_loop_six (beta_bulge_loop_six_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS beta_bulge_loop_six_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_bulge_loop_six'::text);

CREATE VIEW so.beta_strand (beta_strand_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS beta_strand_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'antiparallel_beta_strand'::text) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'beta_strand'::text));

CREATE VIEW so.beta_turn (beta_turn_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS beta_turn_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'beta_turn'::text));

CREATE VIEW so.beta_turn_left_handed_type_one (beta_turn_left_handed_type_one_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS beta_turn_left_handed_type_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text);

CREATE VIEW so.beta_turn_left_handed_type_two (beta_turn_left_handed_type_two_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS beta_turn_left_handed_type_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text);

CREATE VIEW so.beta_turn_right_handed_type_one (beta_turn_right_handed_type_one_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS beta_turn_right_handed_type_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text);

CREATE VIEW so.beta_turn_right_handed_type_two (beta_turn_right_handed_type_two_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS beta_turn_right_handed_type_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text);

CREATE VIEW so.beta_turn_type_eight (beta_turn_type_eight_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS beta_turn_type_eight_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_type_eight'::text);

CREATE VIEW so.beta_turn_type_six (beta_turn_type_six_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS beta_turn_type_six_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'beta_turn_type_six_a'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text));

CREATE VIEW so.beta_turn_type_six_a (beta_turn_type_six_a_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS beta_turn_type_six_a_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'beta_turn_type_six_a_one'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text));

CREATE VIEW so.beta_turn_type_six_a_one (beta_turn_type_six_a_one_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS beta_turn_type_six_a_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text);

CREATE VIEW so.beta_turn_type_six_a_two (beta_turn_type_six_a_two_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS beta_turn_type_six_a_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text);

CREATE VIEW so.beta_turn_type_six_b (beta_turn_type_six_b_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS beta_turn_type_six_b_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_type_six_b'::text);

CREATE VIEW so.bidirectional_promoter (bidirectional_promoter_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS bidirectional_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bidirectional_promoter'::text);

CREATE VIEW so.binding_site (binding_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'protein_binding_site'::text) OR ((cvterm.name)::text = 'epitope'::text)) OR ((cvterm.name)::text = 'nucleotide_binding_site'::text)) OR ((cvterm.name)::text = 'metal_binding_site'::text)) OR ((cvterm.name)::text = 'ligand_binding_site'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_binding_site'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'histone_binding_site'::text)) OR ((cvterm.name)::text = 'insulator_binding_site'::text)) OR ((cvterm.name)::text = 'enhancer_binding_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'miRNA_target_site'::text)) OR ((cvterm.name)::text = 'DNA_binding_site'::text)) OR ((cvterm.name)::text = 'primer_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'binding_site'::text));

CREATE VIEW so.biochemical_region_of_peptide (biochemical_region_of_peptide_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS biochemical_region_of_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'post_translationally_modified_region'::text) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text));

CREATE VIEW so.biological_region (biological_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS biological_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
cvterm.name)::text = 'sequence_secondary_structure'::text) OR ((cvterm.name)::text = 'linkage_group'::text)) OR ((cvterm.name)::text = 'polypeptide'::text)) OR ((cvterm.name)::text = 'deletion'::text)) OR ((cvterm.name)::text = 'origin_of_replication'::text)) OR ((cvterm.name)::text = 'recombination_feature'::text)) OR ((cvterm.name)::text = 'CpG_island'::text)) OR ((cvterm.name)::text = 'pseudogene'::text)) OR ((cvterm.name)::text = 'binding_site'::text)) OR ((cvterm.name)::text = 'pseudogenic_region'::text)) OR ((cvterm.name)::text = 'cap'::text)) OR ((cvterm.name)::text = 'intergenic_region'::text)) OR ((cvterm.name)::text = 'oligo_U_tail'::text)) OR ((cvterm.name)::text = 'polyA_sequence'::text)) OR ((cvterm.name)::text = 'repeat_region'::text)) OR ((cvterm.name)::text = 'insertion'::text)) OR ((cvterm.name)::text = 'gene'::text)) OR ((cvterm.name)::text = 'repeat_unit'::text)) OR ((cvterm.name)::text = 'QTL'::text)) OR ((cvterm.name)::text = 'chromosome_part'::text)) OR ((cvterm.name)::text = 'gene_member_region'::text)) OR ((cvterm.name)::text = 'transcript_region'::text)) OR ((cvterm.name)::text = 'polypeptide_region'::text)) OR ((cvterm.name)::text = 'gene_component_region'::text)) OR ((cvterm.name)::text = 'mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'replicon'::text)) OR ((cvterm.name)::text = 'base'::text)) OR ((cvterm.name)::text = 'amino_acid'::text)) OR ((cvterm.name)::text = 'genetic_marker'::text)) OR ((cvterm.name)::text = 'sequence_motif'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_recognition_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_single_strand_overhang'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_region'::text)) OR ((cvterm.name)::text = 'open_chromatin_region'::text)) OR ((cvterm.name)::text = 'gene_group'::text)) OR ((cvterm.name)::text = 'substitution'::text)) OR ((cvterm.name)::text = 'inversion'::text)) OR ((cvterm.name)::text = 'retron'::text)) OR ((cvterm.name)::text = 'G_quartet'::text)) OR ((cvterm.name)::text = 'base_pair'::text)) OR ((cvterm.name)::text = 'RNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'DNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'pseudoknot'::text)) OR ((cvterm.name)::text = 'WC_base_pair'::text)) OR ((cvterm.name)::text = 'sugar_edge_base_pair'::text)) OR ((cvterm.name)::text = 'Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'wobble_base_pair'::text)) OR ((cvterm.name)::text = 'stem_loop'::text)) OR ((cvterm.name)::text = 'tetraloop'::text)) OR ((cvterm.name)::text = 'i_motif'::text)) OR ((cvterm.name)::text = 'recoding_pseudoknot'::text)) OR ((cvterm.name)::text = 'H_pseudoknot'::text)) OR ((cvterm.name)::text = 'D_loop'::text)) OR ((cvterm.name)::text = 'ARS'::text)) OR ((cvterm.name)::text = 'oriT'::text)) OR ((cvterm.name)::text = 'amplification_origin'::text)) OR ((cvterm.name)::text = 'oriV'::text)) OR ((cvterm.name)::text = 'oriC'::text)) OR ((cvterm.name)::text = 'recombination_hotspot'::text)) OR ((cvterm.name)::text = 'haplotype_block'::text)) OR ((cvterm.name)::text = 'sequence_rearrangement_feature'::text)) OR ((cvterm.name)::text = 'iDNA'::text)) OR ((cvterm.name)::text = 'specific_recombination_site'::text)) OR ((cvterm.name)::text = 'chromosome_breakage_sequence'::text)) OR ((cvterm.name)::text = 'internal_eliminated_sequence'::text)) OR ((cvterm.name)::text = 'macronucleus_destined_segment'::text)) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text)) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text)) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'processed_pseudogene'::text)) OR ((cvterm.name)::text = 'non_processed_pseudogene'::text)) OR ((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text)) OR ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text)) OR ((cvterm.name)::text = 'cassette_pseudogene'::text)) OR ((cvterm.name)::text = 'duplicated_pseudogene'::text)) OR ((cvterm.name)::text = 'unitary_pseudogene'::text)) OR ((cvterm.name)::text = 'protein_binding_site'::text)) OR ((cvterm.name)::text = 'epitope'::text)) OR ((cvterm.name)::text = 'nucleotide_binding_site'::text)) OR ((cvterm.name)::text = 'metal_binding_site'::text)) OR ((cvterm.name)::text = 'ligand_binding_site'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_binding_site'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'histone_binding_site'::text)) OR ((cvterm.name)::text = 'insulator_binding_site'::text)) OR ((cvterm.name)::text = 'enhancer_binding_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'miRNA_target_site'::text)) OR ((cvterm.name)::text = 'DNA_binding_site'::text)) OR ((cvterm.name)::text = 'primer_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'decayed_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_transcript'::text)) OR ((cvterm.name)::text = 'pseudogenic_rRNA'::text)) OR ((cvterm.name)::text = 'pseudogenic_tRNA'::text)) OR ((cvterm.name)::text = 'long_terminal_repeat'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'inverted_repeat'::text)) OR ((cvterm.name)::text = 'direct_repeat'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'dispersed_repeat'::text)) OR ((cvterm.name)::text = 'tandem_repeat'::text)) OR ((cvterm.name)::text = 'X_element_combinatorial_repeat'::text)) OR ((cvterm.name)::text = 'Y_prime_element'::text)) OR ((cvterm.name)::text = 'telomeric_repeat'::text)) OR ((cvterm.name)::text = 'nested_repeat'::text)) OR ((cvterm.name)::text = 'centromeric_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_LTR'::text)) OR ((cvterm.name)::text = 'three_prime_LTR'::text)) OR ((cvterm.name)::text = 'solo_LTR'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'target_site_duplication'::text)) OR ((cvterm.name)::text = 'CRISPR'::text)) OR ((cvterm.name)::text = 'satellite_DNA'::text)) OR ((cvterm.name)::text = 'microsatellite'::text)) OR ((cvterm.name)::text = 'minisatellite'::text)) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'nested_tandem_repeat'::text)) OR ((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text)) OR ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text)) OR ((cvterm.name)::text = 'transgenic_insertion'::text)) OR ((cvterm.name)::text = 'duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text)) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'nuclear_gene'::text)) OR ((cvterm.name)::text = 'mt_gene'::text)) OR ((cvterm.name)::text = 'plastid_gene'::text)) OR ((cvterm.name)::text = 'nucleomorph_gene'::text)) OR ((cvterm.name)::text = 'plasmid_gene'::text)) OR ((cvterm.name)::text = 'proviral_gene'::text)) OR ((cvterm.name)::text = 'transposable_element_gene'::text)) OR ((cvterm.name)::text = 'silenced_gene'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'foreign_gene'::text)) OR ((cvterm.name)::text = 'fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_gene'::text)) OR ((cvterm.name)::text = 'gene_with_trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'rescue_gene'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'positively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'transgene'::text)) OR ((cvterm.name)::text = 'predicted_gene'::text)) OR ((cvterm.name)::text = 'protein_coding_gene'::text)) OR ((cvterm.name)::text = 'retrogene'::text)) OR ((cvterm.name)::text = 'ncRNA_gene'::text)) OR ((cvterm.name)::text = 'cryptic_gene'::text)) OR ((cvterm.name)::text = 'gene_with_non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'gene_cassette'::text)) OR ((cvterm.name)::text = 'kinetoplast_gene'::text)) OR ((cvterm.name)::text = 'maxicircle_gene'::text)) OR ((cvterm.name)::text = 'minicircle_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'apicoplast_gene'::text)) OR ((cvterm.name)::text = 'ct_gene'::text)) OR ((cvterm.name)::text = 'chromoplast_gene'::text)) OR ((cvterm.name)::text = 'cyanelle_gene'::text)) OR ((cvterm.name)::text = 'leucoplast_gene'::text)) OR ((cvterm.name)::text = 'proplastid_gene'::text)) OR ((cvterm.name)::text = 'endogenous_retroviral_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_inverted_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'wild_type_rescue_gene'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'floxed_gene'::text)) OR ((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_edited_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'gRNA_gene'::text)) OR ((cvterm.name)::text = 'miRNA_gene'::text)) OR ((cvterm.name)::text = 'scRNA_gene'::text)) OR ((cvterm.name)::text = 'snoRNA_gene'::text)) OR ((cvterm.name)::text = 'snRNA_gene'::text)) OR ((cvterm.name)::text = 'SRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'stRNA_gene'::text)) OR ((cvterm.name)::text = 'tmRNA_gene'::text)) OR ((cvterm.name)::text = 'tRNA_gene'::text)) OR ((cvterm.name)::text = 'rRNA_gene'::text)) OR ((cvterm.name)::text = 'piRNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'lincRNA_gene'::text)) OR ((cvterm.name)::text = 'telomerase_RNA_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'gene_with_start_codon_CUG'::text)) OR ((cvterm.name)::text = 'chromosome_arm'::text)) OR ((cvterm.name)::text = 'chromosome_band'::text)) OR ((cvterm.name)::text = 'interband'::text)) OR ((cvterm.name)::text = 'chromosomal_regulatory_element'::text)) OR ((cvterm.name)::text = 'chromosomal_structural_element'::text)) OR ((cvterm.name)::text = 'introgressed_chromosome_region'::text)) OR ((cvterm.name)::text = 'matrix_attachment_site'::text)) OR ((cvterm.name)::text = 'centromere'::text)) OR ((cvterm.name)::text = 'telomere'::text)) OR ((cvterm.name)::text = 'point_centromere'::text)) OR ((cvterm.name)::text = 'regional_centromere'::text)) OR ((cvterm.name)::text = 'transcript'::text)) OR ((cvterm.name)::text = 'regulatory_region'::text)) OR ((cvterm.name)::text = 'polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'primary_transcript'::text)) OR ((cvterm.name)::text = 'mature_transcript'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_protein'::text)) OR ((cvterm.name)::text = 'enzymatic_RNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_transcript'::text)) OR ((cvterm.name)::text = 'aberrant_processed_transcript'::text)) OR ((cvterm.name)::text = 'edited_transcript'::text)) OR ((cvterm.name)::text = 'processed_transcript'::text)) OR ((cvterm.name)::text = 'alternatively_spliced_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text)) OR ((cvterm.name)::text = 'nc_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text)) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text)) OR ((cvterm.name)::text = 'capped_primary_transcript'::text)) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text)) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mRNA'::text)) OR ((cvterm.name)::text = 'ncRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'scRNA'::text)) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'ribozyme'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'transcription_regulatory_region'::text)) OR ((cvterm.name)::text = 'translation_regulatory_region'::text)) OR ((cvterm.name)::text = 'recombination_regulatory_region'::text)) OR ((cvterm.name)::text = 'replication_regulatory_region'::text)) OR ((cvterm.name)::text = 'terminator'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text)) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text)) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'operator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'promoter'::text)) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'attenuator'::text)) OR ((cvterm.name)::text = 'exon'::text)) OR ((cvterm.name)::text = 'edited_transcript_feature'::text)) OR ((cvterm.name)::text = 'mature_transcript_region'::text)) OR ((cvterm.name)::text = 'primary_transcript_region'::text)) OR ((cvterm.name)::text = 'exon_region'::text)) OR ((cvterm.name)::text = 'anchor_binding_site'::text)) OR ((cvterm.name)::text = 'coding_exon'::text)) OR ((cvterm.name)::text = 'noncoding_exon'::text)) OR ((cvterm.name)::text = 'interior_exon'::text)) OR ((cvterm.name)::text = 'exon_of_single_exon_gene'::text)) OR ((cvterm.name)::text = 'interior_coding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'pre_edited_region'::text)) OR ((cvterm.name)::text = 'editing_block'::text)) OR ((cvterm.name)::text = 'editing_domain'::text)) OR ((cvterm.name)::text = 'unedited_region'::text)) OR ((cvterm.name)::text = 'mRNA_region'::text)) OR ((cvterm.name)::text = 'tmRNA_region'::text)) OR ((cvterm.name)::text = 'guide_RNA_region'::text)) OR ((cvterm.name)::text = 'tRNA_region'::text)) OR ((cvterm.name)::text = 'riboswitch'::text)) OR ((cvterm.name)::text = 'ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'UTR'::text)) OR ((cvterm.name)::text = 'CDS'::text)) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text)) OR ((cvterm.name)::text = 'UTR_region'::text)) OR ((cvterm.name)::text = 'CDS_region'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text)) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'five_prime_UTR'::text)) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_CDS'::text)) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text)) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'coding_start'::text)) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'tmRNA_coding_piece'::text)) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text)) OR ((cvterm.name)::text = 'anchor_region'::text)) OR ((cvterm.name)::text = 'template_region'::text)) OR ((cvterm.name)::text = 'anticodon_loop'::text)) OR ((cvterm.name)::text = 'anticodon'::text)) OR ((cvterm.name)::text = 'CCA_tail'::text)) OR ((cvterm.name)::text = 'DHU_loop'::text)) OR ((cvterm.name)::text = 'T_loop'::text)) OR ((cvterm.name)::text = 'splice_site'::text)) OR ((cvterm.name)::text = 'intron'::text)) OR ((cvterm.name)::text = 'clip'::text)) OR ((cvterm.name)::text = 'TSS'::text)) OR ((cvterm.name)::text = 'transcription_end_site'::text)) OR ((cvterm.name)::text = 'spliced_leader_RNA'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text)) OR ((cvterm.name)::text = 'intron_domain'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'outron'::text)) OR ((cvterm.name)::text = 'cis_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_site'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'five_prime_intron'::text)) OR ((cvterm.name)::text = 'interior_intron'::text)) OR ((cvterm.name)::text = 'three_prime_intron'::text)) OR ((cvterm.name)::text = 'twintron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text)) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'group_I_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'U2_intron'::text)) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'archaeal_intron'::text)) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'five_prime_clip'::text)) OR ((cvterm.name)::text = 'three_prime_clip'::text)) OR ((cvterm.name)::text = 'major_TSS'::text)) OR ((cvterm.name)::text = 'minor_TSS'::text)) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'branch_site'::text)) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text)) OR ((cvterm.name)::text = 'internal_guide_sequence'::text)) OR ((cvterm.name)::text = 'mirtron'::text)) OR ((cvterm.name)::text = 'pre_miRNA'::text)) OR ((cvterm.name)::text = 'miRNA_stem'::text)) OR ((cvterm.name)::text = 'miRNA_loop'::text)) OR ((cvterm.name)::text = 'miRNA_antiguide'::text)) OR ((cvterm.name)::text = 'noncoding_region_of_exon'::text)) OR ((cvterm.name)::text = 'coding_region_of_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'mature_protein_region'::text)) OR ((cvterm.name)::text = 'immature_peptide_region'::text)) OR ((cvterm.name)::text = 'compositionally_biased_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_region'::text)) OR ((cvterm.name)::text = 'polypeptide_variation_site'::text)) OR ((cvterm.name)::text = 'peptide_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_peptide_region'::text)) OR ((cvterm.name)::text = 'hydrophobic_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_region'::text)) OR ((cvterm.name)::text = 'active_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'membrane_structure'::text)) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text)) OR ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text)) OR ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'membrane_peptide_loop'::text)) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'asx_motif'::text)) OR ((cvterm.name)::text = 'beta_bulge'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text)) OR ((cvterm.name)::text = 'beta_strand'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text)) OR ((cvterm.name)::text = 'serine_threonine_motif'::text)) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text)) OR ((cvterm.name)::text = 'alpha_beta_motif'::text)) OR ((cvterm.name)::text = 'peptide_coil'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text)) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text)) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'asx_turn'::text)) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'coiled_coil'::text)) OR ((cvterm.name)::text = 'helix_turn_helix'::text)) OR ((cvterm.name)::text = 'natural_variant_site'::text)) OR ((cvterm.name)::text = 'mutated_variant_site'::text)) OR ((cvterm.name)::text = 'alternate_sequence_site'::text)) OR ((cvterm.name)::text = 'signal_peptide'::text)) OR ((cvterm.name)::text = 'transit_peptide'::text)) OR ((cvterm.name)::text = 'nuclear_localization_signal'::text)) OR ((cvterm.name)::text = 'endosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'lysosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'nuclear_export_signal'::text)) OR ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_initiator_methionine'::text)) OR ((cvterm.name)::text = 'intein'::text)) OR ((cvterm.name)::text = 'propeptide_cleavage_site'::text)) OR ((cvterm.name)::text = 'propeptide'::text)) OR ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text)) OR ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text)) OR ((cvterm.name)::text = 'n_terminal_region'::text)) OR ((cvterm.name)::text = 'c_terminal_region'::text)) OR ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'polypeptide_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_repeat'::text)) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text)) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'non_transcribed_region'::text)) OR ((cvterm.name)::text = 'gene_fragment'::text)) OR ((cvterm.name)::text = 'TSS_region'::text)) OR ((cvterm.name)::text = 'gene_segment'::text)) OR ((cvterm.name)::text = 'pseudogenic_gene_segment'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'extrachromosomal_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'integrated_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'transposable_element'::text)) OR ((cvterm.name)::text = 'proviral_region'::text)) OR ((cvterm.name)::text = 'integron'::text)) OR ((cvterm.name)::text = 'genomic_island'::text)) OR ((cvterm.name)::text = 'integrated_plasmid'::text)) OR ((cvterm.name)::text = 'cointegrated_plasmid'::text)) OR ((cvterm.name)::text = 'retrotransposon'::text)) OR ((cvterm.name)::text = 'DNA_transposon'::text)) OR ((cvterm.name)::text = 'foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'nested_transposon'::text)) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text)) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'prophage'::text)) OR ((cvterm.name)::text = 'pathogenic_island'::text)) OR ((cvterm.name)::text = 'metabolic_island'::text)) OR ((cvterm.name)::text = 'adaptive_island'::text)) OR ((cvterm.name)::text = 'symbiosis_island'::text)) OR ((cvterm.name)::text = 'cryptic_prophage'::text)) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text)) OR ((cvterm.name)::text = 'plasmid'::text)) OR ((cvterm.name)::text = 'chromosome'::text)) OR ((cvterm.name)::text = 'vector_replicon'::text)) OR ((cvterm.name)::text = 'maxicircle'::text)) OR ((cvterm.name)::text = 'minicircle'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'episome'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'mitochondrial_chromosome'::text)) OR ((cvterm.name)::text = 'chloroplast_chromosome'::text)) OR ((cvterm.name)::text = 'chromoplast_chromosome'::text)) OR ((cvterm.name)::text = 'cyanelle_chromosome'::text)) OR ((cvterm.name)::text = 'leucoplast_chromosome'::text)) OR ((cvterm.name)::text = 'macronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'micronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nucleomorphic_chromosome'::text)) OR ((cvterm.name)::text = 'DNA_chromosome'::text)) OR ((cvterm.name)::text = 'RNA_chromosome'::text)) OR ((cvterm.name)::text = 'apicoplast_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'YAC'::text)) OR ((cvterm.name)::text = 'BAC'::text)) OR ((cvterm.name)::text = 'PAC'::text)) OR ((cvterm.name)::text = 'cosmid'::text)) OR ((cvterm.name)::text = 'phagemid'::text)) OR ((cvterm.name)::text = 'fosmid'::text)) OR ((cvterm.name)::text = 'lambda_vector'::text)) OR ((cvterm.name)::text = 'plasmid_vector'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'modified_RNA_base_feature'::text)) OR ((cvterm.name)::text = 'inosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanine'::text)) OR ((cvterm.name)::text = 'ribothymidine'::text)) OR ((cvterm.name)::text = 'modified_adenosine'::text)) OR ((cvterm.name)::text = 'modified_cytidine'::text)) OR ((cvterm.name)::text = 'modified_guanosine'::text)) OR ((cvterm.name)::text = 'modified_uridine'::text)) OR ((cvterm.name)::text = 'modified_inosine'::text)) OR ((cvterm.name)::text = 'methylinosine'::text)) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'one_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text)) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text)) OR ((cvterm.name)::text = 'three_methylcytidine'::text)) OR ((cvterm.name)::text = 'five_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_thiocytidine'::text)) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text)) OR ((cvterm.name)::text = 'five_formylcytidine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'lysidine'::text)) OR ((cvterm.name)::text = 'N4_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text)) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text)) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'one_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_methylguanosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text)) OR ((cvterm.name)::text = 'wybutosine'::text)) OR ((cvterm.name)::text = 'peroxywybutosine'::text)) OR ((cvterm.name)::text = 'hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'wyosine'::text)) OR ((cvterm.name)::text = 'methylwyosine'::text)) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'four_demethylwyosine'::text)) OR ((cvterm.name)::text = 'isowyosine'::text)) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'queuosine'::text)) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'dihydrouridine'::text)) OR ((cvterm.name)::text = 'pseudouridine'::text)) OR ((cvterm.name)::text = 'five_methyluridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_thiouridine'::text)) OR ((cvterm.name)::text = 'four_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text)) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text)) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text)) OR ((cvterm.name)::text = 'five_methoxyuridine'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'three_methyluridine'::text)) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text)) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text)) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'catalytic_residue'::text)) OR ((cvterm.name)::text = 'modified_amino_acid_feature'::text)) OR ((cvterm.name)::text = 'alanine'::text)) OR ((cvterm.name)::text = 'valine'::text)) OR ((cvterm.name)::text = 'leucine'::text)) OR ((cvterm.name)::text = 'isoleucine'::text)) OR ((cvterm.name)::text = 'proline'::text)) OR ((cvterm.name)::text = 'tryptophan'::text)) OR ((cvterm.name)::text = 'phenylalanine'::text)) OR ((cvterm.name)::text = 'methionine'::text)) OR ((cvterm.name)::text = 'glycine'::text)) OR ((cvterm.name)::text = 'serine'::text)) OR ((cvterm.name)::text = 'threonine'::text)) OR ((cvterm.name)::text = 'tyrosine'::text)) OR ((cvterm.name)::text = 'cysteine'::text)) OR ((cvterm.name)::text = 'glutamine'::text)) OR ((cvterm.name)::text = 'asparagine'::text)) OR ((cvterm.name)::text = 'lysine'::text)) OR ((cvterm.name)::text = 'arginine'::text)) OR ((cvterm.name)::text = 'histidine'::text)) OR ((cvterm.name)::text = 'aspartic_acid'::text)) OR ((cvterm.name)::text = 'glutamic_acid'::text)) OR ((cvterm.name)::text = 'selenocysteine'::text)) OR ((cvterm.name)::text = 'pyrrolysine'::text)) OR ((cvterm.name)::text = 'modified_glycine'::text)) OR ((cvterm.name)::text = 'modified_L_alanine'::text)) OR ((cvterm.name)::text = 'modified_L_asparagine'::text)) OR ((cvterm.name)::text = 'modified_L_aspartic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_cysteine'::text)) OR ((cvterm.name)::text = 'modified_L_glutamic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_threonine'::text)) OR ((cvterm.name)::text = 'modified_L_tryptophan'::text)) OR ((cvterm.name)::text = 'modified_L_glutamine'::text)) OR ((cvterm.name)::text = 'modified_L_methionine'::text)) OR ((cvterm.name)::text = 'modified_L_isoleucine'::text)) OR ((cvterm.name)::text = 'modified_L_phenylalanine'::text)) OR ((cvterm.name)::text = 'modified_L_histidine'::text)) OR ((cvterm.name)::text = 'modified_L_serine'::text)) OR ((cvterm.name)::text = 'modified_L_lysine'::text)) OR ((cvterm.name)::text = 'modified_L_leucine'::text)) OR ((cvterm.name)::text = 'modified_L_selenocysteine'::text)) OR ((cvterm.name)::text = 'modified_L_valine'::text)) OR ((cvterm.name)::text = 'modified_L_proline'::text)) OR ((cvterm.name)::text = 'modified_L_tyrosine'::text)) OR ((cvterm.name)::text = 'modified_L_arginine'::text)) OR ((cvterm.name)::text = 'heritable_phenotypic_marker'::text)) OR ((cvterm.name)::text = 'DArT_marker'::text)) OR ((cvterm.name)::text = 'nucleotide_motif'::text)) OR ((cvterm.name)::text = 'DNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_motif'::text)) OR ((cvterm.name)::text = 'PSE_motif'::text)) OR ((cvterm.name)::text = 'CAAT_signal'::text)) OR ((cvterm.name)::text = 'minus_10_signal'::text)) OR ((cvterm.name)::text = 'minus_35_signal'::text)) OR ((cvterm.name)::text = 'DRE_motif'::text)) OR ((cvterm.name)::text = 'E_box_motif'::text)) OR ((cvterm.name)::text = 'INR1_motif'::text)) OR ((cvterm.name)::text = 'GAGA_motif'::text)) OR ((cvterm.name)::text = 'octamer_motif'::text)) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text)) OR ((cvterm.name)::text = 'DCE_SI'::text)) OR ((cvterm.name)::text = 'DCE_SII'::text)) OR ((cvterm.name)::text = 'DCE_SIII'::text)) OR ((cvterm.name)::text = 'minus_12_signal'::text)) OR ((cvterm.name)::text = 'minus_24_signal'::text)) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text)) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_junction_loop'::text)) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_hook_turn'::text)) OR ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'sticky_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'modified_base'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'methylated_base_feature'::text)) OR ((cvterm.name)::text = 'methylated_C'::text)) OR ((cvterm.name)::text = 'methylated_A'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'operon'::text)) OR ((cvterm.name)::text = 'mating_type_region'::text)) OR ((cvterm.name)::text = 'gene_array'::text)) OR ((cvterm.name)::text = 'gene_subarray'::text)) OR ((cvterm.name)::text = 'gene_cassette_array'::text)) OR ((cvterm.name)::text = 'regulon'::text)) OR ((cvterm.name)::text = 'sequence_length_variation'::text)) OR ((cvterm.name)::text = 'MNP'::text)) OR ((cvterm.name)::text = 'SNV'::text)) OR ((cvterm.name)::text = 'complex_substitution'::text)) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text)) OR ((cvterm.name)::text = 'SNP'::text)) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'biological_region'::text));

CREATE VIEW so.biomaterial_region (biomaterial_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS biomaterial_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'reagent'::text) OR ((cvterm.name)::text = 'engineered_region'::text)) OR ((cvterm.name)::text = 'PCR_product'::text)) OR ((cvterm.name)::text = 'clone'::text)) OR ((cvterm.name)::text = 'rescue_region'::text)) OR ((cvterm.name)::text = 'oligo'::text)) OR ((cvterm.name)::text = 'clone_insert'::text)) OR ((cvterm.name)::text = 'cloned_region'::text)) OR ((cvterm.name)::text = 'databank_entry'::text)) OR ((cvterm.name)::text = 'RAPD'::text)) OR ((cvterm.name)::text = 'genomic_clone'::text)) OR ((cvterm.name)::text = 'cDNA_clone'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'validated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text)) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text)) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'aptamer'::text)) OR ((cvterm.name)::text = 'probe'::text)) OR ((cvterm.name)::text = 'tag'::text)) OR ((cvterm.name)::text = 'ss_oligo'::text)) OR ((cvterm.name)::text = 'ds_oligo'::text)) OR ((cvterm.name)::text = 'DNAzyme'::text)) OR ((cvterm.name)::text = 'synthetic_oligo'::text)) OR ((cvterm.name)::text = 'DNA_aptamer'::text)) OR ((cvterm.name)::text = 'RNA_aptamer'::text)) OR ((cvterm.name)::text = 'microarray_oligo'::text)) OR ((cvterm.name)::text = 'SAGE_tag'::text)) OR ((cvterm.name)::text = 'STS'::text)) OR ((cvterm.name)::text = 'EST'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'five_prime_EST'::text)) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'primer'::text)) OR ((cvterm.name)::text = 'sequencing_primer'::text)) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'RNAi_reagent'::text)) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text)) OR ((cvterm.name)::text = 'morpholino_oligo'::text)) OR ((cvterm.name)::text = 'PNA_oligo'::text)) OR ((cvterm.name)::text = 'LNA_oligo'::text)) OR ((cvterm.name)::text = 'TNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text)) OR ((cvterm.name)::text = 'R_GNA_oligo'::text)) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'cloned_cDNA_insert'::text)) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_region'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'biomaterial_region'::text));

CREATE VIEW so.bipartite_duplication (bipartite_duplication_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS bipartite_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bipartite_duplication'::text);

CREATE VIEW so.bipartite_inversion (bipartite_inversion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS bipartite_inversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bipartite_inversion'::text);

CREATE VIEW so.blocked_reading_frame (blocked_reading_frame_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS blocked_reading_frame_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'blocked_reading_frame'::text);

CREATE VIEW so.blunt_end_restriction_enzyme_cleavage_junction (blunt_end_restriction_enzyme_cleavage_junction_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS blunt_end_restriction_enzyme_cleavage_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_junction'::text);

CREATE VIEW so.blunt_end_restriction_enzyme_cleavage_site (blunt_end_restriction_enzyme_cleavage_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS blunt_end_restriction_enzyme_cleavage_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_site'::text);

CREATE VIEW so.bound_by_factor (bound_by_factor_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS bound_by_factor_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'bound_by_protein'::text) OR ((cvterm.name)::text = 'bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'bound_by_factor'::text));

CREATE VIEW so.bound_by_nucleic_acid (bound_by_nucleic_acid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS bound_by_nucleic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bound_by_nucleic_acid'::text);

CREATE VIEW so.bound_by_protein (bound_by_protein_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS bound_by_protein_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bound_by_protein'::text);

CREATE VIEW so.branch_site (branch_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS branch_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'branch_site'::text);

CREATE VIEW so.bred_motif (bred_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS bred_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'BREd_motif'::text);

CREATE VIEW so.breu_motif (breu_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS breu_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'BREu_motif'::text);

CREATE VIEW so.bruno_response_element (bruno_response_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS bruno_response_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'Bruno_response_element'::text);

CREATE VIEW so.c_box (c_box_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS c_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_box'::text);

CREATE VIEW so.c_cluster (c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_cluster'::text);

CREATE VIEW so.c_d_box_snorna (c_d_box_snorna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS c_d_box_snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'U14_snoRNA'::text) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text));

CREATE VIEW so.c_d_box_snorna_encoding (c_d_box_snorna_encoding_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS c_d_box_snorna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text);

CREATE VIEW so.c_d_box_snorna_primary_transcript (c_d_box_snorna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS c_d_box_snorna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text);

CREATE VIEW so.c_gene (c_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS c_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_gene'::text);

CREATE VIEW so.c_terminal_region (c_terminal_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS c_terminal_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'c_terminal_region'::text);

CREATE VIEW so.c_to_a_transversion (c_to_a_transversion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS c_to_a_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_to_A_transversion'::text);

CREATE VIEW so.c_to_g_transversion (c_to_g_transversion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS c_to_g_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_to_G_transversion'::text);

CREATE VIEW so.c_to_t_transition (c_to_t_transition_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS c_to_t_transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text) OR ((cvterm.name)::text = 'C_to_T_transition'::text));

CREATE VIEW so.c_to_t_transition_at_pcpg_site (c_to_t_transition_at_pcpg_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS c_to_t_transition_at_pcpg_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text);

CREATE VIEW so.caat_signal (caat_signal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS caat_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CAAT_signal'::text);

CREATE VIEW so.canonical_five_prime_splice_site (canonical_five_prime_splice_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS canonical_five_prime_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text);

CREATE VIEW so.canonical_three_prime_splice_site (canonical_three_prime_splice_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS canonical_three_prime_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text);

CREATE VIEW so.cap (cap_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cap_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cap'::text);

CREATE VIEW so.capped (capped_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS capped_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'capped'::text);

CREATE VIEW so.capped_mrna (capped_mrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS capped_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'capped_mRNA'::text);

CREATE VIEW so.capped_primary_transcript (capped_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS capped_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'capped_primary_transcript'::text);

CREATE VIEW so.cassette_array_member (cassette_array_member_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cassette_array_member_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cassette_array_member'::text);

CREATE VIEW so.cassette_pseudogene (cassette_pseudogene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cassette_pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cassette_pseudogene'::text);

CREATE VIEW so.catalytic_residue (catalytic_residue_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS catalytic_residue_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'catalytic_residue'::text);

CREATE VIEW so.catmat_left_handed_four (catmat_left_handed_four_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS catmat_left_handed_four_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'catmat_left_handed_four'::text);

CREATE VIEW so.catmat_left_handed_three (catmat_left_handed_three_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS catmat_left_handed_three_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'catmat_left_handed_three'::text);

CREATE VIEW so.catmat_right_handed_four (catmat_right_handed_four_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS catmat_right_handed_four_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'catmat_right_handed_four'::text);

CREATE VIEW so.catmat_right_handed_three (catmat_right_handed_three_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS catmat_right_handed_three_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'catmat_right_handed_three'::text);

CREATE VIEW so.cca_tail (cca_tail_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cca_tail_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CCA_tail'::text);

CREATE VIEW so.cdna (cdna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cdna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'single_stranded_cDNA'::text) OR ((cvterm.name)::text = 'double_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'cDNA'::text));

CREATE VIEW so.cdna_clone (cdna_clone_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'validated_cDNA_clone'::text) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text)) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text)) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'cDNA_clone'::text));

CREATE VIEW so.cdna_match (cdna_match_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cdna_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cDNA_match'::text);

CREATE VIEW so.cds (cds_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cds_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((cvterm.name)::text = 'edited_CDS'::text) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'CDS'::text));

CREATE VIEW so.cds_fragment (cds_fragment_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cds_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CDS_fragment'::text);

CREATE VIEW so.cds_independently_known (cds_independently_known_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cds_independently_known_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CDS_independently_known'::text);

CREATE VIEW so.cds_predicted (cds_predicted_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cds_predicted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'orphan_CDS'::text) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text));

CREATE VIEW so.cds_region (cds_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cds_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((cvterm.name)::text = 'coding_start'::text) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'CDS_region'::text));

CREATE VIEW so.cds_supported_by_domain_match_data (cds_supported_by_domain_match_data_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cds_supported_by_domain_match_data_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text);

CREATE VIEW so.cds_supported_by_est_or_cdna_data (cds_supported_by_est_or_cdna_data_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cds_supported_by_est_or_cdna_data_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text);

CREATE VIEW so.cds_supported_by_sequence_similarity_data (cds_supported_by_sequence_similarity_data_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cds_supported_by_sequence_similarity_data_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text));

CREATE VIEW so.central_hydrophobic_region_of_signal_peptide (central_hydrophobic_region_of_signal_peptide_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS central_hydrophobic_region_of_signal_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text);

CREATE VIEW so.centromere (centromere_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS centromere_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'point_centromere'::text) OR ((cvterm.name)::text = 'regional_centromere'::text)) OR ((cvterm.name)::text = 'centromere'::text));

CREATE VIEW so.centromere_dna_element_i (centromere_dna_element_i_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS centromere_dna_element_i_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'centromere_DNA_Element_I'::text);

CREATE VIEW so.centromere_dna_element_ii (centromere_dna_element_ii_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS centromere_dna_element_ii_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'centromere_DNA_Element_II'::text);

CREATE VIEW so.centromere_dna_element_iii (centromere_dna_element_iii_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS centromere_dna_element_iii_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'centromere_DNA_Element_III'::text);

CREATE VIEW so.centromeric_repeat (centromeric_repeat_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS centromeric_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text) OR ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text)) OR ((cvterm.name)::text = 'centromeric_repeat'::text));

CREATE VIEW so.chimeric_cdna_clone (chimeric_cdna_clone_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chimeric_cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chimeric_cDNA_clone'::text);

CREATE VIEW so.chip_seq_region (chip_seq_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chip_seq_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CHiP_seq_region'::text);

CREATE VIEW so.chloroplast_chromosome (chloroplast_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chloroplast_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chloroplast_chromosome'::text);

CREATE VIEW so.chloroplast_dna (chloroplast_dna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chloroplast_dna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chloroplast_DNA'::text);

CREATE VIEW so.chloroplast_sequence (chloroplast_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chloroplast_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'chloroplast_DNA'::text) OR ((cvterm.name)::text = 'chloroplast_sequence'::text));

CREATE VIEW so.chromoplast_chromosome (chromoplast_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromoplast_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromoplast_chromosome'::text);

CREATE VIEW so.chromoplast_gene (chromoplast_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromoplast_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromoplast_gene'::text);

CREATE VIEW so.chromoplast_sequence (chromoplast_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromoplast_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromoplast_sequence'::text);

CREATE VIEW so.chromosomal_deletion (chromosomal_deletion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromosomal_deletion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'chromosomal_deletion'::text));

CREATE VIEW so.chromosomal_duplication (chromosomal_duplication_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromosomal_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((cvterm.name)::text = 'interchromosomal_duplication'::text) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'free_duplication'::text)) OR ((cvterm.name)::text = 'insertional_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'uninverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text)) OR ((cvterm.name)::text = 'chromosomal_duplication'::text));

CREATE VIEW so.chromosomal_inversion (chromosomal_inversion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromosomal_inversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((cvterm.name)::text = 'inverted_ring_chromosome'::text) OR ((cvterm.name)::text = 'pericentric_inversion'::text)) OR ((cvterm.name)::text = 'paracentric_inversion'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'chromosomal_inversion'::text));

CREATE VIEW so.chromosomal_regulatory_element (chromosomal_regulatory_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromosomal_regulatory_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'matrix_attachment_site'::text) OR ((cvterm.name)::text = 'chromosomal_regulatory_element'::text));

CREATE VIEW so.chromosomal_structural_element (chromosomal_structural_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromosomal_structural_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'centromere'::text) OR ((cvterm.name)::text = 'telomere'::text)) OR ((cvterm.name)::text = 'point_centromere'::text)) OR ((cvterm.name)::text = 'regional_centromere'::text)) OR ((cvterm.name)::text = 'chromosomal_structural_element'::text));

CREATE VIEW so.chromosomal_translocation (chromosomal_translocation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromosomal_translocation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'translocation_element'::text) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text)) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'cyclic_translocation'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'chromosomal_translocation'::text));

CREATE VIEW so.chromosomal_transposition (chromosomal_transposition_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromosomal_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'chromosomal_transposition'::text));

CREATE VIEW so.chromosomal_variation_attribute (chromosomal_variation_attribute_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromosomal_variation_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'intrachromosomal'::text) OR ((cvterm.name)::text = 'interchromosomal'::text)) OR ((cvterm.name)::text = 'chromosomal_variation_attribute'::text));

CREATE VIEW so.chromosomally_aberrant_genome (chromosomally_aberrant_genome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromosomally_aberrant_genome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromosomally_aberrant_genome'::text);

CREATE VIEW so.chromosome (chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((cvterm.name)::text = 'mitochondrial_chromosome'::text) OR ((cvterm.name)::text = 'chloroplast_chromosome'::text)) OR ((cvterm.name)::text = 'chromoplast_chromosome'::text)) OR ((cvterm.name)::text = 'cyanelle_chromosome'::text)) OR ((cvterm.name)::text = 'leucoplast_chromosome'::text)) OR ((cvterm.name)::text = 'macronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'micronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nucleomorphic_chromosome'::text)) OR ((cvterm.name)::text = 'DNA_chromosome'::text)) OR ((cvterm.name)::text = 'RNA_chromosome'::text)) OR ((cvterm.name)::text = 'apicoplast_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'chromosome'::text));

CREATE VIEW so.chromosome_arm (chromosome_arm_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromosome_arm_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromosome_arm'::text);

CREATE VIEW so.chromosome_band (chromosome_band_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromosome_band_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromosome_band'::text);

CREATE VIEW so.chromosome_breakage_sequence (chromosome_breakage_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromosome_breakage_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromosome_breakage_sequence'::text);

CREATE VIEW so.chromosome_breakpoint (chromosome_breakpoint_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromosome_breakpoint_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'inversion_breakpoint'::text) OR ((cvterm.name)::text = 'translocation_breakpoint'::text)) OR ((cvterm.name)::text = 'insertion_breakpoint'::text)) OR ((cvterm.name)::text = 'deletion_breakpoint'::text)) OR ((cvterm.name)::text = 'chromosome_breakpoint'::text));

CREATE VIEW so.chromosome_fission (chromosome_fission_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromosome_fission_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromosome_fission'::text);

CREATE VIEW so.chromosome_number_variation (chromosome_number_variation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromosome_number_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'aneuploid'::text) OR ((cvterm.name)::text = 'polyploid'::text)) OR ((cvterm.name)::text = 'hyperploid'::text)) OR ((cvterm.name)::text = 'hypoploid'::text)) OR ((cvterm.name)::text = 'autopolyploid'::text)) OR ((cvterm.name)::text = 'allopolyploid'::text)) OR ((cvterm.name)::text = 'chromosome_number_variation'::text));

CREATE VIEW so.chromosome_part (chromosome_part_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromosome_part_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((cvterm.name)::text = 'chromosome_arm'::text) OR ((cvterm.name)::text = 'chromosome_band'::text)) OR ((cvterm.name)::text = 'interband'::text)) OR ((cvterm.name)::text = 'chromosomal_regulatory_element'::text)) OR ((cvterm.name)::text = 'chromosomal_structural_element'::text)) OR ((cvterm.name)::text = 'introgressed_chromosome_region'::text)) OR ((cvterm.name)::text = 'matrix_attachment_site'::text)) OR ((cvterm.name)::text = 'centromere'::text)) OR ((cvterm.name)::text = 'telomere'::text)) OR ((cvterm.name)::text = 'point_centromere'::text)) OR ((cvterm.name)::text = 'regional_centromere'::text)) OR ((cvterm.name)::text = 'chromosome_part'::text));

CREATE VIEW so.chromosome_structure_variation (chromosome_structure_variation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromosome_structure_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'free_chromosome_arm'::text) OR ((cvterm.name)::text = 'chromosomal_transposition'::text)) OR ((cvterm.name)::text = 'aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'intrachromosomal_mutation'::text)) OR ((cvterm.name)::text = 'interchromosomal_mutation'::text)) OR ((cvterm.name)::text = 'chromosomal_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome'::text)) OR ((cvterm.name)::text = 'autosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'complex_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'uncharacterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'chromosomal_deletion'::text)) OR ((cvterm.name)::text = 'chromosomal_inversion'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'ring_chromosome'::text)) OR ((cvterm.name)::text = 'chromosome_fission'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'pericentric_inversion'::text)) OR ((cvterm.name)::text = 'paracentric_inversion'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'translocation_element'::text)) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text)) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'cyclic_translocation'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_duplication'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'free_duplication'::text)) OR ((cvterm.name)::text = 'insertional_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'uninverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome_arm'::text)) OR ((cvterm.name)::text = 'homo_compound_chromosome'::text)) OR ((cvterm.name)::text = 'hetero_compound_chromosome'::text)) OR ((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'laevosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'chromosome_structure_variation'::text));

CREATE VIEW so.chromosome_variation (chromosome_variation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS chromosome_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'assortment_derived_variation'::text) OR ((cvterm.name)::text = 'chromosome_number_variation'::text)) OR ((cvterm.name)::text = 'chromosome_structure_variation'::text)) OR ((cvterm.name)::text = 'assortment_derived_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency'::text)) OR ((cvterm.name)::text = 'assortment_derived_aneuploid'::text)) OR ((cvterm.name)::text = 'aneuploid'::text)) OR ((cvterm.name)::text = 'polyploid'::text)) OR ((cvterm.name)::text = 'hyperploid'::text)) OR ((cvterm.name)::text = 'hypoploid'::text)) OR ((cvterm.name)::text = 'autopolyploid'::text)) OR ((cvterm.name)::text = 'allopolyploid'::text)) OR ((cvterm.name)::text = 'free_chromosome_arm'::text)) OR ((cvterm.name)::text = 'chromosomal_transposition'::text)) OR ((cvterm.name)::text = 'aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'intrachromosomal_mutation'::text)) OR ((cvterm.name)::text = 'interchromosomal_mutation'::text)) OR ((cvterm.name)::text = 'chromosomal_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome'::text)) OR ((cvterm.name)::text = 'autosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'complex_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'uncharacterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'chromosomal_deletion'::text)) OR ((cvterm.name)::text = 'chromosomal_inversion'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'ring_chromosome'::text)) OR ((cvterm.name)::text = 'chromosome_fission'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'pericentric_inversion'::text)) OR ((cvterm.name)::text = 'paracentric_inversion'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'translocation_element'::text)) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text)) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'cyclic_translocation'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_duplication'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'free_duplication'::text)) OR ((cvterm.name)::text = 'insertional_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'uninverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome_arm'::text)) OR ((cvterm.name)::text = 'homo_compound_chromosome'::text)) OR ((cvterm.name)::text = 'hetero_compound_chromosome'::text)) OR ((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'laevosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'chromosome_variation'::text));

CREATE VIEW so.circular (circular_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS circular_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'circular'::text);

CREATE VIEW so.circular_double_stranded_dna_chromosome (circular_double_stranded_dna_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS circular_double_stranded_dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text);

CREATE VIEW so.circular_double_stranded_rna_chromosome (circular_double_stranded_rna_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS circular_double_stranded_rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text);

CREATE VIEW so.circular_single_stranded_dna_chromosome (circular_single_stranded_dna_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS circular_single_stranded_dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text);

CREATE VIEW so.circular_single_stranded_rna_chromosome (circular_single_stranded_rna_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS circular_single_stranded_rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text);

CREATE VIEW so.cis_regulatory_frameshift_element (cis_regulatory_frameshift_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cis_regulatory_frameshift_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text);

CREATE VIEW so.cis_splice_site (cis_splice_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cis_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'five_prime_cis_splice_site'::text) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'cis_splice_site'::text));

CREATE VIEW so.class_i_rna (class_i_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS class_i_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'class_I_RNA'::text);

CREATE VIEW so.class_ii_rna (class_ii_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS class_ii_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'class_II_RNA'::text);

CREATE VIEW so.cleaved_for_gpi_anchor_region (cleaved_for_gpi_anchor_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cleaved_for_gpi_anchor_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text);

CREATE VIEW so.cleaved_initiator_methionine (cleaved_initiator_methionine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cleaved_initiator_methionine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cleaved_initiator_methionine'::text);

CREATE VIEW so.cleaved_peptide_region (cleaved_peptide_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cleaved_peptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((cvterm.name)::text = 'cleaved_initiator_methionine'::text) OR ((cvterm.name)::text = 'intein'::text)) OR ((cvterm.name)::text = 'propeptide_cleavage_site'::text)) OR ((cvterm.name)::text = 'propeptide'::text)) OR ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text)) OR ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text)) OR ((cvterm.name)::text = 'n_terminal_region'::text)) OR ((cvterm.name)::text = 'c_terminal_region'::text)) OR ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text)) OR ((cvterm.name)::text = 'cleaved_peptide_region'::text));

CREATE VIEW so.clip (clip_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS clip_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'five_prime_clip'::text) OR ((cvterm.name)::text = 'three_prime_clip'::text)) OR ((cvterm.name)::text = 'clip'::text));

CREATE VIEW so.clone (clone_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'genomic_clone'::text) OR ((cvterm.name)::text = 'cDNA_clone'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'validated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text)) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text)) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'clone'::text));

CREATE VIEW so.clone_end (clone_end_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS clone_end_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'clone_end'::text);

CREATE VIEW so.clone_insert (clone_insert_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS clone_insert_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'cloned_cDNA_insert'::text) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'clone_insert'::text));

CREATE VIEW so.clone_insert_end (clone_insert_end_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS clone_insert_end_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'clone_insert_end'::text);

CREATE VIEW so.clone_insert_start (clone_insert_start_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS clone_insert_start_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'clone_insert_start'::text);

CREATE VIEW so.cloned_cdna_insert (cloned_cdna_insert_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cloned_cdna_insert_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cloned_cDNA_insert'::text);

CREATE VIEW so.cloned_genomic_insert (cloned_genomic_insert_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cloned_genomic_insert_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text));

CREATE VIEW so.cloned_region (cloned_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cloned_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cloned_region'::text);

CREATE VIEW so.coding_conserved_region (coding_conserved_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS coding_conserved_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'coding_conserved_region'::text);

CREATE VIEW so.coding_end (coding_end_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS coding_end_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'coding_end'::text);

CREATE VIEW so.coding_exon (coding_exon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS coding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'interior_coding_exon'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'coding_exon'::text));

CREATE VIEW so.coding_region_of_exon (coding_region_of_exon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS coding_region_of_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'coding_region_of_exon'::text));

CREATE VIEW so.coding_sequence_variant (coding_sequence_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS coding_sequence_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((cvterm.name)::text = 'codon_variant'::text) OR ((cvterm.name)::text = 'frameshift_variant'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text)) OR ((cvterm.name)::text = 'initiator_codon_change'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'frame_restoring_variant'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'inframe_codon_gain'::text)) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = 'coding_sequence_variant'::text));

CREATE VIEW so.coding_start (coding_start_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS coding_start_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'coding_start'::text);

CREATE VIEW so.codon (codon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((cvterm.name)::text = 'recoded_codon'::text) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'codon'::text));

CREATE VIEW so.codon_redefined (codon_redefined_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS codon_redefined_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'codon_redefined'::text);

CREATE VIEW so.codon_variant (codon_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS codon_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((cvterm.name)::text = 'initiator_codon_change'::text) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'codon_variant'::text));

CREATE VIEW so.coiled_coil (coiled_coil_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS coiled_coil_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'coiled_coil'::text);

CREATE VIEW so.cointegrated_plasmid (cointegrated_plasmid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cointegrated_plasmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cointegrated_plasmid'::text);

CREATE VIEW so.common_variant (common_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS common_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'common_variant'::text);

CREATE VIEW so.compensatory_transcript_secondary_structure_variant (compensatory_transcript_secondary_structure_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS compensatory_transcript_secondary_structure_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text);

CREATE VIEW so.complex_3d_structural_variant (complex_3d_structural_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS complex_3d_structural_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'complex_3D_structural_variant'::text);

CREATE VIEW so.complex_change_in_transcript (complex_change_in_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS complex_change_in_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'complex_change_in_transcript'::text);

CREATE VIEW so.complex_change_of_translational_product_variant (complex_change_of_translational_product_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS complex_change_of_translational_product_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'complex_change_of_translational_product_variant'::text);

CREATE VIEW so.complex_chromosomal_mutation (complex_chromosomal_mutation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS complex_chromosomal_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'complex_chromosomal_mutation'::text);

CREATE VIEW so.complex_structural_alteration (complex_structural_alteration_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS complex_structural_alteration_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'complex_structural_alteration'::text);

CREATE VIEW so.complex_substitution (complex_substitution_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS complex_substitution_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'complex_substitution'::text);

CREATE VIEW so.compositionally_biased_region_of_peptide (compositionally_biased_region_of_peptide_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS compositionally_biased_region_of_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'compositionally_biased_region_of_peptide'::text);

CREATE VIEW so.compound_chromosome (compound_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS compound_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'compound_chromosome_arm'::text) OR ((cvterm.name)::text = 'homo_compound_chromosome'::text)) OR ((cvterm.name)::text = 'hetero_compound_chromosome'::text)) OR ((cvterm.name)::text = 'compound_chromosome'::text));

CREATE VIEW so.compound_chromosome_arm (compound_chromosome_arm_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS compound_chromosome_arm_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'compound_chromosome_arm'::text);

CREATE VIEW so.conformational_change_variant (conformational_change_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS conformational_change_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'conformational_change_variant'::text);

CREATE VIEW so.conformational_switch (conformational_switch_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS conformational_switch_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'conformational_switch'::text);

CREATE VIEW so.conjugative_transposon (conjugative_transposon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS conjugative_transposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'conjugative_transposon'::text);

CREATE VIEW so.consensus (consensus_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS consensus_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'consensus'::text);

CREATE VIEW so.consensus_mrna (consensus_mrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS consensus_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'consensus_mRNA'::text);

CREATE VIEW so.consensus_region (consensus_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS consensus_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'consensus_mRNA'::text) OR ((cvterm.name)::text = 'consensus_region'::text));

CREATE VIEW so.conservative_amino_acid_substitution (conservative_amino_acid_substitution_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS conservative_amino_acid_substitution_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text);

CREATE VIEW so.conservative_missense_codon (conservative_missense_codon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS conservative_missense_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'conservative_missense_codon'::text);

CREATE VIEW so.conserved (conserved_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS conserved_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'homologous'::text) OR ((cvterm.name)::text = 'syntenic'::text)) OR ((cvterm.name)::text = 'orthologous'::text)) OR ((cvterm.name)::text = 'paralogous'::text)) OR ((cvterm.name)::text = 'conserved'::text));

CREATE VIEW so.conserved_region (conserved_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS conserved_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((cvterm.name)::text = 'coding_conserved_region'::text) OR ((cvterm.name)::text = 'nc_conserved_region'::text)) OR ((cvterm.name)::text = 'RR_tract'::text)) OR ((cvterm.name)::text = 'homologous_region'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_I'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_II'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_III'::text)) OR ((cvterm.name)::text = 'X_element'::text)) OR ((cvterm.name)::text = 'U_box'::text)) OR ((cvterm.name)::text = 'regional_centromere_central_core'::text)) OR ((cvterm.name)::text = 'syntenic_region'::text)) OR ((cvterm.name)::text = 'paralogous_region'::text)) OR ((cvterm.name)::text = 'orthologous_region'::text)) OR ((cvterm.name)::text = 'conserved_region'::text));

CREATE VIEW so.contig (contig_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS contig_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'contig'::text);

CREATE VIEW so.contig_collection (contig_collection_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS contig_collection_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'contig_collection'::text);

CREATE VIEW so.contig_read (contig_read_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS contig_read_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'contig_read'::text);

CREATE VIEW so.copy_number_change (copy_number_change_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS copy_number_change_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'copy_number_change'::text);

CREATE VIEW so.copy_number_gain (copy_number_gain_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS copy_number_gain_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'copy_number_gain'::text);

CREATE VIEW so.copy_number_loss (copy_number_loss_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS copy_number_loss_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'copy_number_loss'::text);

CREATE VIEW so.copy_number_variation (copy_number_variation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS copy_number_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'copy_number_gain'::text) OR ((cvterm.name)::text = 'copy_number_loss'::text)) OR ((cvterm.name)::text = 'copy_number_variation'::text));

CREATE VIEW so.core_promoter_element (core_promoter_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS core_promoter_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((cvterm.name)::text = 'INR_motif'::text) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text));

CREATE VIEW so.cosmid (cosmid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cosmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cosmid'::text);

CREATE VIEW so.cpg_island (cpg_island_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cpg_island_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CpG_island'::text);

CREATE VIEW so.crispr (crispr_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS crispr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CRISPR'::text);

CREATE VIEW so.crm (crm_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS crm_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'locus_control_region'::text) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'CRM'::text));

CREATE VIEW so.cross_genome_match (cross_genome_match_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cross_genome_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cross_genome_match'::text);

CREATE VIEW so.cryptic (cryptic_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cryptic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cryptic'::text);

CREATE VIEW so.cryptic_gene (cryptic_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cryptic_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'cryptogene'::text) OR ((cvterm.name)::text = 'cryptic_gene'::text));

CREATE VIEW so.cryptic_prophage (cryptic_prophage_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cryptic_prophage_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cryptic_prophage'::text);

CREATE VIEW so.cryptic_splice_acceptor (cryptic_splice_acceptor_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cryptic_splice_acceptor_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cryptic_splice_acceptor'::text);

CREATE VIEW so.cryptic_splice_donor (cryptic_splice_donor_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cryptic_splice_donor_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cryptic_splice_donor'::text);

CREATE VIEW so.cryptic_splice_site (cryptic_splice_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cryptic_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cryptic_splice_site'::text);

CREATE VIEW so.cryptic_splice_site_variant (cryptic_splice_site_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cryptic_splice_site_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'cryptic_splice_acceptor'::text) OR ((cvterm.name)::text = 'cryptic_splice_donor'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site_variant'::text));

CREATE VIEW so.cryptogene (cryptogene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cryptogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cryptogene'::text);

CREATE VIEW so.csrb_rsmb_rna (csrb_rsmb_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS csrb_rsmb_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text);

CREATE VIEW so.ct_gene (ct_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ct_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ct_gene'::text);

CREATE VIEW so.ctg_start_codon (ctg_start_codon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ctg_start_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CTG_start_codon'::text);

CREATE VIEW so.cyanelle_chromosome (cyanelle_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cyanelle_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cyanelle_chromosome'::text);

CREATE VIEW so.cyanelle_gene (cyanelle_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cyanelle_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cyanelle_gene'::text);

CREATE VIEW so.cyanelle_sequence (cyanelle_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cyanelle_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cyanelle_sequence'::text);

CREATE VIEW so.cyclic_translocation (cyclic_translocation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cyclic_translocation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cyclic_translocation'::text);

CREATE VIEW so.cysteine (cysteine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cysteine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cysteine'::text);

CREATE VIEW so.cysteine_trna_primary_transcript (cysteine_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cysteine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text);

CREATE VIEW so.cysteinyl_trna (cysteinyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cysteinyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cysteinyl_tRNA'::text);

CREATE VIEW so.cytoplasmic_polypeptide_region (cytoplasmic_polypeptide_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS cytoplasmic_polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text);

CREATE VIEW so.d_cluster (d_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS d_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_cluster'::text);

CREATE VIEW so.d_dj_c_cluster (d_dj_c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS d_dj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_DJ_C_cluster'::text);

CREATE VIEW so.d_dj_cluster (d_dj_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS d_dj_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_DJ_cluster'::text);

CREATE VIEW so.d_dj_j_c_cluster (d_dj_j_c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS d_dj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text);

CREATE VIEW so.d_dj_j_cluster (d_dj_j_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS d_dj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_DJ_J_cluster'::text);

CREATE VIEW so.d_gene (d_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS d_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_gene'::text);

CREATE VIEW so.d_gene_recombination_feature (d_gene_recombination_feature_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS d_gene_recombination_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text));

CREATE VIEW so.d_interchr_transposition (d_interchr_transposition_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS d_interchr_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text);

CREATE VIEW so.d_intrachr_transposition (d_intrachr_transposition_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS d_intrachr_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text);

CREATE VIEW so.d_j_c_cluster (d_j_c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS d_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_J_C_cluster'::text);

CREATE VIEW so.d_j_cluster (d_j_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS d_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_J_cluster'::text);

CREATE VIEW so.d_loop (d_loop_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS d_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_loop'::text);

CREATE VIEW so.dart_marker (dart_marker_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dart_marker_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DArT_marker'::text);

CREATE VIEW so.databank_entry (databank_entry_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS databank_entry_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'databank_entry'::text);

CREATE VIEW so.dcaps_primer (dcaps_primer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dcaps_primer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dCAPS_primer'::text);

CREATE VIEW so.dce (dce_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dce_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DCE'::text);

CREATE VIEW so.dce_si (dce_si_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dce_si_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DCE_SI'::text);

CREATE VIEW so.dce_sii (dce_sii_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dce_sii_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DCE_SII'::text);

CREATE VIEW so.dce_siii (dce_siii_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dce_siii_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DCE_SIII'::text);

CREATE VIEW so.de_novo_variant (de_novo_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS de_novo_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'de_novo_variant'::text);

CREATE VIEW so.decayed_exon (decayed_exon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS decayed_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'decayed_exon'::text);

CREATE VIEW so.decreased_polyadenylation_variant (decreased_polyadenylation_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS decreased_polyadenylation_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text);

CREATE VIEW so.decreased_transcript_level_variant (decreased_transcript_level_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS decreased_transcript_level_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'decreased_transcript_level_variant'::text);

CREATE VIEW so.decreased_transcript_stability_variant (decreased_transcript_stability_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS decreased_transcript_stability_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'decreased_transcript_stability_variant'::text);

CREATE VIEW so.decreased_transcription_rate_variant (decreased_transcription_rate_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS decreased_transcription_rate_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text);

CREATE VIEW so.decreased_translational_product_level (decreased_translational_product_level_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS decreased_translational_product_level_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'decreased_translational_product_level'::text);

CREATE VIEW so.defective_conjugative_transposon (defective_conjugative_transposon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS defective_conjugative_transposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'defective_conjugative_transposon'::text);

CREATE VIEW so.deficient_inversion (deficient_inversion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS deficient_inversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deficient_inversion'::text);

CREATE VIEW so.deficient_translocation (deficient_translocation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS deficient_translocation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deficient_translocation'::text);

CREATE VIEW so.deletion (deletion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS deletion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deletion'::text);

CREATE VIEW so.deletion_breakpoint (deletion_breakpoint_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS deletion_breakpoint_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deletion_breakpoint'::text);

CREATE VIEW so.deletion_junction (deletion_junction_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS deletion_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deletion_junction'::text);

CREATE VIEW so.designed_sequence (designed_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS designed_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'designed_sequence'::text);

CREATE VIEW so.dexstrosynaptic_chromosome (dexstrosynaptic_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dexstrosynaptic_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text);

CREATE VIEW so.dhu_loop (dhu_loop_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dhu_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DHU_loop'::text);

CREATE VIEW so.dicistronic (dicistronic_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dicistronic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dicistronic'::text);

CREATE VIEW so.dicistronic_mrna (dicistronic_mrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dicistronic_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dicistronic_mRNA'::text);

CREATE VIEW so.dicistronic_primary_transcript (dicistronic_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dicistronic_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dicistronic_primary_transcript'::text);

CREATE VIEW so.dicistronic_transcript (dicistronic_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dicistronic_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_transcript'::text));

CREATE VIEW so.dif_site (dif_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dif_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dif_site'::text);

CREATE VIEW so.dihydrouridine (dihydrouridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dihydrouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dihydrouridine'::text);

CREATE VIEW so.dinucleotide_repeat_microsatellite_feature (dinucleotide_repeat_microsatellite_feature_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dinucleotide_repeat_microsatellite_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text);

CREATE VIEW so.diplotype (diplotype_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS diplotype_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'diplotype'::text);

CREATE VIEW so.direct (direct_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS direct_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'direct'::text);

CREATE VIEW so.direct_repeat (direct_repeat_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS direct_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'target_site_duplication'::text) OR ((cvterm.name)::text = 'CRISPR'::text)) OR ((cvterm.name)::text = 'direct_repeat'::text));

CREATE VIEW so.direct_tandem_duplication (direct_tandem_duplication_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS direct_tandem_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'direct_tandem_duplication'::text);

CREATE VIEW so.direction_attribute (direction_attribute_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS direction_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'forward'::text) OR ((cvterm.name)::text = 'reverse'::text)) OR ((cvterm.name)::text = 'direction_attribute'::text));

CREATE VIEW so.disease_associated_variant (disease_associated_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS disease_associated_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'disease_associated_variant'::text);

CREATE VIEW so.disease_causing_variant (disease_causing_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS disease_causing_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'disease_causing_variant'::text);

CREATE VIEW so.dispersed_repeat (dispersed_repeat_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dispersed_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dispersed_repeat'::text);

CREATE VIEW so.distal_promoter_element (distal_promoter_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS distal_promoter_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'distal_promoter_element'::text);

CREATE VIEW so.distant_three_prime_recoding_signal (distant_three_prime_recoding_signal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS distant_three_prime_recoding_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text);

CREATE VIEW so.dj_c_cluster (dj_c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DJ_C_cluster'::text);

CREATE VIEW so.dj_gene (dj_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dj_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DJ_gene'::text);

CREATE VIEW so.dj_j_c_cluster (dj_j_c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DJ_J_C_cluster'::text);

CREATE VIEW so.dj_j_cluster (dj_j_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DJ_J_cluster'::text);

CREATE VIEW so.dmv1_motif (dmv1_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dmv1_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DMv1_motif'::text);

CREATE VIEW so.dmv2_motif (dmv2_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dmv2_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DMv2_motif'::text);

CREATE VIEW so.dmv3_motif (dmv3_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dmv3_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DMv3_motif'::text);

CREATE VIEW so.dmv4_motif (dmv4_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dmv4_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DMv4_motif'::text);

CREATE VIEW so.dmv5_motif (dmv5_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dmv5_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DMv5_motif'::text);

CREATE VIEW so.dna (dna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'cDNA'::text) OR ((cvterm.name)::text = 'genomic_DNA'::text)) OR ((cvterm.name)::text = 'single_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'double_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'DNA'::text));

CREATE VIEW so.dna_aptamer (dna_aptamer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dna_aptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DNA_aptamer'::text);

CREATE VIEW so.dna_binding_site (dna_binding_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dna_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'polypeptide_DNA_contact'::text) OR ((cvterm.name)::text = 'DNA_binding_site'::text));

CREATE VIEW so.dna_chromosome (dna_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'DNA_chromosome'::text));

CREATE VIEW so.dna_constraint_sequence (dna_constraint_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dna_constraint_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DNA_constraint_sequence'::text);

CREATE VIEW so.dna_motif (dna_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dna_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'PSE_motif'::text) OR ((cvterm.name)::text = 'CAAT_signal'::text)) OR ((cvterm.name)::text = 'minus_10_signal'::text)) OR ((cvterm.name)::text = 'minus_35_signal'::text)) OR ((cvterm.name)::text = 'DRE_motif'::text)) OR ((cvterm.name)::text = 'E_box_motif'::text)) OR ((cvterm.name)::text = 'INR1_motif'::text)) OR ((cvterm.name)::text = 'GAGA_motif'::text)) OR ((cvterm.name)::text = 'octamer_motif'::text)) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text)) OR ((cvterm.name)::text = 'DCE_SI'::text)) OR ((cvterm.name)::text = 'DCE_SII'::text)) OR ((cvterm.name)::text = 'DCE_SIII'::text)) OR ((cvterm.name)::text = 'minus_12_signal'::text)) OR ((cvterm.name)::text = 'minus_24_signal'::text)) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text)) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'DNA_motif'::text));

CREATE VIEW so.dna_sequence_secondary_structure (dna_sequence_secondary_structure_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dna_sequence_secondary_structure_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'i_motif'::text) OR ((cvterm.name)::text = 'DNA_sequence_secondary_structure'::text));

CREATE VIEW so.dna_transposon (dna_transposon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dna_transposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((cvterm.name)::text = 'terminal_inverted_repeat_element'::text) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'DNA_transposon'::text));

CREATE VIEW so.dnasei_hypersensitive_site (dnasei_hypersensitive_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dnasei_hypersensitive_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text);

CREATE VIEW so.dnazyme (dnazyme_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dnazyme_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DNAzyme'::text);

CREATE VIEW so."double" (double_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS double_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'double'::text);

CREATE VIEW so.double_stranded_cdna (double_stranded_cdna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS double_stranded_cdna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'double_stranded_cDNA'::text);

CREATE VIEW so.double_stranded_dna_chromosome (double_stranded_dna_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS double_stranded_dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text));

CREATE VIEW so.double_stranded_rna_chromosome (double_stranded_rna_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS double_stranded_rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text));

CREATE VIEW so.downstream_gene_variant (downstream_gene_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS downstream_gene_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = '5KB_downstream_variant'::text) OR ((cvterm.name)::text = '500B_downstream_variant'::text)) OR ((cvterm.name)::text = 'downstream_gene_variant'::text));

CREATE VIEW so.dpe1_motif (dpe1_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dpe1_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DPE1_motif'::text);

CREATE VIEW so.dpe_motif (dpe_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dpe_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DPE_motif'::text);

CREATE VIEW so.dre_motif (dre_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dre_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DRE_motif'::text);

CREATE VIEW so.ds_dna_viral_sequence (ds_dna_viral_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ds_dna_viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text);

CREATE VIEW so.ds_oligo (ds_oligo_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ds_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'RNAi_reagent'::text) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text)) OR ((cvterm.name)::text = 'ds_oligo'::text));

CREATE VIEW so.ds_rna_viral_sequence (ds_rna_viral_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ds_rna_viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text);

CREATE VIEW so.dsra_rna (dsra_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dsra_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'GcvB_RNA'::text) OR ((cvterm.name)::text = 'DsrA_RNA'::text));

CREATE VIEW so.duplicated_pseudogene (duplicated_pseudogene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS duplicated_pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'duplicated_pseudogene'::text);

CREATE VIEW so.duplication (duplication_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'tandem_duplication'::text) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'duplication'::text));

CREATE VIEW so.duplication_attribute (duplication_attribute_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS duplication_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'free'::text) OR ((cvterm.name)::text = 'duplication_attribute'::text));

CREATE VIEW so.dye_terminator_read (dye_terminator_read_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS dye_terminator_read_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dye_terminator_read'::text);

CREATE VIEW so.e_box_motif (e_box_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS e_box_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'E_box_motif'::text);

CREATE VIEW so.edited (edited_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS edited_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'edited'::text);

CREATE VIEW so.edited_cds (edited_cds_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS edited_cds_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'edited_CDS'::text);

CREATE VIEW so.edited_mrna (edited_mrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS edited_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'edited_mRNA'::text);

CREATE VIEW so.edited_transcript (edited_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS edited_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'edited_transcript'::text));

CREATE VIEW so.edited_transcript_by_a_to_i_substitution (edited_transcript_by_a_to_i_substitution_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS edited_transcript_by_a_to_i_substitution_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text);

CREATE VIEW so.edited_transcript_feature (edited_transcript_feature_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS edited_transcript_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'pre_edited_region'::text) OR ((cvterm.name)::text = 'editing_block'::text)) OR ((cvterm.name)::text = 'editing_domain'::text)) OR ((cvterm.name)::text = 'unedited_region'::text)) OR ((cvterm.name)::text = 'edited_transcript_feature'::text));

CREATE VIEW so.editing_block (editing_block_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS editing_block_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'editing_block'::text);

CREATE VIEW so.editing_domain (editing_domain_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS editing_domain_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'editing_domain'::text);

CREATE VIEW so.editing_variant (editing_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS editing_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'editing_variant'::text);

CREATE VIEW so.elongated_in_frame_polypeptide_c_terminal (elongated_in_frame_polypeptide_c_terminal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS elongated_in_frame_polypeptide_c_terminal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text);

CREATE VIEW so.elongated_in_frame_polypeptide_n_terminal_elongation (elongated_in_frame_polypeptide_n_terminal_elongation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS elongated_in_frame_polypeptide_n_terminal_elongation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text);

CREATE VIEW so.elongated_out_of_frame_polypeptide_c_terminal (elongated_out_of_frame_polypeptide_c_terminal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS elongated_out_of_frame_polypeptide_c_terminal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text);

CREATE VIEW so.elongated_out_of_frame_polypeptide_n_terminal (elongated_out_of_frame_polypeptide_n_terminal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS elongated_out_of_frame_polypeptide_n_terminal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text);

CREATE VIEW so.elongated_polypeptide (elongated_polypeptide_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS elongated_polypeptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide'::text));

CREATE VIEW so.elongated_polypeptide_c_terminal (elongated_polypeptide_c_terminal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS elongated_polypeptide_c_terminal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text));

CREATE VIEW so.elongated_polypeptide_n_terminal (elongated_polypeptide_n_terminal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS elongated_polypeptide_n_terminal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text));

CREATE VIEW so.encodes_1_polypeptide (encodes_1_polypeptide_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS encodes_1_polypeptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'encodes_1_polypeptide'::text);

CREATE VIEW so.encodes_alternate_transcription_start_sites (encodes_alternate_transcription_start_sites_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS encodes_alternate_transcription_start_sites_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'encodes_alternate_transcription_start_sites'::text);

CREATE VIEW so.encodes_alternately_spliced_transcripts (encodes_alternately_spliced_transcripts_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS encodes_alternately_spliced_transcripts_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'encodes_1_polypeptide'::text) OR ((cvterm.name)::text = 'encodes_greater_than_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text)) OR ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text)) OR ((cvterm.name)::text = 'encodes_alternately_spliced_transcripts'::text));

CREATE VIEW so.encodes_different_polypeptides_different_stop (encodes_different_polypeptides_different_stop_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS encodes_different_polypeptides_different_stop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text);

CREATE VIEW so.encodes_disjoint_polypeptides (encodes_disjoint_polypeptides_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS encodes_disjoint_polypeptides_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text);

CREATE VIEW so.encodes_greater_than_1_polypeptide (encodes_greater_than_1_polypeptide_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS encodes_greater_than_1_polypeptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text)) OR ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text)) OR ((cvterm.name)::text = 'encodes_greater_than_1_polypeptide'::text));

CREATE VIEW so.encodes_overlapping_peptides (encodes_overlapping_peptides_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS encodes_overlapping_peptides_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text));

CREATE VIEW so.encodes_overlapping_peptides_different_start (encodes_overlapping_peptides_different_start_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS encodes_overlapping_peptides_different_start_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text);

CREATE VIEW so.encodes_overlapping_polypeptides_different_start_and_stop (encodes_overlapping_polypeptides_different_start_and_stop_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS encodes_overlapping_polypeptides_different_start_and_stop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text);

CREATE VIEW so.endogenous_retroviral_gene (endogenous_retroviral_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS endogenous_retroviral_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'endogenous_retroviral_gene'::text);

CREATE VIEW so.endogenous_retroviral_sequence (endogenous_retroviral_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS endogenous_retroviral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'endogenous_retroviral_sequence'::text);

CREATE VIEW so.endonuclease_spliced_intron (endonuclease_spliced_intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS endonuclease_spliced_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'archaeal_intron'::text) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text));

CREATE VIEW so.endosomal_localization_signal (endosomal_localization_signal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS endosomal_localization_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'endosomal_localization_signal'::text);

CREATE VIEW so.engineered (engineered_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS engineered_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered'::text);

CREATE VIEW so.engineered_episome (engineered_episome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS engineered_episome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_episome'::text);

CREATE VIEW so.engineered_foreign_gene (engineered_foreign_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS engineered_foreign_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text));

CREATE VIEW so.engineered_foreign_region (engineered_foreign_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS engineered_foreign_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_region'::text));

CREATE VIEW so.engineered_foreign_repetitive_element (engineered_foreign_repetitive_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS engineered_foreign_repetitive_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text);

CREATE VIEW so.engineered_foreign_transposable_element (engineered_foreign_transposable_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS engineered_foreign_transposable_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text);

CREATE VIEW so.engineered_foreign_transposable_element_gene (engineered_foreign_transposable_element_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS engineered_foreign_transposable_element_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text);

CREATE VIEW so.engineered_fusion_gene (engineered_fusion_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS engineered_fusion_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_fusion_gene'::text);

CREATE VIEW so.engineered_gene (engineered_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS engineered_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text));

CREATE VIEW so.engineered_insert (engineered_insert_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS engineered_insert_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_insert'::text);

CREATE VIEW so.engineered_plasmid (engineered_plasmid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS engineered_plasmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text));

CREATE VIEW so.engineered_region (engineered_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS engineered_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((cvterm.name)::text = 'engineered_gene'::text) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_region'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_region'::text));

CREATE VIEW so.engineered_rescue_region (engineered_rescue_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS engineered_rescue_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_rescue_region'::text);

CREATE VIEW so.engineered_tag (engineered_tag_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS engineered_tag_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_tag'::text);

CREATE VIEW so.engineered_transposable_element (engineered_transposable_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS engineered_transposable_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_transposable_element'::text));

CREATE VIEW so.enhancer (enhancer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS enhancer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'enhancer_bound_by_factor'::text) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'enhancer'::text));

CREATE VIEW so.enhancer_binding_site (enhancer_binding_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS enhancer_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'enhancer_binding_site'::text);

CREATE VIEW so.enhancer_bound_by_factor (enhancer_bound_by_factor_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS enhancer_bound_by_factor_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'enhancer_bound_by_factor'::text);

CREATE VIEW so.enhancer_trap_construct (enhancer_trap_construct_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS enhancer_trap_construct_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'enhancer_trap_construct'::text);

CREATE VIEW so.enzymatic (enzymatic_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS enzymatic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'ribozymic'::text) OR ((cvterm.name)::text = 'enzymatic'::text));

CREATE VIEW so.enzymatic_rna (enzymatic_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS enzymatic_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'ribozyme'::text) OR ((cvterm.name)::text = 'enzymatic_RNA'::text));

CREATE VIEW so.epigenetically_modified (epigenetically_modified_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS epigenetically_modified_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'imprinted'::text) OR ((cvterm.name)::text = 'allelically_excluded'::text)) OR ((cvterm.name)::text = 'rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'epigenetically_modified'::text));

CREATE VIEW so.epigenetically_modified_gene (epigenetically_modified_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS epigenetically_modified_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text));

CREATE VIEW so.epigenetically_modified_region (epigenetically_modified_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS epigenetically_modified_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'modified_base'::text) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'methylated_base_feature'::text)) OR ((cvterm.name)::text = 'methylated_C'::text)) OR ((cvterm.name)::text = 'methylated_A'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_region'::text));

CREATE VIEW so.episome (episome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS episome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'episome'::text));

CREATE VIEW so.epitope (epitope_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS epitope_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'epitope'::text);

CREATE VIEW so.epoxyqueuosine (epoxyqueuosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS epoxyqueuosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'epoxyqueuosine'::text);

CREATE VIEW so.est (est_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS est_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((cvterm.name)::text = 'five_prime_EST'::text) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'EST'::text));

CREATE VIEW so.est_match (est_match_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS est_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'EST_match'::text);

CREATE VIEW so.eukaryotic_terminator (eukaryotic_terminator_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS eukaryotic_terminator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text));

CREATE VIEW so.exemplar (exemplar_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS exemplar_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'exemplar'::text);

CREATE VIEW so.exemplar_mrna (exemplar_mrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS exemplar_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'exemplar_mRNA'::text);

CREATE VIEW so.exon (exon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((cvterm.name)::text = 'coding_exon'::text) OR ((cvterm.name)::text = 'noncoding_exon'::text)) OR ((cvterm.name)::text = 'interior_exon'::text)) OR ((cvterm.name)::text = 'exon_of_single_exon_gene'::text)) OR ((cvterm.name)::text = 'interior_coding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'exon'::text));

CREATE VIEW so.exon_junction (exon_junction_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS exon_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'exon_junction'::text);

CREATE VIEW so.exon_loss (exon_loss_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS exon_loss_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'exon_loss'::text);

CREATE VIEW so.exon_of_single_exon_gene (exon_of_single_exon_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS exon_of_single_exon_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'exon_of_single_exon_gene'::text);

CREATE VIEW so.exon_region (exon_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS exon_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'noncoding_region_of_exon'::text) OR ((cvterm.name)::text = 'coding_region_of_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'exon_region'::text));

CREATE VIEW so.exon_variant (exon_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS exon_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((cvterm.name)::text = 'coding_sequence_variant'::text) OR ((cvterm.name)::text = 'non_coding_exon_variant'::text)) OR ((cvterm.name)::text = 'codon_variant'::text)) OR ((cvterm.name)::text = 'frameshift_variant'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text)) OR ((cvterm.name)::text = 'initiator_codon_change'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'frame_restoring_variant'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'inframe_codon_gain'::text)) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = 'exon_variant'::text));

CREATE VIEW so.exonic_splice_enhancer (exonic_splice_enhancer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS exonic_splice_enhancer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'exonic_splice_enhancer'::text);

CREATE VIEW so.experimental_feature (experimental_feature_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS experimental_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'match_part'::text) OR ((cvterm.name)::text = 'assembly_component'::text)) OR ((cvterm.name)::text = 'conserved_region'::text)) OR ((cvterm.name)::text = 'match'::text)) OR ((cvterm.name)::text = 'remark'::text)) OR ((cvterm.name)::text = 'reading_frame'::text)) OR ((cvterm.name)::text = 'consensus_region'::text)) OR ((cvterm.name)::text = 'low_complexity_region'::text)) OR ((cvterm.name)::text = 'assembly'::text)) OR ((cvterm.name)::text = 'transcribed_fragment'::text)) OR ((cvterm.name)::text = 'transcribed_cluster'::text)) OR ((cvterm.name)::text = 'high_identity_region'::text)) OR ((cvterm.name)::text = 'mathematically_defined_repeat'::text)) OR ((cvterm.name)::text = 'experimentally_defined_binding_region'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'read'::text)) OR ((cvterm.name)::text = 'restriction_fragment'::text)) OR ((cvterm.name)::text = 'golden_path_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_fragment'::text)) OR ((cvterm.name)::text = 'gap'::text)) OR ((cvterm.name)::text = 'sonicate_fragment'::text)) OR ((cvterm.name)::text = 'paired_end_fragment'::text)) OR ((cvterm.name)::text = 'read_pair'::text)) OR ((cvterm.name)::text = 'contig_read'::text)) OR ((cvterm.name)::text = 'BAC_end'::text)) OR ((cvterm.name)::text = 'dye_terminator_read'::text)) OR ((cvterm.name)::text = 'pyrosequenced_read'::text)) OR ((cvterm.name)::text = 'ligation_based_read'::text)) OR ((cvterm.name)::text = 'polymerase_synthesis_read'::text)) OR ((cvterm.name)::text = 'PAC_end'::text)) OR ((cvterm.name)::text = 'YAC_end'::text)) OR ((cvterm.name)::text = 'clone_end'::text)) OR ((cvterm.name)::text = 'RFLP_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'coding_conserved_region'::text)) OR ((cvterm.name)::text = 'nc_conserved_region'::text)) OR ((cvterm.name)::text = 'RR_tract'::text)) OR ((cvterm.name)::text = 'homologous_region'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_I'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_II'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_III'::text)) OR ((cvterm.name)::text = 'X_element'::text)) OR ((cvterm.name)::text = 'U_box'::text)) OR ((cvterm.name)::text = 'regional_centromere_central_core'::text)) OR ((cvterm.name)::text = 'syntenic_region'::text)) OR ((cvterm.name)::text = 'paralogous_region'::text)) OR ((cvterm.name)::text = 'orthologous_region'::text)) OR ((cvterm.name)::text = 'nucleotide_match'::text)) OR ((cvterm.name)::text = 'protein_match'::text)) OR ((cvterm.name)::text = 'expressed_sequence_match'::text)) OR ((cvterm.name)::text = 'cross_genome_match'::text)) OR ((cvterm.name)::text = 'translated_nucleotide_match'::text)) OR ((cvterm.name)::text = 'primer_match'::text)) OR ((cvterm.name)::text = 'EST_match'::text)) OR ((cvterm.name)::text = 'cDNA_match'::text)) OR ((cvterm.name)::text = 'UST_match'::text)) OR ((cvterm.name)::text = 'RST_match'::text)) OR ((cvterm.name)::text = 'sequence_difference'::text)) OR ((cvterm.name)::text = 'experimental_result_region'::text)) OR ((cvterm.name)::text = 'polypeptide_sequencing_information'::text)) OR ((cvterm.name)::text = 'possible_base_call_error'::text)) OR ((cvterm.name)::text = 'possible_assembly_error'::text)) OR ((cvterm.name)::text = 'assembly_error_correction'::text)) OR ((cvterm.name)::text = 'base_call_error_correction'::text)) OR ((cvterm.name)::text = 'overlapping_feature_set'::text)) OR ((cvterm.name)::text = 'no_output'::text)) OR ((cvterm.name)::text = 'overlapping_EST_set'::text)) OR ((cvterm.name)::text = 'non_adjacent_residues'::text)) OR ((cvterm.name)::text = 'non_terminal_residue'::text)) OR ((cvterm.name)::text = 'sequence_conflict'::text)) OR ((cvterm.name)::text = 'sequence_uncertainty'::text)) OR ((cvterm.name)::text = 'contig_collection'::text)) OR ((cvterm.name)::text = 'ORF'::text)) OR ((cvterm.name)::text = 'blocked_reading_frame'::text)) OR ((cvterm.name)::text = 'mini_gene'::text)) OR ((cvterm.name)::text = 'rescue_mini_gene'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'sequence_assembly'::text)) OR ((cvterm.name)::text = 'fragment_assembly'::text)) OR ((cvterm.name)::text = 'supercontig'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'tiling_path'::text)) OR ((cvterm.name)::text = 'virtual_sequence'::text)) OR ((cvterm.name)::text = 'golden_path'::text)) OR ((cvterm.name)::text = 'ultracontig'::text)) OR ((cvterm.name)::text = 'expressed_sequence_assembly'::text)) OR ((cvterm.name)::text = 'fingerprint_map'::text)) OR ((cvterm.name)::text = 'STS_map'::text)) OR ((cvterm.name)::text = 'RH_map'::text)) OR ((cvterm.name)::text = 'unigene_cluster'::text)) OR ((cvterm.name)::text = 'CHiP_seq_region'::text)) OR ((cvterm.name)::text = 'experimental_feature'::text));

CREATE VIEW so.experimental_feature_attribute (experimental_feature_attribute_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS experimental_feature_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'score'::text) OR ((cvterm.name)::text = 'quality_value'::text)) OR ((cvterm.name)::text = 'experimental_feature_attribute'::text));

CREATE VIEW so.experimental_result_region (experimental_result_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS experimental_result_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'overlapping_feature_set'::text) OR ((cvterm.name)::text = 'no_output'::text)) OR ((cvterm.name)::text = 'overlapping_EST_set'::text)) OR ((cvterm.name)::text = 'experimental_result_region'::text));

CREATE VIEW so.experimentally_defined_binding_region (experimentally_defined_binding_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS experimentally_defined_binding_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'CHiP_seq_region'::text) OR ((cvterm.name)::text = 'experimentally_defined_binding_region'::text));

CREATE VIEW so.experimentally_determined (experimentally_determined_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS experimentally_determined_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'experimentally_determined'::text);

CREATE VIEW so.expressed_sequence_assembly (expressed_sequence_assembly_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS expressed_sequence_assembly_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'expressed_sequence_assembly'::text);

CREATE VIEW so.expressed_sequence_match (expressed_sequence_match_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS expressed_sequence_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'EST_match'::text) OR ((cvterm.name)::text = 'cDNA_match'::text)) OR ((cvterm.name)::text = 'UST_match'::text)) OR ((cvterm.name)::text = 'RST_match'::text)) OR ((cvterm.name)::text = 'expressed_sequence_match'::text));

CREATE VIEW so.external_transcribed_spacer_region (external_transcribed_spacer_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS external_transcribed_spacer_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'external_transcribed_spacer_region'::text);

CREATE VIEW so.extrachromosomal_mobile_genetic_element (extrachromosomal_mobile_genetic_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS extrachromosomal_mobile_genetic_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'natural_transposable_element'::text) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'extrachromosomal_mobile_genetic_element'::text));

CREATE VIEW so.extramembrane_polypeptide_region (extramembrane_polypeptide_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS extramembrane_polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text));

CREATE VIEW so.feature_attribute (feature_attribute_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS feature_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'transcript_attribute'::text) OR ((cvterm.name)::text = 'bound_by_factor'::text)) OR ((cvterm.name)::text = 'flanked'::text)) OR ((cvterm.name)::text = 'gene_attribute'::text)) OR ((cvterm.name)::text = 'retrotransposed'::text)) OR ((cvterm.name)::text = 'transgenic'::text)) OR ((cvterm.name)::text = 'natural'::text)) OR ((cvterm.name)::text = 'engineered'::text)) OR ((cvterm.name)::text = 'foreign'::text)) OR ((cvterm.name)::text = 'fusion'::text)) OR ((cvterm.name)::text = 'rescue'::text)) OR ((cvterm.name)::text = 'wild_type'::text)) OR ((cvterm.name)::text = 'conserved'::text)) OR ((cvterm.name)::text = 'status'::text)) OR ((cvterm.name)::text = 'intermediate'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged'::text)) OR ((cvterm.name)::text = 'cryptic'::text)) OR ((cvterm.name)::text = 'strand_attribute'::text)) OR ((cvterm.name)::text = 'direction_attribute'::text)) OR ((cvterm.name)::text = 'enzymatic'::text)) OR ((cvterm.name)::text = 'mobile'::text)) OR ((cvterm.name)::text = 'alteration_attribute'::text)) OR ((cvterm.name)::text = 'experimental_feature_attribute'::text)) OR ((cvterm.name)::text = 'edited'::text)) OR ((cvterm.name)::text = 'capped'::text)) OR ((cvterm.name)::text = 'mRNA_attribute'::text)) OR ((cvterm.name)::text = 'trans_spliced'::text)) OR ((cvterm.name)::text = 'alternatively_spliced'::text)) OR ((cvterm.name)::text = 'monocistronic'::text)) OR ((cvterm.name)::text = 'polycistronic'::text)) OR ((cvterm.name)::text = 'polyadenylated'::text)) OR ((cvterm.name)::text = 'exemplar'::text)) OR ((cvterm.name)::text = 'frameshift'::text)) OR ((cvterm.name)::text = 'recoded'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_framshift'::text)) OR ((cvterm.name)::text = 'codon_redefined'::text)) OR ((cvterm.name)::text = 'recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'dicistronic'::text)) OR ((cvterm.name)::text = 'bound_by_protein'::text)) OR ((cvterm.name)::text = 'bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'floxed'::text)) OR ((cvterm.name)::text = 'FRT_flanked'::text)) OR ((cvterm.name)::text = 'protein_coding'::text)) OR ((cvterm.name)::text = 'non_protein_coding'::text)) OR ((cvterm.name)::text = 'gene_to_gene_feature'::text)) OR ((cvterm.name)::text = 'gene_array_member'::text)) OR ((cvterm.name)::text = 'regulated'::text)) OR ((cvterm.name)::text = 'epigenetically_modified'::text)) OR ((cvterm.name)::text = 'encodes_alternately_spliced_transcripts'::text)) OR ((cvterm.name)::text = 'encodes_alternate_transcription_start_sites'::text)) OR ((cvterm.name)::text = 'intein_containing'::text)) OR ((cvterm.name)::text = 'miRNA_encoding'::text)) OR ((cvterm.name)::text = 'rRNA_encoding'::text)) OR ((cvterm.name)::text = 'scRNA_encoding'::text)) OR ((cvterm.name)::text = 'snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'snRNA_encoding'::text)) OR ((cvterm.name)::text = 'SRP_RNA_encoding'::text)) OR ((cvterm.name)::text = 'stRNA_encoding'::text)) OR ((cvterm.name)::text = 'tmRNA_encoding'::text)) OR ((cvterm.name)::text = 'tRNA_encoding'::text)) OR ((cvterm.name)::text = 'gRNA_encoding'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'overlapping'::text)) OR ((cvterm.name)::text = 'inside_intron'::text)) OR ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'antisense'::text)) OR ((cvterm.name)::text = 'inside_intron_antiparallel'::text)) OR ((cvterm.name)::text = 'inside_intron_parallel'::text)) OR ((cvterm.name)::text = 'operon_member'::text)) OR ((cvterm.name)::text = 'gene_cassette_member'::text)) OR ((cvterm.name)::text = 'gene_subarray_member'::text)) OR ((cvterm.name)::text = 'member_of_regulon'::text)) OR ((cvterm.name)::text = 'cassette_array_member'::text)) OR ((cvterm.name)::text = 'transcriptionally_regulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated'::text)) OR ((cvterm.name)::text = 'translationally_regulated'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'transcriptionally_constitutive'::text)) OR ((cvterm.name)::text = 'transcriptionally_induced'::text)) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text)) OR ((cvterm.name)::text = 'autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'silenced'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'allelically_excluded'::text)) OR ((cvterm.name)::text = 'rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'encodes_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_greater_than_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text)) OR ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text)) OR ((cvterm.name)::text = 'homologous'::text)) OR ((cvterm.name)::text = 'syntenic'::text)) OR ((cvterm.name)::text = 'orthologous'::text)) OR ((cvterm.name)::text = 'paralogous'::text)) OR ((cvterm.name)::text = 'fragmentary'::text)) OR ((cvterm.name)::text = 'predicted'::text)) OR ((cvterm.name)::text = 'validated'::text)) OR ((cvterm.name)::text = 'invalidated'::text)) OR ((cvterm.name)::text = 'independently_known'::text)) OR ((cvterm.name)::text = 'consensus'::text)) OR ((cvterm.name)::text = 'low_complexity'::text)) OR ((cvterm.name)::text = 'whole_genome_sequence_status'::text)) OR ((cvterm.name)::text = 'supported_by_sequence_similarity'::text)) OR ((cvterm.name)::text = 'orphan'::text)) OR ((cvterm.name)::text = 'predicted_by_ab_initio_computation'::text)) OR ((cvterm.name)::text = 'supported_by_domain_match'::text)) OR ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text)) OR ((cvterm.name)::text = 'experimentally_determined'::text)) OR ((cvterm.name)::text = 'invalidated_by_chimeric_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_contamination'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_polyA_primed_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_partial_processing'::text)) OR ((cvterm.name)::text = 'standard_draft'::text)) OR ((cvterm.name)::text = 'high_quality_draft'::text)) OR ((cvterm.name)::text = 'improved_high_quality_draft'::text)) OR ((cvterm.name)::text = 'annotation_directed_improved_draft'::text)) OR ((cvterm.name)::text = 'noncontiguous_finished'::text)) OR ((cvterm.name)::text = 'finished_genome'::text)) OR ((cvterm.name)::text = 'single'::text)) OR ((cvterm.name)::text = 'double'::text)) OR ((cvterm.name)::text = 'forward'::text)) OR ((cvterm.name)::text = 'reverse'::text)) OR ((cvterm.name)::text = 'ribozymic'::text)) OR ((cvterm.name)::text = 'chromosomal_variation_attribute'::text)) OR ((cvterm.name)::text = 'insertion_attribute'::text)) OR ((cvterm.name)::text = 'inversion_attribute'::text)) OR ((cvterm.name)::text = 'translocaton_attribute'::text)) OR ((cvterm.name)::text = 'duplication_attribute'::text)) OR ((cvterm.name)::text = 'intrachromosomal'::text)) OR ((cvterm.name)::text = 'interchromosomal'::text)) OR ((cvterm.name)::text = 'tandem'::text)) OR ((cvterm.name)::text = 'direct'::text)) OR ((cvterm.name)::text = 'inverted'::text)) OR ((cvterm.name)::text = 'pericentric'::text)) OR ((cvterm.name)::text = 'paracentric'::text)) OR ((cvterm.name)::text = 'reciprocal'::text)) OR ((cvterm.name)::text = 'insertional'::text)) OR ((cvterm.name)::text = 'free'::text)) OR ((cvterm.name)::text = 'score'::text)) OR ((cvterm.name)::text = 'quality_value'::text)) OR ((cvterm.name)::text = 'feature_attribute'::text));

CREATE VIEW so.fingerprint_map (fingerprint_map_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS fingerprint_map_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'fingerprint_map'::text);

CREATE VIEW so.finished_genome (finished_genome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS finished_genome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'finished_genome'::text);

CREATE VIEW so.five_aminomethyl_two_thiouridine (five_aminomethyl_two_thiouridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_aminomethyl_two_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text);

CREATE VIEW so.five_carbamoylmethyluridine (five_carbamoylmethyluridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_carbamoylmethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text);

CREATE VIEW so.five_carboxyhydroxymethyl_uridine (five_carboxyhydroxymethyl_uridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_carboxyhydroxymethyl_uridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text);

CREATE VIEW so.five_carboxyhydroxymethyl_uridine_methyl_ester (five_carboxyhydroxymethyl_uridine_methyl_ester_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_carboxyhydroxymethyl_uridine_methyl_ester_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text);

CREATE VIEW so.five_carboxymethylaminomethyl_two_prime_o_methyluridine (five_carboxymethylaminomethyl_two_prime_o_methyluridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_carboxymethylaminomethyl_two_prime_o_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text);

CREATE VIEW so.five_carboxymethylaminomethyl_two_thiouridine (five_carboxymethylaminomethyl_two_thiouridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_carboxymethylaminomethyl_two_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text);

CREATE VIEW so.five_carboxymethylaminomethyluridine (five_carboxymethylaminomethyluridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_carboxymethylaminomethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text);

CREATE VIEW so.five_carboxymethyluridine (five_carboxymethyluridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_carboxymethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carboxymethyluridine'::text);

CREATE VIEW so.five_cm_2_prime_o_methu (five_cm_2_prime_o_methu_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_cm_2_prime_o_methu_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text);

CREATE VIEW so.five_formyl_two_prime_o_methylcytidine (five_formyl_two_prime_o_methylcytidine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_formyl_two_prime_o_methylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text);

CREATE VIEW so.five_formylcytidine (five_formylcytidine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_formylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_formylcytidine'::text);

CREATE VIEW so.five_hydroxymethylcytidine (five_hydroxymethylcytidine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_hydroxymethylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text);

CREATE VIEW so.five_hydroxyuridine (five_hydroxyuridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_hydroxyuridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_hydroxyuridine'::text);

CREATE VIEW so.five_isopentenylaminomethyl_two_prime_o_methyluridine (five_isopentenylaminomethyl_two_prime_o_methyluridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_isopentenylaminomethyl_two_prime_o_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text);

CREATE VIEW so.five_isopentenylaminomethyl_two_thiouridine (five_isopentenylaminomethyl_two_thiouridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_isopentenylaminomethyl_two_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text);

CREATE VIEW so.five_isopentenylaminomethyl_uridine (five_isopentenylaminomethyl_uridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_isopentenylaminomethyl_uridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text);

CREATE VIEW so.five_mam_2_thiouridine (five_mam_2_thiouridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_mam_2_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text);

CREATE VIEW so.five_mcm_2_thiouridine (five_mcm_2_thiouridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_mcm_2_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text);

CREATE VIEW so.five_methoxycarbonylmethyl_two_prime_o_methyluridine (five_methoxycarbonylmethyl_two_prime_o_methyluridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_methoxycarbonylmethyl_two_prime_o_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text);

CREATE VIEW so.five_methoxycarbonylmethyluridine (five_methoxycarbonylmethyluridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_methoxycarbonylmethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text);

CREATE VIEW so.five_methoxyuridine (five_methoxyuridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_methoxyuridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methoxyuridine'::text);

CREATE VIEW so.five_methyl_2_thiouridine (five_methyl_2_thiouridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_methyl_2_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text);

CREATE VIEW so.five_methylaminomethyl_two_selenouridine (five_methylaminomethyl_two_selenouridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_methylaminomethyl_two_selenouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text);

CREATE VIEW so.five_methylaminomethyluridine (five_methylaminomethyluridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_methylaminomethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methylaminomethyluridine'::text);

CREATE VIEW so.five_methylcytidine (five_methylcytidine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_methylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methylcytidine'::text);

CREATE VIEW so.five_methyldihydrouridine (five_methyldihydrouridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_methyldihydrouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methyldihydrouridine'::text);

CREATE VIEW so.five_methyluridine (five_methyluridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methyluridine'::text);

CREATE VIEW so.five_prime_cis_splice_site (five_prime_cis_splice_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_cis_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'canonical_five_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text));

CREATE VIEW so.five_prime_clip (five_prime_clip_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_clip_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_clip'::text);

CREATE VIEW so.five_prime_coding_exon (five_prime_coding_exon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_coding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_coding_exon'::text);

CREATE VIEW so.five_prime_coding_exon_coding_region (five_prime_coding_exon_coding_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_coding_exon_coding_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text);

CREATE VIEW so.five_prime_coding_exon_noncoding_region (five_prime_coding_exon_noncoding_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_coding_exon_noncoding_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text);

CREATE VIEW so.five_prime_d_heptamer (five_prime_d_heptamer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_d_heptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_D_heptamer'::text);

CREATE VIEW so.five_prime_d_nonamer (five_prime_d_nonamer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_d_nonamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_D_nonamer'::text);

CREATE VIEW so.five_prime_d_recombination_signal_sequence (five_prime_d_recombination_signal_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_d_recombination_signal_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text);

CREATE VIEW so.five_prime_d_spacer (five_prime_d_spacer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_d_spacer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_D_spacer'::text);

CREATE VIEW so.five_prime_est (five_prime_est_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_est_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_EST'::text);

CREATE VIEW so.five_prime_five_prime_overlap (five_prime_five_prime_overlap_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_five_prime_overlap_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text);

CREATE VIEW so.five_prime_flanking_region (five_prime_flanking_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_flanking_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_flanking_region'::text);

CREATE VIEW so.five_prime_intron (five_prime_intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_intron'::text);

CREATE VIEW so.five_prime_ltr (five_prime_ltr_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_ltr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_LTR'::text);

CREATE VIEW so.five_prime_ltr_component (five_prime_ltr_component_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_ltr_component_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'R_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text));

CREATE VIEW so.five_prime_noncoding_exon (five_prime_noncoding_exon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_noncoding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_noncoding_exon'::text);

CREATE VIEW so.five_prime_open_reading_frame (five_prime_open_reading_frame_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_open_reading_frame_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_open_reading_frame'::text);

CREATE VIEW so.five_prime_recoding_site (five_prime_recoding_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_recoding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_recoding_site'::text);

CREATE VIEW so.five_prime_restriction_enzyme_junction (five_prime_restriction_enzyme_junction_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_restriction_enzyme_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_restriction_enzyme_junction'::text);

CREATE VIEW so.five_prime_rst (five_prime_rst_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_rst_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_RST'::text);

CREATE VIEW so.five_prime_terminal_inverted_repeat (five_prime_terminal_inverted_repeat_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_terminal_inverted_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text);

CREATE VIEW so.five_prime_three_prime_overlap (five_prime_three_prime_overlap_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_three_prime_overlap_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text);

CREATE VIEW so.five_prime_ust (five_prime_ust_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_ust_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_UST'::text);

CREATE VIEW so.five_prime_utr (five_prime_utr_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_utr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_UTR'::text);

CREATE VIEW so.five_prime_utr_intron (five_prime_utr_intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_utr_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_UTR_intron'::text);

CREATE VIEW so.five_prime_utr_variant (five_prime_utr_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_prime_utr_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = '5_prime_UTR_variant'::text);

CREATE VIEW so.five_taurinomethyl_two_thiouridine (five_taurinomethyl_two_thiouridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_taurinomethyl_two_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text);

CREATE VIEW so.five_taurinomethyluridine (five_taurinomethyluridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_taurinomethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_taurinomethyluridine'::text);

CREATE VIEW so.five_two_prime_o_dimethylcytidine (five_two_prime_o_dimethylcytidine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_two_prime_o_dimethylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text);

CREATE VIEW so.five_two_prime_o_dimethyluridine (five_two_prime_o_dimethyluridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS five_two_prime_o_dimethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text);

CREATE VIEW so.fivehundred_b_downstream_variant (fivehundred_b_downstream_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS fivehundred_b_downstream_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = '500B_downstream_variant'::text);

CREATE VIEW so.fivekb_downstream_variant (fivekb_downstream_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS fivekb_downstream_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = '500B_downstream_variant'::text) OR ((cvterm.name)::text = '5KB_downstream_variant'::text));

CREATE VIEW so.fivekb_upstream_variant (fivekb_upstream_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS fivekb_upstream_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = '2KB_upstream_variant'::text) OR ((cvterm.name)::text = '5KB_upstream_variant'::text));

CREATE VIEW so.fixed_variant (fixed_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS fixed_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'fixed_variant'::text);

CREATE VIEW so.flanked (flanked_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS flanked_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'floxed'::text) OR ((cvterm.name)::text = 'FRT_flanked'::text)) OR ((cvterm.name)::text = 'flanked'::text));

CREATE VIEW so.flanking_region (flanking_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS flanking_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'transposable_element_flanking_region'::text) OR ((cvterm.name)::text = 'five_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'three_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'flanking_region'::text));

CREATE VIEW so.flanking_three_prime_quadruplet_recoding_signal (flanking_three_prime_quadruplet_recoding_signal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS flanking_three_prime_quadruplet_recoding_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text);

CREATE VIEW so.floxed (floxed_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS floxed_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'floxed'::text);

CREATE VIEW so.floxed_gene (floxed_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS floxed_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'floxed_gene'::text);

CREATE VIEW so.foldback_element (foldback_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS foldback_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'foldback_element'::text);

CREATE VIEW so.foreign_gene (foreign_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS foreign_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'foreign_gene'::text));

CREATE VIEW so.foreign_transposable_element (foreign_transposable_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS foreign_transposable_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'foreign_transposable_element'::text));

CREATE VIEW so."forward" (forward_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS forward_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'forward'::text);

CREATE VIEW so.forward_primer (forward_primer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS forward_primer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'forward_primer'::text);

CREATE VIEW so.fosmid (fosmid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS fosmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'fosmid'::text);

CREATE VIEW so.four_bp_start_codon (four_bp_start_codon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS four_bp_start_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'four_bp_start_codon'::text);

CREATE VIEW so.four_demethylwyosine (four_demethylwyosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS four_demethylwyosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'four_demethylwyosine'::text);

CREATE VIEW so.four_thiouridine (four_thiouridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS four_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'four_thiouridine'::text);

CREATE VIEW so.fragment_assembly (fragment_assembly_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS fragment_assembly_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'fingerprint_map'::text) OR ((cvterm.name)::text = 'STS_map'::text)) OR ((cvterm.name)::text = 'RH_map'::text)) OR ((cvterm.name)::text = 'fragment_assembly'::text));

CREATE VIEW so.fragmentary (fragmentary_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS fragmentary_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'fragmentary'::text);

CREATE VIEW so.frame_restoring_variant (frame_restoring_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS frame_restoring_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'frame_restoring_variant'::text);

CREATE VIEW so.frameshift (frameshift_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'minus_1_frameshift'::text) OR ((cvterm.name)::text = 'minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_framshift'::text)) OR ((cvterm.name)::text = 'frameshift'::text));

CREATE VIEW so.frameshift_variant (frameshift_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS frameshift_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'frame_restoring_variant'::text) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'frameshift_variant'::text));

CREATE VIEW so."free" (free_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS free_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'free'::text);

CREATE VIEW so.free_chromosome_arm (free_chromosome_arm_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS free_chromosome_arm_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'free_chromosome_arm'::text);

CREATE VIEW so.free_duplication (free_duplication_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS free_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'free_ring_duplication'::text) OR ((cvterm.name)::text = 'free_duplication'::text));

CREATE VIEW so.free_ring_duplication (free_ring_duplication_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS free_ring_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'free_ring_duplication'::text);

CREATE VIEW so.frt_flanked (frt_flanked_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS frt_flanked_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'FRT_flanked'::text);

CREATE VIEW so.frt_site (frt_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS frt_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'FRT_site'::text);

CREATE VIEW so.functional_variant (functional_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS functional_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((cvterm.name)::text = 'transcript_function_variant'::text) OR ((cvterm.name)::text = 'translational_product_function_variant'::text)) OR ((cvterm.name)::text = 'level_of_transcript_variant'::text)) OR ((cvterm.name)::text = 'transcript_processing_variant'::text)) OR ((cvterm.name)::text = 'transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'transcription_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'increased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'editing_variant'::text)) OR ((cvterm.name)::text = 'polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'increased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'increased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'rate_of_transcription_variant'::text)) OR ((cvterm.name)::text = 'increased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'translational_product_level_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_function_variant'::text)) OR ((cvterm.name)::text = 'decreased_translational_product_level'::text)) OR ((cvterm.name)::text = 'increased_translational_product_level'::text)) OR ((cvterm.name)::text = 'polypeptide_gain_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_localization_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_loss_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_post_translational_processing_variant'::text)) OR ((cvterm.name)::text = 'inactive_ligand_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text)) OR ((cvterm.name)::text = 'inactive_catalytic_site'::text)) OR ((cvterm.name)::text = 'functional_variant'::text));

CREATE VIEW so."fusion" (fusion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS fusion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'fusion'::text);

CREATE VIEW so.fusion_gene (fusion_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS fusion_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_fusion_gene'::text) OR ((cvterm.name)::text = 'fusion_gene'::text));

CREATE VIEW so.g_quartet (g_quartet_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS g_quartet_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'G_quartet'::text);

CREATE VIEW so.g_to_a_transition (g_to_a_transition_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS g_to_a_transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'G_to_A_transition'::text);

CREATE VIEW so.g_to_c_transversion (g_to_c_transversion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS g_to_c_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'G_to_C_transversion'::text);

CREATE VIEW so.g_to_t_transversion (g_to_t_transversion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS g_to_t_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'G_to_T_transversion'::text);

CREATE VIEW so.gaga_motif (gaga_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gaga_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'GAGA_motif'::text);

CREATE VIEW so.galactosyl_queuosine (galactosyl_queuosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS galactosyl_queuosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'galactosyl_queuosine'::text);

CREATE VIEW so.gamma_turn (gamma_turn_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gamma_turn_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'gamma_turn_classic'::text) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text));

CREATE VIEW so.gamma_turn_classic (gamma_turn_classic_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gamma_turn_classic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gamma_turn_classic'::text);

CREATE VIEW so.gamma_turn_inverse (gamma_turn_inverse_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gamma_turn_inverse_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gamma_turn_inverse'::text);

CREATE VIEW so.gap (gap_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gap_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gap'::text);

CREATE VIEW so.gc_rich_promoter_region (gc_rich_promoter_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gc_rich_promoter_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'GC_rich_promoter_region'::text);

CREATE VIEW so.gcvb_rna (gcvb_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gcvb_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'GcvB_RNA'::text);

CREATE VIEW so.gene (gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'nuclear_gene'::text) OR ((cvterm.name)::text = 'mt_gene'::text)) OR ((cvterm.name)::text = 'plastid_gene'::text)) OR ((cvterm.name)::text = 'nucleomorph_gene'::text)) OR ((cvterm.name)::text = 'plasmid_gene'::text)) OR ((cvterm.name)::text = 'proviral_gene'::text)) OR ((cvterm.name)::text = 'transposable_element_gene'::text)) OR ((cvterm.name)::text = 'silenced_gene'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'foreign_gene'::text)) OR ((cvterm.name)::text = 'fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_gene'::text)) OR ((cvterm.name)::text = 'gene_with_trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'rescue_gene'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'positively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'transgene'::text)) OR ((cvterm.name)::text = 'predicted_gene'::text)) OR ((cvterm.name)::text = 'protein_coding_gene'::text)) OR ((cvterm.name)::text = 'retrogene'::text)) OR ((cvterm.name)::text = 'ncRNA_gene'::text)) OR ((cvterm.name)::text = 'cryptic_gene'::text)) OR ((cvterm.name)::text = 'gene_with_non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'gene_cassette'::text)) OR ((cvterm.name)::text = 'kinetoplast_gene'::text)) OR ((cvterm.name)::text = 'maxicircle_gene'::text)) OR ((cvterm.name)::text = 'minicircle_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'apicoplast_gene'::text)) OR ((cvterm.name)::text = 'ct_gene'::text)) OR ((cvterm.name)::text = 'chromoplast_gene'::text)) OR ((cvterm.name)::text = 'cyanelle_gene'::text)) OR ((cvterm.name)::text = 'leucoplast_gene'::text)) OR ((cvterm.name)::text = 'proplastid_gene'::text)) OR ((cvterm.name)::text = 'endogenous_retroviral_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_inverted_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'wild_type_rescue_gene'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'floxed_gene'::text)) OR ((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_edited_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'gRNA_gene'::text)) OR ((cvterm.name)::text = 'miRNA_gene'::text)) OR ((cvterm.name)::text = 'scRNA_gene'::text)) OR ((cvterm.name)::text = 'snoRNA_gene'::text)) OR ((cvterm.name)::text = 'snRNA_gene'::text)) OR ((cvterm.name)::text = 'SRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'stRNA_gene'::text)) OR ((cvterm.name)::text = 'tmRNA_gene'::text)) OR ((cvterm.name)::text = 'tRNA_gene'::text)) OR ((cvterm.name)::text = 'rRNA_gene'::text)) OR ((cvterm.name)::text = 'piRNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'lincRNA_gene'::text)) OR ((cvterm.name)::text = 'telomerase_RNA_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'gene_with_start_codon_CUG'::text)) OR ((cvterm.name)::text = 'gene'::text));

CREATE VIEW so.gene_array (gene_array_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_array_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_array'::text);

CREATE VIEW so.gene_array_member (gene_array_member_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_array_member_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'operon_member'::text) OR ((cvterm.name)::text = 'gene_cassette_member'::text)) OR ((cvterm.name)::text = 'gene_subarray_member'::text)) OR ((cvterm.name)::text = 'member_of_regulon'::text)) OR ((cvterm.name)::text = 'cassette_array_member'::text)) OR ((cvterm.name)::text = 'gene_array_member'::text));

CREATE VIEW so.gene_attribute (gene_attribute_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'protein_coding'::text) OR ((cvterm.name)::text = 'non_protein_coding'::text)) OR ((cvterm.name)::text = 'gene_to_gene_feature'::text)) OR ((cvterm.name)::text = 'gene_array_member'::text)) OR ((cvterm.name)::text = 'regulated'::text)) OR ((cvterm.name)::text = 'epigenetically_modified'::text)) OR ((cvterm.name)::text = 'encodes_alternately_spliced_transcripts'::text)) OR ((cvterm.name)::text = 'encodes_alternate_transcription_start_sites'::text)) OR ((cvterm.name)::text = 'intein_containing'::text)) OR ((cvterm.name)::text = 'miRNA_encoding'::text)) OR ((cvterm.name)::text = 'rRNA_encoding'::text)) OR ((cvterm.name)::text = 'scRNA_encoding'::text)) OR ((cvterm.name)::text = 'snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'snRNA_encoding'::text)) OR ((cvterm.name)::text = 'SRP_RNA_encoding'::text)) OR ((cvterm.name)::text = 'stRNA_encoding'::text)) OR ((cvterm.name)::text = 'tmRNA_encoding'::text)) OR ((cvterm.name)::text = 'tRNA_encoding'::text)) OR ((cvterm.name)::text = 'gRNA_encoding'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'overlapping'::text)) OR ((cvterm.name)::text = 'inside_intron'::text)) OR ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'antisense'::text)) OR ((cvterm.name)::text = 'inside_intron_antiparallel'::text)) OR ((cvterm.name)::text = 'inside_intron_parallel'::text)) OR ((cvterm.name)::text = 'operon_member'::text)) OR ((cvterm.name)::text = 'gene_cassette_member'::text)) OR ((cvterm.name)::text = 'gene_subarray_member'::text)) OR ((cvterm.name)::text = 'member_of_regulon'::text)) OR ((cvterm.name)::text = 'cassette_array_member'::text)) OR ((cvterm.name)::text = 'transcriptionally_regulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated'::text)) OR ((cvterm.name)::text = 'translationally_regulated'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'transcriptionally_constitutive'::text)) OR ((cvterm.name)::text = 'transcriptionally_induced'::text)) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text)) OR ((cvterm.name)::text = 'autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'silenced'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'allelically_excluded'::text)) OR ((cvterm.name)::text = 'rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'encodes_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_greater_than_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text)) OR ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text)) OR ((cvterm.name)::text = 'gene_attribute'::text));

CREATE VIEW so.gene_cassette (gene_cassette_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_cassette_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_cassette'::text);

CREATE VIEW so.gene_cassette_array (gene_cassette_array_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_cassette_array_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_cassette_array'::text);

CREATE VIEW so.gene_cassette_member (gene_cassette_member_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_cassette_member_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'cassette_array_member'::text) OR ((cvterm.name)::text = 'gene_cassette_member'::text));

CREATE VIEW so.gene_component_region (gene_component_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_component_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'non_transcribed_region'::text) OR ((cvterm.name)::text = 'gene_fragment'::text)) OR ((cvterm.name)::text = 'TSS_region'::text)) OR ((cvterm.name)::text = 'gene_segment'::text)) OR ((cvterm.name)::text = 'pseudogenic_gene_segment'::text)) OR ((cvterm.name)::text = 'gene_component_region'::text));

CREATE VIEW so.gene_fragment (gene_fragment_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_fragment'::text);

CREATE VIEW so.gene_fusion (gene_fusion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_fusion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_fusion'::text);

CREATE VIEW so.gene_group (gene_group_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_group_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'operon'::text) OR ((cvterm.name)::text = 'mating_type_region'::text)) OR ((cvterm.name)::text = 'gene_array'::text)) OR ((cvterm.name)::text = 'gene_subarray'::text)) OR ((cvterm.name)::text = 'gene_cassette_array'::text)) OR ((cvterm.name)::text = 'regulon'::text)) OR ((cvterm.name)::text = 'gene_group'::text));

CREATE VIEW so.gene_group_regulatory_region (gene_group_regulatory_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_group_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'operator'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text));

CREATE VIEW so.gene_member_region (gene_member_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_member_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'transcript'::text) OR ((cvterm.name)::text = 'regulatory_region'::text)) OR ((cvterm.name)::text = 'polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'primary_transcript'::text)) OR ((cvterm.name)::text = 'mature_transcript'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_protein'::text)) OR ((cvterm.name)::text = 'enzymatic_RNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_transcript'::text)) OR ((cvterm.name)::text = 'aberrant_processed_transcript'::text)) OR ((cvterm.name)::text = 'edited_transcript'::text)) OR ((cvterm.name)::text = 'processed_transcript'::text)) OR ((cvterm.name)::text = 'alternatively_spliced_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text)) OR ((cvterm.name)::text = 'nc_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text)) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text)) OR ((cvterm.name)::text = 'capped_primary_transcript'::text)) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text)) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mRNA'::text)) OR ((cvterm.name)::text = 'ncRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'scRNA'::text)) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'ribozyme'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'transcription_regulatory_region'::text)) OR ((cvterm.name)::text = 'translation_regulatory_region'::text)) OR ((cvterm.name)::text = 'recombination_regulatory_region'::text)) OR ((cvterm.name)::text = 'replication_regulatory_region'::text)) OR ((cvterm.name)::text = 'terminator'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text)) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text)) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'operator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'promoter'::text)) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'attenuator'::text)) OR ((cvterm.name)::text = 'gene_member_region'::text));

CREATE VIEW so.gene_rearranged_at_dna_level (gene_rearranged_at_dna_level_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_rearranged_at_dna_level_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text);

CREATE VIEW so.gene_segment (gene_segment_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_segment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'pseudogenic_gene_segment'::text) OR ((cvterm.name)::text = 'gene_segment'::text));

CREATE VIEW so.gene_silenced_by_dna_methylation (gene_silenced_by_dna_methylation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_silenced_by_dna_methylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text);

CREATE VIEW so.gene_silenced_by_dna_modification (gene_silenced_by_dna_modification_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_silenced_by_dna_modification_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text));

CREATE VIEW so.gene_silenced_by_histone_deacetylation (gene_silenced_by_histone_deacetylation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_silenced_by_histone_deacetylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text);

CREATE VIEW so.gene_silenced_by_histone_methylation (gene_silenced_by_histone_methylation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_silenced_by_histone_methylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text);

CREATE VIEW so.gene_silenced_by_histone_modification (gene_silenced_by_histone_modification_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_silenced_by_histone_modification_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text));

CREATE VIEW so.gene_silenced_by_rna_interference (gene_silenced_by_rna_interference_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_silenced_by_rna_interference_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text);

CREATE VIEW so.gene_subarray (gene_subarray_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_subarray_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_subarray'::text);

CREATE VIEW so.gene_subarray_member (gene_subarray_member_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_subarray_member_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_subarray_member'::text);

CREATE VIEW so.gene_to_gene_feature (gene_to_gene_feature_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_to_gene_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((cvterm.name)::text = 'overlapping'::text) OR ((cvterm.name)::text = 'inside_intron'::text)) OR ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'antisense'::text)) OR ((cvterm.name)::text = 'inside_intron_antiparallel'::text)) OR ((cvterm.name)::text = 'inside_intron_parallel'::text)) OR ((cvterm.name)::text = 'gene_to_gene_feature'::text));

CREATE VIEW so.gene_trap_construct (gene_trap_construct_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_trap_construct_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_trap_construct'::text);

CREATE VIEW so.gene_variant (gene_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'gene_fusion'::text) OR ((cvterm.name)::text = 'splicing_variant'::text)) OR ((cvterm.name)::text = 'transcript_variant'::text)) OR ((cvterm.name)::text = 'translational_product_structure_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site_variant'::text)) OR ((cvterm.name)::text = 'exon_loss'::text)) OR ((cvterm.name)::text = 'intron_gain'::text)) OR ((cvterm.name)::text = 'splice_region_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_acceptor'::text)) OR ((cvterm.name)::text = 'cryptic_splice_donor'::text)) OR ((cvterm.name)::text = 'complex_change_in_transcript'::text)) OR ((cvterm.name)::text = 'transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'nc_transcript_variant'::text)) OR ((cvterm.name)::text = 'NMD_transcript_variant'::text)) OR ((cvterm.name)::text = 'UTR_variant'::text)) OR ((cvterm.name)::text = 'intron_variant'::text)) OR ((cvterm.name)::text = 'exon_variant'::text)) OR ((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'mature_miRNA_variant'::text)) OR ((cvterm.name)::text = '5_prime_UTR_variant'::text)) OR ((cvterm.name)::text = '3_prime_UTR_variant'::text)) OR ((cvterm.name)::text = 'splice_site_variant'::text)) OR ((cvterm.name)::text = 'splice_acceptor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text)) OR ((cvterm.name)::text = 'coding_sequence_variant'::text)) OR ((cvterm.name)::text = 'non_coding_exon_variant'::text)) OR ((cvterm.name)::text = 'codon_variant'::text)) OR ((cvterm.name)::text = 'frameshift_variant'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text)) OR ((cvterm.name)::text = 'initiator_codon_change'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'frame_restoring_variant'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'inframe_codon_gain'::text)) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = '3D_polypeptide_structure_variant'::text)) OR ((cvterm.name)::text = 'complex_change_of_translational_product_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_sequence_variant'::text)) OR ((cvterm.name)::text = 'complex_3D_structural_variant'::text)) OR ((cvterm.name)::text = 'conformational_change_variant'::text)) OR ((cvterm.name)::text = 'amino_acid_deletion'::text)) OR ((cvterm.name)::text = 'amino_acid_insertion'::text)) OR ((cvterm.name)::text = 'amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide'::text)) OR ((cvterm.name)::text = 'polypeptide_fusion'::text)) OR ((cvterm.name)::text = 'polypeptide_truncation'::text)) OR ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'gene_variant'::text));

CREATE VIEW so.gene_with_dicistronic_mrna (gene_with_dicistronic_mrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_with_dicistronic_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text);

CREATE VIEW so.gene_with_dicistronic_primary_transcript (gene_with_dicistronic_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_with_dicistronic_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text);

CREATE VIEW so.gene_with_dicistronic_transcript (gene_with_dicistronic_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_with_dicistronic_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text));

CREATE VIEW so.gene_with_edited_transcript (gene_with_edited_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_with_edited_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_edited_transcript'::text);

CREATE VIEW so.gene_with_mrna_recoded_by_translational_bypass (gene_with_mrna_recoded_by_translational_bypass_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_with_mrna_recoded_by_translational_bypass_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text);

CREATE VIEW so.gene_with_mrna_with_frameshift (gene_with_mrna_with_frameshift_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_with_mrna_with_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text);

CREATE VIEW so.gene_with_non_canonical_start_codon (gene_with_non_canonical_start_codon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_with_non_canonical_start_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'gene_with_start_codon_CUG'::text) OR ((cvterm.name)::text = 'gene_with_non_canonical_start_codon'::text));

CREATE VIEW so.gene_with_polyadenylated_mrna (gene_with_polyadenylated_mrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_with_polyadenylated_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text);

CREATE VIEW so.gene_with_polycistronic_transcript (gene_with_polycistronic_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_with_polycistronic_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_polycistronic_transcript'::text));

CREATE VIEW so.gene_with_recoded_mrna (gene_with_recoded_mrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_with_recoded_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text));

CREATE VIEW so.gene_with_start_codon_cug (gene_with_start_codon_cug_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_with_start_codon_cug_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_start_codon_CUG'::text);

CREATE VIEW so.gene_with_stop_codon_read_through (gene_with_stop_codon_read_through_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_with_stop_codon_read_through_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text));

CREATE VIEW so.gene_with_stop_codon_redefined_as_pyrrolysine (gene_with_stop_codon_redefined_as_pyrrolysine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_with_stop_codon_redefined_as_pyrrolysine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text);

CREATE VIEW so.gene_with_stop_codon_redefined_as_selenocysteine (gene_with_stop_codon_redefined_as_selenocysteine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_with_stop_codon_redefined_as_selenocysteine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text);

CREATE VIEW so.gene_with_trans_spliced_transcript (gene_with_trans_spliced_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_with_trans_spliced_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_trans_spliced_transcript'::text);

CREATE VIEW so.gene_with_transcript_with_translational_frameshift (gene_with_transcript_with_translational_frameshift_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gene_with_transcript_with_translational_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text);

CREATE VIEW so.genetic_marker (genetic_marker_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS genetic_marker_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'heritable_phenotypic_marker'::text) OR ((cvterm.name)::text = 'DArT_marker'::text)) OR ((cvterm.name)::text = 'genetic_marker'::text));

CREATE VIEW so.genome (genome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS genome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'kinetoplast'::text) OR ((cvterm.name)::text = 'reference_genome'::text)) OR ((cvterm.name)::text = 'variant_genome'::text)) OR ((cvterm.name)::text = 'chromosomally_aberrant_genome'::text)) OR ((cvterm.name)::text = 'genome'::text));

CREATE VIEW so.genomic_clone (genomic_clone_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS genomic_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'genomic_clone'::text);

CREATE VIEW so.genomic_dna (genomic_dna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS genomic_dna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'genomic_DNA'::text);

CREATE VIEW so.genomic_island (genomic_island_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS genomic_island_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'pathogenic_island'::text) OR ((cvterm.name)::text = 'metabolic_island'::text)) OR ((cvterm.name)::text = 'adaptive_island'::text)) OR ((cvterm.name)::text = 'symbiosis_island'::text)) OR ((cvterm.name)::text = 'cryptic_prophage'::text)) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text)) OR ((cvterm.name)::text = 'genomic_island'::text));

CREATE VIEW so.genomically_contaminated_cdna_clone (genomically_contaminated_cdna_clone_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS genomically_contaminated_cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text);

CREATE VIEW so.germline_variant (germline_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS germline_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'germline_variant'::text);

CREATE VIEW so.glutamic_acid (glutamic_acid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS glutamic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glutamic_acid'::text);

CREATE VIEW so.glutamic_acid_trna_primary_transcript (glutamic_acid_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS glutamic_acid_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text);

CREATE VIEW so.glutamine (glutamine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS glutamine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glutamine'::text);

CREATE VIEW so.glutamine_trna_primary_transcript (glutamine_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS glutamine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text);

CREATE VIEW so.glutaminyl_trna (glutaminyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS glutaminyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glutaminyl_tRNA'::text);

CREATE VIEW so.glutamyl_trna (glutamyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS glutamyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glutamyl_tRNA'::text);

CREATE VIEW so.glycine (glycine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS glycine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glycine'::text);

CREATE VIEW so.glycine_trna_primary_transcript (glycine_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS glycine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text);

CREATE VIEW so.glycyl_trna (glycyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS glycyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glycyl_tRNA'::text);

CREATE VIEW so.gna (gna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'R_GNA'::text) OR ((cvterm.name)::text = 'S_GNA'::text)) OR ((cvterm.name)::text = 'GNA'::text));

CREATE VIEW so.gna_oligo (gna_oligo_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS gna_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'R_GNA_oligo'::text) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text));

CREATE VIEW so.golden_path (golden_path_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS golden_path_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'golden_path'::text);

CREATE VIEW so.golden_path_fragment (golden_path_fragment_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS golden_path_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'golden_path_fragment'::text);

CREATE VIEW so.grna_encoding (grna_encoding_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS grna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gRNA_encoding'::text);

CREATE VIEW so.grna_gene (grna_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS grna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gRNA_gene'::text);

CREATE VIEW so.group_1_intron_homing_endonuclease_target_region (group_1_intron_homing_endonuclease_target_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS group_1_intron_homing_endonuclease_target_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text);

CREATE VIEW so.group_i_intron (group_i_intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS group_i_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'group_I_intron'::text);

CREATE VIEW so.group_ii_intron (group_ii_intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS group_ii_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'group_IIA_intron'::text) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text));

CREATE VIEW so.group_iia_intron (group_iia_intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS group_iia_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'group_IIA_intron'::text);

CREATE VIEW so.group_iib_intron (group_iib_intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS group_iib_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'group_IIB_intron'::text);

CREATE VIEW so.group_iii_intron (group_iii_intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS group_iii_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'group_III_intron'::text);

CREATE VIEW so.guide_rna (guide_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS guide_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'guide_RNA'::text);

CREATE VIEW so.guide_rna_region (guide_rna_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS guide_rna_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'anchor_region'::text) OR ((cvterm.name)::text = 'template_region'::text)) OR ((cvterm.name)::text = 'guide_RNA_region'::text));

CREATE VIEW so.h2b_ubiquitination_site (h2b_ubiquitination_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h2b_ubiquitination_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H2B_ubiquitination_site'::text);

CREATE VIEW so.h2bk5_monomethylation_site (h2bk5_monomethylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h2bk5_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text);

CREATE VIEW so.h3k14_acetylation_site (h3k14_acetylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k14_acetylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K14_acetylation_site'::text);

CREATE VIEW so.h3k18_acetylation_site (h3k18_acetylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k18_acetylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K18_acetylation_site'::text);

CREATE VIEW so.h3k23_acylation_site (h3k23_acylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k23_acylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K23_acylation site'::text);

CREATE VIEW so.h3k27_acylation_site (h3k27_acylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k27_acylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K27_acylation_site'::text);

CREATE VIEW so.h3k27_dimethylation_site (h3k27_dimethylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k27_dimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K27_dimethylation_site'::text);

CREATE VIEW so.h3k27_methylation_site (h3k27_methylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k27_methylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'H3K27_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text));

CREATE VIEW so.h3k27_monomethylation_site (h3k27_monomethylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k27_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K27_monomethylation_site'::text);

CREATE VIEW so.h3k27_trimethylation_site (h3k27_trimethylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k27_trimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K27_trimethylation_site'::text);

CREATE VIEW so.h3k36_dimethylation_site (h3k36_dimethylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k36_dimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K36_dimethylation_site'::text);

CREATE VIEW so.h3k36_methylation_site (h3k36_methylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k36_methylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'H3K36_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text));

CREATE VIEW so.h3k36_monomethylation_site (h3k36_monomethylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k36_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K36_monomethylation_site'::text);

CREATE VIEW so.h3k36_trimethylation_site (h3k36_trimethylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k36_trimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K36_trimethylation_site'::text);

CREATE VIEW so.h3k4_dimethylation_site (h3k4_dimethylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k4_dimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K4_dimethylation_site'::text);

CREATE VIEW so.h3k4_methylation_site (h3k4_methylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k4_methylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'H3K4_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text));

CREATE VIEW so.h3k4_monomethylation_site (h3k4_monomethylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k4_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K4_monomethylation_site'::text);

CREATE VIEW so.h3k4_trimethylation (h3k4_trimethylation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k4_trimethylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K4_trimethylation'::text);

CREATE VIEW so.h3k79_dimethylation_site (h3k79_dimethylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k79_dimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K79_dimethylation_site'::text);

CREATE VIEW so.h3k79_methylation_site (h3k79_methylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k79_methylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'H3K79_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text));

CREATE VIEW so.h3k79_monomethylation_site (h3k79_monomethylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k79_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K79_monomethylation_site'::text);

CREATE VIEW so.h3k79_trimethylation_site (h3k79_trimethylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k79_trimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K79_trimethylation_site'::text);

CREATE VIEW so.h3k9_acetylation_site (h3k9_acetylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k9_acetylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K9_acetylation_site'::text);

CREATE VIEW so.h3k9_dimethylation_site (h3k9_dimethylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k9_dimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K9_dimethylation_site'::text);

CREATE VIEW so.h3k9_methylation_site (h3k9_methylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k9_methylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'H3K9_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text));

CREATE VIEW so.h3k9_monomethylation_site (h3k9_monomethylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k9_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K9_monomethylation_site'::text);

CREATE VIEW so.h3k9_trimethylation_site (h3k9_trimethylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h3k9_trimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K9_trimethylation_site'::text);

CREATE VIEW so.h4k16_acylation_site (h4k16_acylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h4k16_acylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H4K16_acylation_site'::text);

CREATE VIEW so.h4k20_monomethylation_site (h4k20_monomethylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h4k20_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H4K20_monomethylation_site'::text);

CREATE VIEW so.h4k5_acylation_site (h4k5_acylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h4k5_acylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H4K5_acylation_site'::text);

CREATE VIEW so.h4k8_acylation_site (h4k8_acylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h4k8_acylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H4K8_acylation site'::text);

CREATE VIEW so.h4k_acylation_region (h4k_acylation_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h4k_acylation_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H4K_acylation_region'::text);

CREATE VIEW so.h_aca_box_snorna (h_aca_box_snorna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h_aca_box_snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text));

CREATE VIEW so.h_aca_box_snorna_encoding (h_aca_box_snorna_encoding_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h_aca_box_snorna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text);

CREATE VIEW so.h_aca_box_snorna_primary_transcript (h_aca_box_snorna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h_aca_box_snorna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text);

CREATE VIEW so.h_pseudoknot (h_pseudoknot_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS h_pseudoknot_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H_pseudoknot'::text);

CREATE VIEW so.hammerhead_ribozyme (hammerhead_ribozyme_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS hammerhead_ribozyme_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'hammerhead_ribozyme'::text);

CREATE VIEW so.haplotype (haplotype_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS haplotype_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'haplotype'::text);

CREATE VIEW so.haplotype_block (haplotype_block_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS haplotype_block_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'haplotype_block'::text);

CREATE VIEW so.helitron (helitron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS helitron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'helitron'::text);

CREATE VIEW so.helix_turn_helix (helix_turn_helix_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS helix_turn_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'helix_turn_helix'::text);

CREATE VIEW so.heptamer_of_recombination_feature_of_vertebrate_im_sys_gene (heptamer_of_recombination_feature_of_vertebrate_im_sys_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS heptamer_of_recombination_feature_of_vertebrate_im_sys_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'three_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text));

CREATE VIEW so.heritable_phenotypic_marker (heritable_phenotypic_marker_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS heritable_phenotypic_marker_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'heritable_phenotypic_marker'::text);

CREATE VIEW so.hetero_compound_chromosome (hetero_compound_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS hetero_compound_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'hetero_compound_chromosome'::text);

CREATE VIEW so.high_identity_region (high_identity_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS high_identity_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'high_identity_region'::text);

CREATE VIEW so.high_quality_draft (high_quality_draft_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS high_quality_draft_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'high_quality_draft'::text);

CREATE VIEW so.histidine (histidine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS histidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'histidine'::text);

CREATE VIEW so.histidine_trna_primary_transcript (histidine_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS histidine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text);

CREATE VIEW so.histidyl_trna (histidyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS histidyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'histidyl_tRNA'::text);

CREATE VIEW so.histone_acetylation_site (histone_acetylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS histone_acetylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((cvterm.name)::text = 'H3K9_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text));

CREATE VIEW so.histone_acylation_region (histone_acylation_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS histone_acylation_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'H4K_acylation_region'::text) OR ((cvterm.name)::text = 'histone_acylation_region'::text));

CREATE VIEW so.histone_binding_site (histone_binding_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS histone_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'histone_binding_site'::text);

CREATE VIEW so.histone_methylation_site (histone_methylation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS histone_methylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((cvterm.name)::text = 'H4K20_monomethylation_site'::text) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text));

CREATE VIEW so.histone_modification (histone_modification_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS histone_modification_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'histone_methylation_site'::text) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'histone_modification'::text));

CREATE VIEW so.histone_ubiqitination_site (histone_ubiqitination_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS histone_ubiqitination_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'H2B_ubiquitination_site'::text) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text));

CREATE VIEW so.homing_endonuclease_binding_site (homing_endonuclease_binding_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS homing_endonuclease_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text);

CREATE VIEW so.homo_compound_chromosome (homo_compound_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS homo_compound_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'homo_compound_chromosome'::text);

CREATE VIEW so.homologous (homologous_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS homologous_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'orthologous'::text) OR ((cvterm.name)::text = 'paralogous'::text)) OR ((cvterm.name)::text = 'homologous'::text));

CREATE VIEW so.homologous_region (homologous_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS homologous_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'paralogous_region'::text) OR ((cvterm.name)::text = 'orthologous_region'::text)) OR ((cvterm.name)::text = 'homologous_region'::text));

CREATE VIEW so.hoogsteen_base_pair (hoogsteen_base_pair_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS hoogsteen_base_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'Hoogsteen_base_pair'::text);

CREATE VIEW so.hydrophobic_region_of_peptide (hydrophobic_region_of_peptide_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS hydrophobic_region_of_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'hydrophobic_region_of_peptide'::text);

CREATE VIEW so.hydroxywybutosine (hydroxywybutosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS hydroxywybutosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'hydroxywybutosine'::text);

CREATE VIEW so.hyperploid (hyperploid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS hyperploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'hyperploid'::text);

CREATE VIEW so.hypoploid (hypoploid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS hypoploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'hypoploid'::text);

CREATE VIEW so.i_motif (i_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS i_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'i_motif'::text);

CREATE VIEW so.idna (idna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS idna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'iDNA'::text);

CREATE VIEW so.immature_peptide_region (immature_peptide_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS immature_peptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'immature_peptide_region'::text);

CREATE VIEW so.imprinted (imprinted_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS imprinted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'maternally_imprinted'::text) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'imprinted'::text));

CREATE VIEW so.improved_high_quality_draft (improved_high_quality_draft_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS improved_high_quality_draft_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'improved_high_quality_draft'::text);

CREATE VIEW so.inactive_catalytic_site (inactive_catalytic_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inactive_catalytic_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inactive_catalytic_site'::text);

CREATE VIEW so.inactive_ligand_binding_site (inactive_ligand_binding_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inactive_ligand_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'inactive_catalytic_site'::text) OR ((cvterm.name)::text = 'inactive_ligand_binding_site'::text));

CREATE VIEW so.incomplete_terminal_codon_variant (incomplete_terminal_codon_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS incomplete_terminal_codon_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text);

CREATE VIEW so.increased_polyadenylation_variant (increased_polyadenylation_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS increased_polyadenylation_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'increased_polyadenylation_variant'::text);

CREATE VIEW so.increased_transcript_level_variant (increased_transcript_level_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS increased_transcript_level_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'increased_transcript_level_variant'::text);

CREATE VIEW so.increased_transcript_stability_variant (increased_transcript_stability_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS increased_transcript_stability_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'increased_transcript_stability_variant'::text);

CREATE VIEW so.increased_transcription_rate_variant (increased_transcription_rate_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS increased_transcription_rate_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'increased_transcription_rate_variant'::text);

CREATE VIEW so.increased_translational_product_level (increased_translational_product_level_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS increased_translational_product_level_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'increased_translational_product_level'::text);

CREATE VIEW so.indel (indel_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS indel_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'indel'::text);

CREATE VIEW so.independently_known (independently_known_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS independently_known_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'independently_known'::text);

CREATE VIEW so.inframe_codon_gain (inframe_codon_gain_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inframe_codon_gain_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inframe_codon_gain'::text);

CREATE VIEW so.inframe_codon_loss (inframe_codon_loss_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inframe_codon_loss_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inframe_codon_loss'::text);

CREATE VIEW so.inframe_variant (inframe_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inframe_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'inframe_codon_gain'::text) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text));

CREATE VIEW so.initiator_codon_change (initiator_codon_change_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS initiator_codon_change_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'initiator_codon_change'::text);

CREATE VIEW so.inosine (inosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'modified_inosine'::text) OR ((cvterm.name)::text = 'methylinosine'::text)) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'inosine'::text));

CREATE VIEW so.inr1_motif (inr1_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inr1_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'INR1_motif'::text);

CREATE VIEW so.inr_motif (inr_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inr_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'INR_motif'::text);

CREATE VIEW so.insertion (insertion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS insertion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'transgenic_insertion'::text) OR ((cvterm.name)::text = 'duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text)) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'insertion'::text));

CREATE VIEW so.insertion_attribute (insertion_attribute_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS insertion_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'tandem'::text) OR ((cvterm.name)::text = 'direct'::text)) OR ((cvterm.name)::text = 'inverted'::text)) OR ((cvterm.name)::text = 'insertion_attribute'::text));

CREATE VIEW so.insertion_breakpoint (insertion_breakpoint_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS insertion_breakpoint_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'insertion_breakpoint'::text);

CREATE VIEW so.insertion_sequence (insertion_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS insertion_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'insertion_sequence'::text);

CREATE VIEW so.insertion_site (insertion_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS insertion_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'transposable_element_insertion_site'::text) OR ((cvterm.name)::text = 'insertion_site'::text));

CREATE VIEW so.insertional (insertional_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS insertional_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'insertional'::text);

CREATE VIEW so.insertional_duplication (insertional_duplication_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS insertional_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'uninverted_insertional_duplication'::text) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text)) OR ((cvterm.name)::text = 'insertional_duplication'::text));

CREATE VIEW so.inside_intron (inside_intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inside_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'inside_intron_antiparallel'::text) OR ((cvterm.name)::text = 'inside_intron_parallel'::text)) OR ((cvterm.name)::text = 'inside_intron'::text));

CREATE VIEW so.inside_intron_antiparallel (inside_intron_antiparallel_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inside_intron_antiparallel_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inside_intron_antiparallel'::text);

CREATE VIEW so.inside_intron_parallel (inside_intron_parallel_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inside_intron_parallel_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inside_intron_parallel'::text);

CREATE VIEW so.insulator (insulator_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS insulator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'insulator'::text);

CREATE VIEW so.insulator_binding_site (insulator_binding_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS insulator_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'insulator_binding_site'::text);

CREATE VIEW so.integrated_mobile_genetic_element (integrated_mobile_genetic_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS integrated_mobile_genetic_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'transposable_element'::text) OR ((cvterm.name)::text = 'proviral_region'::text)) OR ((cvterm.name)::text = 'integron'::text)) OR ((cvterm.name)::text = 'genomic_island'::text)) OR ((cvterm.name)::text = 'integrated_plasmid'::text)) OR ((cvterm.name)::text = 'cointegrated_plasmid'::text)) OR ((cvterm.name)::text = 'retrotransposon'::text)) OR ((cvterm.name)::text = 'DNA_transposon'::text)) OR ((cvterm.name)::text = 'foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'nested_transposon'::text)) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text)) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'prophage'::text)) OR ((cvterm.name)::text = 'pathogenic_island'::text)) OR ((cvterm.name)::text = 'metabolic_island'::text)) OR ((cvterm.name)::text = 'adaptive_island'::text)) OR ((cvterm.name)::text = 'symbiosis_island'::text)) OR ((cvterm.name)::text = 'cryptic_prophage'::text)) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text)) OR ((cvterm.name)::text = 'integrated_mobile_genetic_element'::text));

CREATE VIEW so.integrated_plasmid (integrated_plasmid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS integrated_plasmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'integrated_plasmid'::text);

CREATE VIEW so.integration_excision_site (integration_excision_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS integration_excision_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'attI_site'::text) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text));

CREATE VIEW so.integron (integron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS integron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'integron'::text);

CREATE VIEW so.intein (intein_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS intein_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intein'::text);

CREATE VIEW so.intein_containing (intein_containing_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS intein_containing_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intein_containing'::text);

CREATE VIEW so.interband (interband_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS interband_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'interband'::text);

CREATE VIEW so.interchromosomal (interchromosomal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS interchromosomal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'interchromosomal'::text);

CREATE VIEW so.interchromosomal_duplication (interchromosomal_duplication_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS interchromosomal_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'interchromosomal_duplication'::text);

CREATE VIEW so.interchromosomal_mutation (interchromosomal_mutation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS interchromosomal_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((cvterm.name)::text = 'chromosomal_translocation'::text) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'translocation_element'::text)) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text)) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'cyclic_translocation'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_mutation'::text));

CREATE VIEW so.interchromosomal_transposition (interchromosomal_transposition_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS interchromosomal_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text));

CREATE VIEW so.intergenic_region (intergenic_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS intergenic_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intergenic_region'::text);

CREATE VIEW so.intergenic_variant (intergenic_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS intergenic_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intergenic_variant'::text);

CREATE VIEW so.interior_coding_exon (interior_coding_exon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS interior_coding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'interior_coding_exon'::text);

CREATE VIEW so.interior_exon (interior_exon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS interior_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'interior_exon'::text);

CREATE VIEW so.interior_intron (interior_intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS interior_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'interior_intron'::text);

CREATE VIEW so.intermediate (intermediate_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS intermediate_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intermediate'::text);

CREATE VIEW so.intermediate_element (intermediate_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS intermediate_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intermediate_element'::text);

CREATE VIEW so.internal_eliminated_sequence (internal_eliminated_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS internal_eliminated_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'internal_eliminated_sequence'::text);

CREATE VIEW so.internal_guide_sequence (internal_guide_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS internal_guide_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'internal_guide_sequence'::text);

CREATE VIEW so.internal_ribosome_entry_site (internal_ribosome_entry_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS internal_ribosome_entry_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text));

CREATE VIEW so.internal_shine_dalgarno_sequence (internal_shine_dalgarno_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS internal_shine_dalgarno_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text);

CREATE VIEW so.internal_transcribed_spacer_region (internal_transcribed_spacer_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS internal_transcribed_spacer_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text);

CREATE VIEW so.internal_utr (internal_utr_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS internal_utr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'internal_UTR'::text);

CREATE VIEW so.intrachromosomal (intrachromosomal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS intrachromosomal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intrachromosomal'::text);

CREATE VIEW so.intrachromosomal_duplication (intrachromosomal_duplication_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS intrachromosomal_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text));

CREATE VIEW so.intrachromosomal_mutation (intrachromosomal_mutation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS intrachromosomal_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((cvterm.name)::text = 'chromosomal_deletion'::text) OR ((cvterm.name)::text = 'chromosomal_inversion'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'ring_chromosome'::text)) OR ((cvterm.name)::text = 'chromosome_fission'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'pericentric_inversion'::text)) OR ((cvterm.name)::text = 'paracentric_inversion'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'intrachromosomal_mutation'::text));

CREATE VIEW so.intrachromosomal_transposition (intrachromosomal_transposition_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS intrachromosomal_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text));

CREATE VIEW so.intramembrane_polypeptide_region (intramembrane_polypeptide_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS intramembrane_polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'membrane_peptide_loop'::text) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text));

CREATE VIEW so.intrinsically_unstructured_polypeptide_region (intrinsically_unstructured_polypeptide_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS intrinsically_unstructured_polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text);

CREATE VIEW so.introgressed_chromosome_region (introgressed_chromosome_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS introgressed_chromosome_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'introgressed_chromosome_region'::text);

CREATE VIEW so.intron (intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((cvterm.name)::text = 'five_prime_intron'::text) OR ((cvterm.name)::text = 'interior_intron'::text)) OR ((cvterm.name)::text = 'three_prime_intron'::text)) OR ((cvterm.name)::text = 'twintron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text)) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'group_I_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'U2_intron'::text)) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'archaeal_intron'::text)) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'intron'::text));

CREATE VIEW so.intron_domain (intron_domain_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS intron_domain_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'internal_guide_sequence'::text) OR ((cvterm.name)::text = 'mirtron'::text)) OR ((cvterm.name)::text = 'intron_domain'::text));

CREATE VIEW so.intron_gain (intron_gain_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS intron_gain_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intron_gain'::text);

CREATE VIEW so.intron_variant (intron_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS intron_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'splice_site_variant'::text) OR ((cvterm.name)::text = 'splice_acceptor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text)) OR ((cvterm.name)::text = 'intron_variant'::text));

CREATE VIEW so.intronic_regulatory_region (intronic_regulatory_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS intronic_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intronic_regulatory_region'::text);

CREATE VIEW so.intronic_splice_enhancer (intronic_splice_enhancer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS intronic_splice_enhancer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intronic_splice_enhancer'::text);

CREATE VIEW so.invalidated (invalidated_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS invalidated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'invalidated_by_chimeric_cDNA'::text) OR ((cvterm.name)::text = 'invalidated_by_genomic_contamination'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_polyA_primed_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_partial_processing'::text)) OR ((cvterm.name)::text = 'invalidated'::text));

CREATE VIEW so.invalidated_by_chimeric_cdna (invalidated_by_chimeric_cdna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS invalidated_by_chimeric_cdna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'invalidated_by_chimeric_cDNA'::text);

CREATE VIEW so.invalidated_by_genomic_contamination (invalidated_by_genomic_contamination_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS invalidated_by_genomic_contamination_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'invalidated_by_genomic_contamination'::text);

CREATE VIEW so.invalidated_by_genomic_polya_primed_cdna (invalidated_by_genomic_polya_primed_cdna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS invalidated_by_genomic_polya_primed_cdna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'invalidated_by_genomic_polyA_primed_cDNA'::text);

CREATE VIEW so.invalidated_by_partial_processing (invalidated_by_partial_processing_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS invalidated_by_partial_processing_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'invalidated_by_partial_processing'::text);

CREATE VIEW so.invalidated_cdna_clone (invalidated_cdna_clone_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS invalidated_cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'chimeric_cDNA_clone'::text) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text));

CREATE VIEW so.inversion (inversion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion'::text);

CREATE VIEW so.inversion_attribute (inversion_attribute_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inversion_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'pericentric'::text) OR ((cvterm.name)::text = 'paracentric'::text)) OR ((cvterm.name)::text = 'inversion_attribute'::text));

CREATE VIEW so.inversion_breakpoint (inversion_breakpoint_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inversion_breakpoint_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_breakpoint'::text);

CREATE VIEW so.inversion_cum_translocation (inversion_cum_translocation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inversion_cum_translocation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text));

CREATE VIEW so.inversion_derived_aneuploid_chromosome (inversion_derived_aneuploid_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inversion_derived_aneuploid_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text);

CREATE VIEW so.inversion_derived_bipartite_deficiency (inversion_derived_bipartite_deficiency_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inversion_derived_bipartite_deficiency_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text);

CREATE VIEW so.inversion_derived_bipartite_duplication (inversion_derived_bipartite_duplication_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inversion_derived_bipartite_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text);

CREATE VIEW so.inversion_derived_deficiency_plus_aneuploid (inversion_derived_deficiency_plus_aneuploid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inversion_derived_deficiency_plus_aneuploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text);

CREATE VIEW so.inversion_derived_deficiency_plus_duplication (inversion_derived_deficiency_plus_duplication_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inversion_derived_deficiency_plus_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text);

CREATE VIEW so.inversion_derived_duplication_plus_aneuploid (inversion_derived_duplication_plus_aneuploid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inversion_derived_duplication_plus_aneuploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text);

CREATE VIEW so.inversion_site (inversion_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inversion_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'FRT_site'::text) OR ((cvterm.name)::text = 'inversion_site'::text));

CREATE VIEW so.inversion_site_part (inversion_site_part_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inversion_site_part_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'IRLinv_site'::text) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text));

CREATE VIEW so.invert_inter_transposition (invert_inter_transposition_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS invert_inter_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text);

CREATE VIEW so.invert_intra_transposition (invert_intra_transposition_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS invert_intra_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text);

CREATE VIEW so.inverted (inverted_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inverted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inverted'::text);

CREATE VIEW so.inverted_insertional_duplication (inverted_insertional_duplication_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inverted_insertional_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inverted_insertional_duplication'::text);

CREATE VIEW so.inverted_repeat (inverted_repeat_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inverted_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'inverted_repeat'::text));

CREATE VIEW so.inverted_ring_chromosome (inverted_ring_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inverted_ring_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inverted_ring_chromosome'::text);

CREATE VIEW so.inverted_tandem_duplication (inverted_tandem_duplication_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS inverted_tandem_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inverted_tandem_duplication'::text);

CREATE VIEW so.irlinv_site (irlinv_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS irlinv_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'IRLinv_site'::text);

CREATE VIEW so.iron_responsive_element (iron_responsive_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS iron_responsive_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'iron_responsive_element'::text);

CREATE VIEW so.irrinv_site (irrinv_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS irrinv_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'IRRinv_site'::text);

CREATE VIEW so.isoleucine (isoleucine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS isoleucine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'isoleucine'::text);

CREATE VIEW so.isoleucine_trna_primary_transcript (isoleucine_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS isoleucine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text);

CREATE VIEW so.isoleucyl_trna (isoleucyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS isoleucyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'isoleucyl_tRNA'::text);

CREATE VIEW so.isowyosine (isowyosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS isowyosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'isowyosine'::text);

CREATE VIEW so.isre (isre_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS isre_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ISRE'::text);

CREATE VIEW so.j_c_cluster (j_c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_C_cluster'::text);

CREATE VIEW so.j_cluster (j_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_cluster'::text);

CREATE VIEW so.j_gene (j_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS j_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_gene'::text);

CREATE VIEW so.j_gene_recombination_feature (j_gene_recombination_feature_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS j_gene_recombination_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_gene_recombination_feature'::text);

CREATE VIEW so.j_heptamer (j_heptamer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS j_heptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_heptamer'::text);

CREATE VIEW so.j_nonamer (j_nonamer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS j_nonamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_nonamer'::text);

CREATE VIEW so.j_spacer (j_spacer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS j_spacer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_spacer'::text);

CREATE VIEW so.junction (junction_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((cvterm.name)::text = 'clone_insert_end'::text) OR ((cvterm.name)::text = 'clone_insert_start'::text)) OR ((cvterm.name)::text = 'exon_junction'::text)) OR ((cvterm.name)::text = 'insertion_site'::text)) OR ((cvterm.name)::text = 'polyA_site'::text)) OR ((cvterm.name)::text = 'deletion_junction'::text)) OR ((cvterm.name)::text = 'chromosome_breakpoint'::text)) OR ((cvterm.name)::text = 'splice_junction'::text)) OR ((cvterm.name)::text = 'trans_splice_junction'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_cleavage_junction'::text)) OR ((cvterm.name)::text = 'transposable_element_insertion_site'::text)) OR ((cvterm.name)::text = 'inversion_breakpoint'::text)) OR ((cvterm.name)::text = 'translocation_breakpoint'::text)) OR ((cvterm.name)::text = 'insertion_breakpoint'::text)) OR ((cvterm.name)::text = 'deletion_breakpoint'::text)) OR ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_junction'::text)) OR ((cvterm.name)::text = 'single_strand_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'five_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'three_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'junction'::text));

CREATE VIEW so.k_turn_rna_motif (k_turn_rna_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS k_turn_rna_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'K_turn_RNA_motif'::text);

CREATE VIEW so.kinetoplast (kinetoplast_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS kinetoplast_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'kinetoplast'::text);

CREATE VIEW so.kinetoplast_gene (kinetoplast_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS kinetoplast_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'maxicircle_gene'::text) OR ((cvterm.name)::text = 'minicircle_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'kinetoplast_gene'::text));

CREATE VIEW so.kozak_sequence (kozak_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS kozak_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'kozak_sequence'::text);

CREATE VIEW so.laevosynaptic_chromosome (laevosynaptic_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS laevosynaptic_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'laevosynaptic_chromosome'::text);

CREATE VIEW so.lambda_vector (lambda_vector_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS lambda_vector_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lambda_vector'::text);

CREATE VIEW so.large_subunit_rrna (large_subunit_rrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS large_subunit_rrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'rRNA_5_8S'::text) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text));

CREATE VIEW so.left_handed_peptide_helix (left_handed_peptide_helix_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS left_handed_peptide_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'left_handed_peptide_helix'::text);

CREATE VIEW so.lethal_variant (lethal_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS lethal_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lethal_variant'::text);

CREATE VIEW so.leucine (leucine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS leucine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'leucine'::text);

CREATE VIEW so.leucine_trna_primary_transcript (leucine_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS leucine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text);

CREATE VIEW so.leucoplast_chromosome (leucoplast_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS leucoplast_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'leucoplast_chromosome'::text);

CREATE VIEW so.leucoplast_gene (leucoplast_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS leucoplast_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'leucoplast_gene'::text);

CREATE VIEW so.leucoplast_sequence (leucoplast_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS leucoplast_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'leucoplast_sequence'::text);

CREATE VIEW so.leucyl_trna (leucyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS leucyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'leucyl_tRNA'::text);

CREATE VIEW so.level_of_transcript_variant (level_of_transcript_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS level_of_transcript_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'decreased_transcript_level_variant'::text) OR ((cvterm.name)::text = 'increased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'level_of_transcript_variant'::text));

CREATE VIEW so.ligand_binding_site (ligand_binding_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ligand_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'polypeptide_ligand_contact'::text) OR ((cvterm.name)::text = 'ligand_binding_site'::text));

CREATE VIEW so.ligation_based_read (ligation_based_read_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ligation_based_read_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ligation_based_read'::text);

CREATE VIEW so.lincrna (lincrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS lincrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lincRNA'::text);

CREATE VIEW so.lincrna_gene (lincrna_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS lincrna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lincRNA_gene'::text);

CREATE VIEW so.line_element (line_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS line_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'LINE_element'::text);

CREATE VIEW so.linear (linear_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS linear_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'linear'::text);

CREATE VIEW so.linear_double_stranded_dna_chromosome (linear_double_stranded_dna_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS linear_double_stranded_dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text);

CREATE VIEW so.linear_double_stranded_rna_chromosome (linear_double_stranded_rna_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS linear_double_stranded_rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text);

CREATE VIEW so.linear_single_stranded_dna_chromosome (linear_single_stranded_dna_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS linear_single_stranded_dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text);

CREATE VIEW so.linear_single_stranded_rna_chromosome (linear_single_stranded_rna_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS linear_single_stranded_rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text);

CREATE VIEW so.linkage_group (linkage_group_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS linkage_group_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'linkage_group'::text);

CREATE VIEW so.lipoprotein_signal_peptide (lipoprotein_signal_peptide_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS lipoprotein_signal_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text);

CREATE VIEW so.lna (lna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS lna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'LNA'::text);

CREATE VIEW so.lna_oligo (lna_oligo_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS lna_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'LNA_oligo'::text);

CREATE VIEW so.locus_control_region (locus_control_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS locus_control_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'locus_control_region'::text);

CREATE VIEW so.long_terminal_repeat (long_terminal_repeat_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS long_terminal_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'five_prime_LTR'::text) OR ((cvterm.name)::text = 'three_prime_LTR'::text)) OR ((cvterm.name)::text = 'solo_LTR'::text)) OR ((cvterm.name)::text = 'long_terminal_repeat'::text));

CREATE VIEW so.loss_of_heterozygosity (loss_of_heterozygosity_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS loss_of_heterozygosity_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'loss_of_heterozygosity'::text);

CREATE VIEW so.low_complexity (low_complexity_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS low_complexity_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'low_complexity'::text);

CREATE VIEW so.low_complexity_region (low_complexity_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS low_complexity_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'low_complexity_region'::text);

CREATE VIEW so.loxp_site (loxp_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS loxp_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'loxP_site'::text);

CREATE VIEW so.ltr_component (ltr_component_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ltr_component_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((cvterm.name)::text = 'U5_LTR_region'::text) OR ((cvterm.name)::text = 'R_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_LTR_region'::text)) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'LTR_component'::text));

CREATE VIEW so.ltr_retrotransposon (ltr_retrotransposon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ltr_retrotransposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'LTR_retrotransposon'::text);

CREATE VIEW so.lysidine (lysidine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS lysidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lysidine'::text);

CREATE VIEW so.lysine (lysine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS lysine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lysine'::text);

CREATE VIEW so.lysine_trna_primary_transcript (lysine_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS lysine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text);

CREATE VIEW so.lysosomal_localization_signal (lysosomal_localization_signal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS lysosomal_localization_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lysosomal_localization_signal'::text);

CREATE VIEW so.lysyl_trna (lysyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS lysyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lysyl_tRNA'::text);

CREATE VIEW so.macronuclear_chromosome (macronuclear_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS macronuclear_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'macronuclear_chromosome'::text);

CREATE VIEW so.macronuclear_sequence (macronuclear_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS macronuclear_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'macronuclear_sequence'::text);

CREATE VIEW so.macronucleus_destined_segment (macronucleus_destined_segment_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS macronucleus_destined_segment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'macronucleus_destined_segment'::text);

CREATE VIEW so.major_tss (major_tss_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS major_tss_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'major_TSS'::text);

CREATE VIEW so.mannosyl_queuosine (mannosyl_queuosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mannosyl_queuosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mannosyl_queuosine'::text);

CREATE VIEW so."match" (match_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'nucleotide_match'::text) OR ((cvterm.name)::text = 'protein_match'::text)) OR ((cvterm.name)::text = 'expressed_sequence_match'::text)) OR ((cvterm.name)::text = 'cross_genome_match'::text)) OR ((cvterm.name)::text = 'translated_nucleotide_match'::text)) OR ((cvterm.name)::text = 'primer_match'::text)) OR ((cvterm.name)::text = 'EST_match'::text)) OR ((cvterm.name)::text = 'cDNA_match'::text)) OR ((cvterm.name)::text = 'UST_match'::text)) OR ((cvterm.name)::text = 'RST_match'::text)) OR ((cvterm.name)::text = 'match'::text));

CREATE VIEW so.match_part (match_part_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS match_part_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'match_part'::text);

CREATE VIEW so.maternal_uniparental_disomy (maternal_uniparental_disomy_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS maternal_uniparental_disomy_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'maternal_uniparental_disomy'::text);

CREATE VIEW so.maternal_variant (maternal_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS maternal_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'maternal_variant'::text);

CREATE VIEW so.maternally_imprinted (maternally_imprinted_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS maternally_imprinted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'maternally_imprinted'::text);

CREATE VIEW so.maternally_imprinted_gene (maternally_imprinted_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS maternally_imprinted_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'maternally_imprinted_gene'::text);

CREATE VIEW so.mathematically_defined_repeat (mathematically_defined_repeat_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mathematically_defined_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mathematically_defined_repeat'::text);

CREATE VIEW so.mating_type_region (mating_type_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mating_type_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mating_type_region'::text);

CREATE VIEW so.matrix_attachment_site (matrix_attachment_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS matrix_attachment_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'matrix_attachment_site'::text);

CREATE VIEW so.mature_mirna_variant (mature_mirna_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mature_mirna_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mature_miRNA_variant'::text);

CREATE VIEW so.mature_protein_region (mature_protein_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mature_protein_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'active_peptide'::text) OR ((cvterm.name)::text = 'mature_protein_region'::text));

CREATE VIEW so.mature_transcript (mature_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mature_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'mRNA'::text) OR ((cvterm.name)::text = 'ncRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'scRNA'::text)) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'mature_transcript'::text));

CREATE VIEW so.mature_transcript_region (mature_transcript_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mature_transcript_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'mRNA_region'::text) OR ((cvterm.name)::text = 'tmRNA_region'::text)) OR ((cvterm.name)::text = 'guide_RNA_region'::text)) OR ((cvterm.name)::text = 'tRNA_region'::text)) OR ((cvterm.name)::text = 'riboswitch'::text)) OR ((cvterm.name)::text = 'ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'UTR'::text)) OR ((cvterm.name)::text = 'CDS'::text)) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text)) OR ((cvterm.name)::text = 'UTR_region'::text)) OR ((cvterm.name)::text = 'CDS_region'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text)) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'five_prime_UTR'::text)) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_CDS'::text)) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text)) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'coding_start'::text)) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'tmRNA_coding_piece'::text)) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text)) OR ((cvterm.name)::text = 'anchor_region'::text)) OR ((cvterm.name)::text = 'template_region'::text)) OR ((cvterm.name)::text = 'anticodon_loop'::text)) OR ((cvterm.name)::text = 'anticodon'::text)) OR ((cvterm.name)::text = 'CCA_tail'::text)) OR ((cvterm.name)::text = 'DHU_loop'::text)) OR ((cvterm.name)::text = 'T_loop'::text)) OR ((cvterm.name)::text = 'mature_transcript_region'::text));

CREATE VIEW so.maxicircle (maxicircle_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS maxicircle_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'maxicircle'::text);

CREATE VIEW so.maxicircle_gene (maxicircle_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS maxicircle_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'cryptogene'::text) OR ((cvterm.name)::text = 'maxicircle_gene'::text));

CREATE VIEW so.member_of_regulon (member_of_regulon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS member_of_regulon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'member_of_regulon'::text);

CREATE VIEW so.membrane_peptide_loop (membrane_peptide_loop_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS membrane_peptide_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'membrane_peptide_loop'::text);

CREATE VIEW so.membrane_structure (membrane_structure_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS membrane_structure_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'membrane_structure'::text);

CREATE VIEW so.metabolic_island (metabolic_island_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS metabolic_island_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'metabolic_island'::text);

CREATE VIEW so.metal_binding_site (metal_binding_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS metal_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((cvterm.name)::text = 'polypeptide_metal_contact'::text) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'metal_binding_site'::text));

CREATE VIEW so.methionine (methionine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS methionine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methionine'::text);

CREATE VIEW so.methionine_trna_primary_transcript (methionine_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS methionine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text);

CREATE VIEW so.methionyl_trna (methionyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS methionyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methionyl_tRNA'::text);

CREATE VIEW so.methylated_a (methylated_a_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS methylated_a_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methylated_A'::text);

CREATE VIEW so.methylated_base_feature (methylated_base_feature_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS methylated_base_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'methylated_C'::text) OR ((cvterm.name)::text = 'methylated_A'::text)) OR ((cvterm.name)::text = 'methylated_base_feature'::text));

CREATE VIEW so.methylated_c (methylated_c_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS methylated_c_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methylated_C'::text);

CREATE VIEW so.methylation_guide_snorna (methylation_guide_snorna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS methylation_guide_snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methylation_guide_snoRNA'::text);

CREATE VIEW so.methylation_guide_snorna_primary_transcript (methylation_guide_snorna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS methylation_guide_snorna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text);

CREATE VIEW so.methylinosine (methylinosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS methylinosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methylinosine'::text);

CREATE VIEW so.methylwyosine (methylwyosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS methylwyosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methylwyosine'::text);

CREATE VIEW so.micf_rna (micf_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS micf_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'MicF_RNA'::text);

CREATE VIEW so.microarray_oligo (microarray_oligo_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS microarray_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'microarray_oligo'::text);

CREATE VIEW so.micronuclear_chromosome (micronuclear_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS micronuclear_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'micronuclear_chromosome'::text);

CREATE VIEW so.micronuclear_sequence (micronuclear_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS micronuclear_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'micronuclear_sequence'::text);

CREATE VIEW so.microsatellite (microsatellite_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS microsatellite_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'microsatellite'::text));

CREATE VIEW so.mini_exon_donor_rna (mini_exon_donor_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mini_exon_donor_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mini_exon_donor_RNA'::text);

CREATE VIEW so.mini_gene (mini_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mini_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'rescue_mini_gene'::text) OR ((cvterm.name)::text = 'mini_gene'::text));

CREATE VIEW so.minicircle (minicircle_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS minicircle_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minicircle'::text);

CREATE VIEW so.minicircle_gene (minicircle_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS minicircle_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minicircle_gene'::text);

CREATE VIEW so.minisatellite (minisatellite_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS minisatellite_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minisatellite'::text);

CREATE VIEW so.minor_tss (minor_tss_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS minor_tss_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minor_TSS'::text);

CREATE VIEW so.minus_10_signal (minus_10_signal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS minus_10_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_10_signal'::text);

CREATE VIEW so.minus_12_signal (minus_12_signal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS minus_12_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_12_signal'::text);

CREATE VIEW so.minus_1_frameshift (minus_1_frameshift_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS minus_1_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_1_frameshift'::text);

CREATE VIEW so.minus_1_frameshift_variant (minus_1_frameshift_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS minus_1_frameshift_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_1_frameshift_variant'::text);

CREATE VIEW so.minus_1_translationally_frameshifted (minus_1_translationally_frameshifted_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS minus_1_translationally_frameshifted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text);

CREATE VIEW so.minus_24_signal (minus_24_signal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS minus_24_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_24_signal'::text);

CREATE VIEW so.minus_2_frameshift (minus_2_frameshift_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS minus_2_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_2_frameshift'::text);

CREATE VIEW so.minus_2_frameshift_variant (minus_2_frameshift_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS minus_2_frameshift_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_2_frameshift_variant'::text);

CREATE VIEW so.minus_35_signal (minus_35_signal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS minus_35_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_35_signal'::text);

CREATE VIEW so.mirna (mirna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mirna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA'::text);

CREATE VIEW so.mirna_antiguide (mirna_antiguide_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mirna_antiguide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA_antiguide'::text);

CREATE VIEW so.mirna_encoding (mirna_encoding_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mirna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA_encoding'::text);

CREATE VIEW so.mirna_gene (mirna_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mirna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA_gene'::text);

CREATE VIEW so.mirna_loop (mirna_loop_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mirna_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA_loop'::text);

CREATE VIEW so.mirna_primary_transcript (mirna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mirna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'stRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text));

CREATE VIEW so.mirna_primary_transcript_region (mirna_primary_transcript_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mirna_primary_transcript_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'pre_miRNA'::text) OR ((cvterm.name)::text = 'miRNA_stem'::text)) OR ((cvterm.name)::text = 'miRNA_loop'::text)) OR ((cvterm.name)::text = 'miRNA_antiguide'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text));

CREATE VIEW so.mirna_stem (mirna_stem_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mirna_stem_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA_stem'::text);

CREATE VIEW so.mirna_target_site (mirna_target_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mirna_target_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA_target_site'::text);

CREATE VIEW so.mirtron (mirtron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mirtron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mirtron'::text);

CREATE VIEW so.missense_codon (missense_codon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS missense_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'conservative_missense_codon'::text) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'missense_codon'::text));

CREATE VIEW so.mite (mite_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mite_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'MITE'::text);

CREATE VIEW so.mitochondrial_chromosome (mitochondrial_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mitochondrial_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mitochondrial_chromosome'::text);

CREATE VIEW so.mitochondrial_dna (mitochondrial_dna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mitochondrial_dna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mitochondrial_DNA'::text);

CREATE VIEW so.mitochondrial_sequence (mitochondrial_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mitochondrial_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'mitochondrial_DNA'::text) OR ((cvterm.name)::text = 'mitochondrial_sequence'::text));

CREATE VIEW so.mnp (mnp_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mnp_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'MNP'::text);

CREATE VIEW so.mobile (mobile_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mobile_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mobile'::text);

CREATE VIEW so.mobile_genetic_element (mobile_genetic_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mobile_genetic_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'mobile_intron'::text) OR ((cvterm.name)::text = 'extrachromosomal_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'integrated_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'transposable_element'::text)) OR ((cvterm.name)::text = 'proviral_region'::text)) OR ((cvterm.name)::text = 'integron'::text)) OR ((cvterm.name)::text = 'genomic_island'::text)) OR ((cvterm.name)::text = 'integrated_plasmid'::text)) OR ((cvterm.name)::text = 'cointegrated_plasmid'::text)) OR ((cvterm.name)::text = 'retrotransposon'::text)) OR ((cvterm.name)::text = 'DNA_transposon'::text)) OR ((cvterm.name)::text = 'foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'nested_transposon'::text)) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text)) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'prophage'::text)) OR ((cvterm.name)::text = 'pathogenic_island'::text)) OR ((cvterm.name)::text = 'metabolic_island'::text)) OR ((cvterm.name)::text = 'adaptive_island'::text)) OR ((cvterm.name)::text = 'symbiosis_island'::text)) OR ((cvterm.name)::text = 'cryptic_prophage'::text)) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text)) OR ((cvterm.name)::text = 'mobile_genetic_element'::text));

CREATE VIEW so.mobile_intron (mobile_intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mobile_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mobile_intron'::text);

CREATE VIEW so.modified_adenosine (modified_adenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_adenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((cvterm.name)::text = 'one_methyladenosine'::text) OR ((cvterm.name)::text = 'two_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text)) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text)) OR ((cvterm.name)::text = 'modified_adenosine'::text));

CREATE VIEW so.modified_amino_acid_feature (modified_amino_acid_feature_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_amino_acid_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((cvterm.name)::text = 'modified_glycine'::text) OR ((cvterm.name)::text = 'modified_L_alanine'::text)) OR ((cvterm.name)::text = 'modified_L_asparagine'::text)) OR ((cvterm.name)::text = 'modified_L_aspartic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_cysteine'::text)) OR ((cvterm.name)::text = 'modified_L_glutamic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_threonine'::text)) OR ((cvterm.name)::text = 'modified_L_tryptophan'::text)) OR ((cvterm.name)::text = 'modified_L_glutamine'::text)) OR ((cvterm.name)::text = 'modified_L_methionine'::text)) OR ((cvterm.name)::text = 'modified_L_isoleucine'::text)) OR ((cvterm.name)::text = 'modified_L_phenylalanine'::text)) OR ((cvterm.name)::text = 'modified_L_histidine'::text)) OR ((cvterm.name)::text = 'modified_L_serine'::text)) OR ((cvterm.name)::text = 'modified_L_lysine'::text)) OR ((cvterm.name)::text = 'modified_L_leucine'::text)) OR ((cvterm.name)::text = 'modified_L_selenocysteine'::text)) OR ((cvterm.name)::text = 'modified_L_valine'::text)) OR ((cvterm.name)::text = 'modified_L_proline'::text)) OR ((cvterm.name)::text = 'modified_L_tyrosine'::text)) OR ((cvterm.name)::text = 'modified_L_arginine'::text)) OR ((cvterm.name)::text = 'modified_amino_acid_feature'::text));

CREATE VIEW so.modified_base (modified_base_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_base_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'methylated_base_feature'::text) OR ((cvterm.name)::text = 'methylated_C'::text)) OR ((cvterm.name)::text = 'methylated_A'::text)) OR ((cvterm.name)::text = 'modified_base'::text));

CREATE VIEW so.modified_cytidine (modified_cytidine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_cytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((cvterm.name)::text = 'three_methylcytidine'::text) OR ((cvterm.name)::text = 'five_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_thiocytidine'::text)) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text)) OR ((cvterm.name)::text = 'five_formylcytidine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'lysidine'::text)) OR ((cvterm.name)::text = 'N4_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text)) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text)) OR ((cvterm.name)::text = 'modified_cytidine'::text));

CREATE VIEW so.modified_glycine (modified_glycine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_glycine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_glycine'::text);

CREATE VIEW so.modified_guanosine (modified_guanosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_guanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((cvterm.name)::text = 'seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'one_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_methylguanosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text)) OR ((cvterm.name)::text = 'wybutosine'::text)) OR ((cvterm.name)::text = 'peroxywybutosine'::text)) OR ((cvterm.name)::text = 'hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'wyosine'::text)) OR ((cvterm.name)::text = 'methylwyosine'::text)) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'four_demethylwyosine'::text)) OR ((cvterm.name)::text = 'isowyosine'::text)) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'queuosine'::text)) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'modified_guanosine'::text));

CREATE VIEW so.modified_inosine (modified_inosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_inosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'methylinosine'::text) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'modified_inosine'::text));

CREATE VIEW so.modified_l_alanine (modified_l_alanine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_l_alanine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_alanine'::text);

CREATE VIEW so.modified_l_arginine (modified_l_arginine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_l_arginine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_arginine'::text);

CREATE VIEW so.modified_l_asparagine (modified_l_asparagine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_l_asparagine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_asparagine'::text);

CREATE VIEW so.modified_l_aspartic_acid (modified_l_aspartic_acid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_l_aspartic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_aspartic_acid'::text);

CREATE VIEW so.modified_l_cysteine (modified_l_cysteine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_l_cysteine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_cysteine'::text);

CREATE VIEW so.modified_l_glutamic_acid (modified_l_glutamic_acid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_l_glutamic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_glutamic_acid'::text);

CREATE VIEW so.modified_l_glutamine (modified_l_glutamine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_l_glutamine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_glutamine'::text);

CREATE VIEW so.modified_l_histidine (modified_l_histidine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_l_histidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_histidine'::text);

CREATE VIEW so.modified_l_isoleucine (modified_l_isoleucine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_l_isoleucine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_isoleucine'::text);

CREATE VIEW so.modified_l_leucine (modified_l_leucine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_l_leucine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_leucine'::text);

CREATE VIEW so.modified_l_lysine (modified_l_lysine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_l_lysine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_lysine'::text);

CREATE VIEW so.modified_l_methionine (modified_l_methionine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_l_methionine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_methionine'::text);

CREATE VIEW so.modified_l_phenylalanine (modified_l_phenylalanine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_l_phenylalanine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_phenylalanine'::text);

CREATE VIEW so.modified_l_proline (modified_l_proline_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_l_proline_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_proline'::text);

CREATE VIEW so.modified_l_selenocysteine (modified_l_selenocysteine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_l_selenocysteine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_selenocysteine'::text);

CREATE VIEW so.modified_l_serine (modified_l_serine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_l_serine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_serine'::text);

CREATE VIEW so.modified_l_threonine (modified_l_threonine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_l_threonine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_threonine'::text);

CREATE VIEW so.modified_l_tryptophan (modified_l_tryptophan_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_l_tryptophan_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_tryptophan'::text);

CREATE VIEW so.modified_l_tyrosine (modified_l_tyrosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_l_tyrosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_tyrosine'::text);

CREATE VIEW so.modified_l_valine (modified_l_valine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_l_valine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_valine'::text);

CREATE VIEW so.modified_rna_base_feature (modified_rna_base_feature_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_rna_base_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'inosine'::text) OR ((cvterm.name)::text = 'seven_methylguanine'::text)) OR ((cvterm.name)::text = 'ribothymidine'::text)) OR ((cvterm.name)::text = 'modified_adenosine'::text)) OR ((cvterm.name)::text = 'modified_cytidine'::text)) OR ((cvterm.name)::text = 'modified_guanosine'::text)) OR ((cvterm.name)::text = 'modified_uridine'::text)) OR ((cvterm.name)::text = 'modified_inosine'::text)) OR ((cvterm.name)::text = 'methylinosine'::text)) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'one_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text)) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text)) OR ((cvterm.name)::text = 'three_methylcytidine'::text)) OR ((cvterm.name)::text = 'five_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_thiocytidine'::text)) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text)) OR ((cvterm.name)::text = 'five_formylcytidine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'lysidine'::text)) OR ((cvterm.name)::text = 'N4_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text)) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text)) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'one_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_methylguanosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text)) OR ((cvterm.name)::text = 'wybutosine'::text)) OR ((cvterm.name)::text = 'peroxywybutosine'::text)) OR ((cvterm.name)::text = 'hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'wyosine'::text)) OR ((cvterm.name)::text = 'methylwyosine'::text)) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'four_demethylwyosine'::text)) OR ((cvterm.name)::text = 'isowyosine'::text)) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'queuosine'::text)) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'dihydrouridine'::text)) OR ((cvterm.name)::text = 'pseudouridine'::text)) OR ((cvterm.name)::text = 'five_methyluridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_thiouridine'::text)) OR ((cvterm.name)::text = 'four_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text)) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text)) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text)) OR ((cvterm.name)::text = 'five_methoxyuridine'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'three_methyluridine'::text)) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text)) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text)) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'modified_RNA_base_feature'::text));

CREATE VIEW so.modified_uridine (modified_uridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS modified_uridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'dihydrouridine'::text) OR ((cvterm.name)::text = 'pseudouridine'::text)) OR ((cvterm.name)::text = 'five_methyluridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_thiouridine'::text)) OR ((cvterm.name)::text = 'four_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text)) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text)) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text)) OR ((cvterm.name)::text = 'five_methoxyuridine'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'three_methyluridine'::text)) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text)) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text)) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'modified_uridine'::text));

CREATE VIEW so.molecular_contact_region (molecular_contact_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS molecular_contact_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((cvterm.name)::text = 'polypeptide_metal_contact'::text) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text));

CREATE VIEW so.monocistronic (monocistronic_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS monocistronic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'monocistronic'::text);

CREATE VIEW so.monocistronic_mrna (monocistronic_mrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS monocistronic_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'monocistronic_mRNA'::text);

CREATE VIEW so.monocistronic_primary_transcript (monocistronic_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS monocistronic_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'monocistronic_primary_transcript'::text);

CREATE VIEW so.monocistronic_transcript (monocistronic_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS monocistronic_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'monocistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'monocistronic_transcript'::text));

CREATE VIEW so.morpholino_backbone (morpholino_backbone_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS morpholino_backbone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'morpholino_backbone'::text);

CREATE VIEW so.morpholino_oligo (morpholino_oligo_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS morpholino_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'morpholino_oligo'::text);

CREATE VIEW so.mrna (mrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((cvterm.name)::text = 'mRNA_with_frameshift'::text) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'mRNA'::text));

CREATE VIEW so.mrna_attribute (mrna_attribute_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mrna_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((cvterm.name)::text = 'polyadenylated'::text) OR ((cvterm.name)::text = 'exemplar'::text)) OR ((cvterm.name)::text = 'frameshift'::text)) OR ((cvterm.name)::text = 'recoded'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_framshift'::text)) OR ((cvterm.name)::text = 'codon_redefined'::text)) OR ((cvterm.name)::text = 'recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'mRNA_attribute'::text));

CREATE VIEW so.mrna_recoded_by_codon_redefinition (mrna_recoded_by_codon_redefinition_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mrna_recoded_by_codon_redefinition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text);

CREATE VIEW so.mrna_recoded_by_translational_bypass (mrna_recoded_by_translational_bypass_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mrna_recoded_by_translational_bypass_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text);

CREATE VIEW so.mrna_region (mrna_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mrna_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'riboswitch'::text) OR ((cvterm.name)::text = 'ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'UTR'::text)) OR ((cvterm.name)::text = 'CDS'::text)) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text)) OR ((cvterm.name)::text = 'UTR_region'::text)) OR ((cvterm.name)::text = 'CDS_region'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text)) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'five_prime_UTR'::text)) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_CDS'::text)) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text)) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'coding_start'::text)) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'mRNA_region'::text));

CREATE VIEW so.mrna_with_frameshift (mrna_with_frameshift_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mrna_with_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text));

CREATE VIEW so.mrna_with_minus_1_frameshift (mrna_with_minus_1_frameshift_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mrna_with_minus_1_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text);

CREATE VIEW so.mrna_with_minus_2_frameshift (mrna_with_minus_2_frameshift_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mrna_with_minus_2_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text);

CREATE VIEW so.mrna_with_plus_1_frameshift (mrna_with_plus_1_frameshift_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mrna_with_plus_1_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text);

CREATE VIEW so.mrna_with_plus_2_frameshift (mrna_with_plus_2_frameshift_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mrna_with_plus_2_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text);

CREATE VIEW so.mt_gene (mt_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mt_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'kinetoplast_gene'::text) OR ((cvterm.name)::text = 'maxicircle_gene'::text)) OR ((cvterm.name)::text = 'minicircle_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'mt_gene'::text));

CREATE VIEW so.mte (mte_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mte_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'MTE'::text);

CREATE VIEW so.mutated_variant_site (mutated_variant_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS mutated_variant_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mutated_variant_site'::text);

CREATE VIEW so.n2_2_prime_o_dimethylguanosine (n2_2_prime_o_dimethylguanosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n2_2_prime_o_dimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text);

CREATE VIEW so.n2_7_2prirme_o_trimethylguanosine (n2_7_2prirme_o_trimethylguanosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n2_7_2prirme_o_trimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text);

CREATE VIEW so.n2_7_dimethylguanosine (n2_7_dimethylguanosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n2_7_dimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text);

CREATE VIEW so.n2_methylguanosine (n2_methylguanosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n2_methylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_methylguanosine'::text);

CREATE VIEW so.n2_n2_2_prime_o_trimethylguanosine (n2_n2_2_prime_o_trimethylguanosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n2_n2_2_prime_o_trimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text);

CREATE VIEW so.n2_n2_7_trimethylguanosine (n2_n2_7_trimethylguanosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n2_n2_7_trimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text);

CREATE VIEW so.n2_n2_dimethylguanosine (n2_n2_dimethylguanosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n2_n2_dimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text);

CREATE VIEW so.n4_2_prime_o_dimethylcytidine (n4_2_prime_o_dimethylcytidine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n4_2_prime_o_dimethylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text);

CREATE VIEW so.n4_acetyl_2_prime_o_methylcytidine (n4_acetyl_2_prime_o_methylcytidine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n4_acetyl_2_prime_o_methylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text);

CREATE VIEW so.n4_acetylcytidine (n4_acetylcytidine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n4_acetylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N4_acetylcytidine'::text);

CREATE VIEW so.n4_methylcytidine (n4_methylcytidine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n4_methylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N4_methylcytidine'::text);

CREATE VIEW so.n4_n4_2_prime_o_trimethylcytidine (n4_n4_2_prime_o_trimethylcytidine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n4_n4_2_prime_o_trimethylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text);

CREATE VIEW so.n6_2_prime_o_dimethyladenosine (n6_2_prime_o_dimethyladenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n6_2_prime_o_dimethyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text);

CREATE VIEW so.n6_acetyladenosine (n6_acetyladenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n6_acetyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_acetyladenosine'::text);

CREATE VIEW so.n6_cis_hydroxyisopentenyl_adenosine (n6_cis_hydroxyisopentenyl_adenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n6_cis_hydroxyisopentenyl_adenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text);

CREATE VIEW so.n6_glycinylcarbamoyladenosine (n6_glycinylcarbamoyladenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n6_glycinylcarbamoyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text);

CREATE VIEW so.n6_hydroxynorvalylcarbamoyladenosine (n6_hydroxynorvalylcarbamoyladenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n6_hydroxynorvalylcarbamoyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text);

CREATE VIEW so.n6_isopentenyladenosine (n6_isopentenyladenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n6_isopentenyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_isopentenyladenosine'::text);

CREATE VIEW so.n6_methyl_n6_threonylcarbamoyladenosine (n6_methyl_n6_threonylcarbamoyladenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n6_methyl_n6_threonylcarbamoyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text);

CREATE VIEW so.n6_methyladenosine (n6_methyladenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n6_methyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_methyladenosine'::text);

CREATE VIEW so.n6_n6_2_prime_o_trimethyladenosine (n6_n6_2_prime_o_trimethyladenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n6_n6_2_prime_o_trimethyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text);

CREATE VIEW so.n6_n6_dimethyladenosine (n6_n6_dimethyladenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n6_n6_dimethyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text);

CREATE VIEW so.n6_threonylcarbamoyladenosine (n6_threonylcarbamoyladenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n6_threonylcarbamoyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text);

CREATE VIEW so.n_terminal_region (n_terminal_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS n_terminal_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'n_terminal_region'::text);

CREATE VIEW so.natural_plasmid (natural_plasmid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS natural_plasmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'natural_plasmid'::text);

CREATE VIEW so.natural_transposable_element (natural_transposable_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS natural_transposable_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'natural_transposable_element'::text);

CREATE VIEW so.natural_variant_site (natural_variant_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS natural_variant_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'natural_variant_site'::text);

CREATE VIEW so.nc_conserved_region (nc_conserved_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nc_conserved_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nc_conserved_region'::text);

CREATE VIEW so.nc_primary_transcript (nc_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nc_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'scRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'nc_primary_transcript'::text));

CREATE VIEW so.nc_transcript_variant (nc_transcript_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nc_transcript_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'mature_miRNA_variant'::text) OR ((cvterm.name)::text = 'nc_transcript_variant'::text));

CREATE VIEW so.ncrna (ncrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ncrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'scRNA'::text) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'ncRNA'::text));

CREATE VIEW so.ncrna_gene (ncrna_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ncrna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((cvterm.name)::text = 'gRNA_gene'::text) OR ((cvterm.name)::text = 'miRNA_gene'::text)) OR ((cvterm.name)::text = 'scRNA_gene'::text)) OR ((cvterm.name)::text = 'snoRNA_gene'::text)) OR ((cvterm.name)::text = 'snRNA_gene'::text)) OR ((cvterm.name)::text = 'SRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'stRNA_gene'::text)) OR ((cvterm.name)::text = 'tmRNA_gene'::text)) OR ((cvterm.name)::text = 'tRNA_gene'::text)) OR ((cvterm.name)::text = 'rRNA_gene'::text)) OR ((cvterm.name)::text = 'piRNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'lincRNA_gene'::text)) OR ((cvterm.name)::text = 'telomerase_RNA_gene'::text)) OR ((cvterm.name)::text = 'ncRNA_gene'::text));

CREATE VIEW so.ndm2_motif (ndm2_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ndm2_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'NDM2_motif'::text);

CREATE VIEW so.ndm3_motif (ndm3_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ndm3_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'NDM3_motif'::text);

CREATE VIEW so.negative_sense_ssrna_viral_sequence (negative_sense_ssrna_viral_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS negative_sense_ssrna_viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text);

CREATE VIEW so.negatively_autoregulated (negatively_autoregulated_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS negatively_autoregulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'negatively_autoregulated'::text);

CREATE VIEW so.negatively_autoregulated_gene (negatively_autoregulated_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS negatively_autoregulated_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'negatively_autoregulated_gene'::text);

CREATE VIEW so.nested_repeat (nested_repeat_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nested_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'nested_tandem_repeat'::text) OR ((cvterm.name)::text = 'nested_repeat'::text));

CREATE VIEW so.nested_tandem_repeat (nested_tandem_repeat_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nested_tandem_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nested_tandem_repeat'::text);

CREATE VIEW so.nested_transposon (nested_transposon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nested_transposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nested_transposon'::text);

CREATE VIEW so.nmd_transcript_variant (nmd_transcript_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nmd_transcript_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'NMD_transcript_variant'::text);

CREATE VIEW so.no_output (no_output_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS no_output_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'no_output'::text);

CREATE VIEW so.non_adjacent_residues (non_adjacent_residues_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS non_adjacent_residues_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_adjacent_residues'::text);

CREATE VIEW so.non_canonical_five_prime_splice_site (non_canonical_five_prime_splice_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS non_canonical_five_prime_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text);

CREATE VIEW so.non_canonical_start_codon (non_canonical_start_codon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS non_canonical_start_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'four_bp_start_codon'::text) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text));

CREATE VIEW so.non_canonical_three_prime_splice_site (non_canonical_three_prime_splice_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS non_canonical_three_prime_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text);

CREATE VIEW so.non_coding_exon_variant (non_coding_exon_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS non_coding_exon_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_coding_exon_variant'::text);

CREATE VIEW so.non_conservative_amino_acid_substitution (non_conservative_amino_acid_substitution_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS non_conservative_amino_acid_substitution_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text);

CREATE VIEW so.non_conservative_missense_codon (non_conservative_missense_codon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS non_conservative_missense_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_conservative_missense_codon'::text);

CREATE VIEW so.non_cytoplasmic_polypeptide_region (non_cytoplasmic_polypeptide_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS non_cytoplasmic_polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text);

CREATE VIEW so.non_ltr_retrotransposon (non_ltr_retrotransposon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS non_ltr_retrotransposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'LINE_element'::text) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text));

CREATE VIEW so.non_ltr_retrotransposon_polymeric_tract (non_ltr_retrotransposon_polymeric_tract_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS non_ltr_retrotransposon_polymeric_tract_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text);

CREATE VIEW so.non_processed_pseudogene (non_processed_pseudogene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS non_processed_pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text) OR ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text)) OR ((cvterm.name)::text = 'cassette_pseudogene'::text)) OR ((cvterm.name)::text = 'duplicated_pseudogene'::text)) OR ((cvterm.name)::text = 'unitary_pseudogene'::text)) OR ((cvterm.name)::text = 'non_processed_pseudogene'::text));

CREATE VIEW so.non_protein_coding (non_protein_coding_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS non_protein_coding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((cvterm.name)::text = 'miRNA_encoding'::text) OR ((cvterm.name)::text = 'rRNA_encoding'::text)) OR ((cvterm.name)::text = 'scRNA_encoding'::text)) OR ((cvterm.name)::text = 'snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'snRNA_encoding'::text)) OR ((cvterm.name)::text = 'SRP_RNA_encoding'::text)) OR ((cvterm.name)::text = 'stRNA_encoding'::text)) OR ((cvterm.name)::text = 'tmRNA_encoding'::text)) OR ((cvterm.name)::text = 'tRNA_encoding'::text)) OR ((cvterm.name)::text = 'gRNA_encoding'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'non_protein_coding'::text));

CREATE VIEW so.non_synonymous_codon (non_synonymous_codon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS non_synonymous_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'stop_gained'::text) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text));

CREATE VIEW so.non_terminal_residue (non_terminal_residue_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS non_terminal_residue_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_terminal_residue'::text);

CREATE VIEW so.non_transcribed_region (non_transcribed_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS non_transcribed_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_transcribed_region'::text);

CREATE VIEW so.nonamer_of_recombination_feature_of_vertebrate_im_sys_gene (nonamer_of_recombination_feature_of_vertebrate_im_sys_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nonamer_of_recombination_feature_of_vertebrate_im_sys_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'three_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text));

CREATE VIEW so.noncoding_exon (noncoding_exon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS noncoding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'three_prime_noncoding_exon'::text) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'noncoding_exon'::text));

CREATE VIEW so.noncoding_region_of_exon (noncoding_region_of_exon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS noncoding_region_of_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'noncoding_region_of_exon'::text));

CREATE VIEW so.noncontiguous_finished (noncontiguous_finished_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS noncontiguous_finished_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'noncontiguous_finished'::text);

CREATE VIEW so.nuclear_chromosome (nuclear_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nuclear_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_chromosome'::text);

CREATE VIEW so.nuclear_export_signal (nuclear_export_signal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nuclear_export_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_export_signal'::text);

CREATE VIEW so.nuclear_gene (nuclear_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nuclear_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_gene'::text);

CREATE VIEW so.nuclear_localization_signal (nuclear_localization_signal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nuclear_localization_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_localization_signal'::text);

CREATE VIEW so.nuclear_mt_pseudogene (nuclear_mt_pseudogene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nuclear_mt_pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text);

CREATE VIEW so.nuclear_rim_localization_signal (nuclear_rim_localization_signal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nuclear_rim_localization_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text);

CREATE VIEW so.nuclear_sequence (nuclear_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nuclear_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_sequence'::text);

CREATE VIEW so.nuclease_binding_site (nuclease_binding_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nuclease_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'restriction_enzyme_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'nuclease_binding_site'::text));

CREATE VIEW so.nuclease_hypersensitive_site (nuclease_hypersensitive_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nuclease_hypersensitive_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text));

CREATE VIEW so.nuclease_sensitive_site (nuclease_sensitive_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nuclease_sensitive_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'nuclease_hypersensitive_site'::text) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text));

CREATE VIEW so.nucleic_acid (nucleic_acid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nucleic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((cvterm.name)::text = 'DNA'::text) OR ((cvterm.name)::text = 'RNA'::text)) OR ((cvterm.name)::text = 'morpholino_backbone'::text)) OR ((cvterm.name)::text = 'PNA'::text)) OR ((cvterm.name)::text = 'LNA'::text)) OR ((cvterm.name)::text = 'TNA'::text)) OR ((cvterm.name)::text = 'GNA'::text)) OR ((cvterm.name)::text = 'cDNA'::text)) OR ((cvterm.name)::text = 'genomic_DNA'::text)) OR ((cvterm.name)::text = 'single_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'double_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'R_GNA'::text)) OR ((cvterm.name)::text = 'S_GNA'::text)) OR ((cvterm.name)::text = 'nucleic_acid'::text));

CREATE VIEW so.nucleomorph_gene (nucleomorph_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nucleomorph_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nucleomorph_gene'::text);

CREATE VIEW so.nucleomorphic_chromosome (nucleomorphic_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nucleomorphic_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nucleomorphic_chromosome'::text);

CREATE VIEW so.nucleomorphic_sequence (nucleomorphic_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nucleomorphic_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nucleomorphic_sequence'::text);

CREATE VIEW so.nucleotide_binding_site (nucleotide_binding_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nucleotide_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'miRNA_target_site'::text) OR ((cvterm.name)::text = 'DNA_binding_site'::text)) OR ((cvterm.name)::text = 'primer_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'nucleotide_binding_site'::text));

CREATE VIEW so.nucleotide_match (nucleotide_match_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nucleotide_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((cvterm.name)::text = 'expressed_sequence_match'::text) OR ((cvterm.name)::text = 'cross_genome_match'::text)) OR ((cvterm.name)::text = 'translated_nucleotide_match'::text)) OR ((cvterm.name)::text = 'primer_match'::text)) OR ((cvterm.name)::text = 'EST_match'::text)) OR ((cvterm.name)::text = 'cDNA_match'::text)) OR ((cvterm.name)::text = 'UST_match'::text)) OR ((cvterm.name)::text = 'RST_match'::text)) OR ((cvterm.name)::text = 'nucleotide_match'::text));

CREATE VIEW so.nucleotide_motif (nucleotide_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nucleotide_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'DNA_motif'::text) OR ((cvterm.name)::text = 'RNA_motif'::text)) OR ((cvterm.name)::text = 'PSE_motif'::text)) OR ((cvterm.name)::text = 'CAAT_signal'::text)) OR ((cvterm.name)::text = 'minus_10_signal'::text)) OR ((cvterm.name)::text = 'minus_35_signal'::text)) OR ((cvterm.name)::text = 'DRE_motif'::text)) OR ((cvterm.name)::text = 'E_box_motif'::text)) OR ((cvterm.name)::text = 'INR1_motif'::text)) OR ((cvterm.name)::text = 'GAGA_motif'::text)) OR ((cvterm.name)::text = 'octamer_motif'::text)) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text)) OR ((cvterm.name)::text = 'DCE_SI'::text)) OR ((cvterm.name)::text = 'DCE_SII'::text)) OR ((cvterm.name)::text = 'DCE_SIII'::text)) OR ((cvterm.name)::text = 'minus_12_signal'::text)) OR ((cvterm.name)::text = 'minus_24_signal'::text)) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text)) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_junction_loop'::text)) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_hook_turn'::text)) OR ((cvterm.name)::text = 'nucleotide_motif'::text));

CREATE VIEW so.nucleotide_to_protein_binding_site (nucleotide_to_protein_binding_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS nucleotide_to_protein_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((cvterm.name)::text = 'nuclease_binding_site'::text) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'histone_binding_site'::text)) OR ((cvterm.name)::text = 'insulator_binding_site'::text)) OR ((cvterm.name)::text = 'enhancer_binding_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text));

CREATE VIEW so.octamer_motif (octamer_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS octamer_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'octamer_motif'::text);

CREATE VIEW so.oligo (oligo_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'aptamer'::text) OR ((cvterm.name)::text = 'probe'::text)) OR ((cvterm.name)::text = 'tag'::text)) OR ((cvterm.name)::text = 'ss_oligo'::text)) OR ((cvterm.name)::text = 'ds_oligo'::text)) OR ((cvterm.name)::text = 'DNAzyme'::text)) OR ((cvterm.name)::text = 'synthetic_oligo'::text)) OR ((cvterm.name)::text = 'DNA_aptamer'::text)) OR ((cvterm.name)::text = 'RNA_aptamer'::text)) OR ((cvterm.name)::text = 'microarray_oligo'::text)) OR ((cvterm.name)::text = 'SAGE_tag'::text)) OR ((cvterm.name)::text = 'STS'::text)) OR ((cvterm.name)::text = 'EST'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'five_prime_EST'::text)) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'primer'::text)) OR ((cvterm.name)::text = 'sequencing_primer'::text)) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'RNAi_reagent'::text)) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text)) OR ((cvterm.name)::text = 'morpholino_oligo'::text)) OR ((cvterm.name)::text = 'PNA_oligo'::text)) OR ((cvterm.name)::text = 'LNA_oligo'::text)) OR ((cvterm.name)::text = 'TNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text)) OR ((cvterm.name)::text = 'R_GNA_oligo'::text)) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'oligo'::text));

CREATE VIEW so.oligo_u_tail (oligo_u_tail_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS oligo_u_tail_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'oligo_U_tail'::text);

CREATE VIEW so.one_methyl_3_3_amino_three_carboxypropyl_pseudouridine (one_methyl_3_3_amino_three_carboxypropyl_pseudouridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS one_methyl_3_3_amino_three_carboxypropyl_pseudouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text);

CREATE VIEW so.one_methyladenosine (one_methyladenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS one_methyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_methyladenosine'::text);

CREATE VIEW so.one_methylguanosine (one_methylguanosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS one_methylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_methylguanosine'::text);

CREATE VIEW so.one_methylinosine (one_methylinosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS one_methylinosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_methylinosine'::text);

CREATE VIEW so.one_methylpseudouridine (one_methylpseudouridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS one_methylpseudouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_methylpseudouridine'::text);

CREATE VIEW so.one_two_prime_o_dimethyladenosine (one_two_prime_o_dimethyladenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS one_two_prime_o_dimethyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text);

CREATE VIEW so.one_two_prime_o_dimethylguanosine (one_two_prime_o_dimethylguanosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS one_two_prime_o_dimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text);

CREATE VIEW so.one_two_prime_o_dimethylinosine (one_two_prime_o_dimethylinosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS one_two_prime_o_dimethylinosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text);

CREATE VIEW so.open_chromatin_region (open_chromatin_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS open_chromatin_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'open_chromatin_region'::text);

CREATE VIEW so."operator" (operator_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS operator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'operator'::text);

CREATE VIEW so.operon (operon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS operon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'operon'::text);

CREATE VIEW so.operon_member (operon_member_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS operon_member_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'operon_member'::text);

CREATE VIEW so.orf (orf_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS orf_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'mini_gene'::text) OR ((cvterm.name)::text = 'rescue_mini_gene'::text)) OR ((cvterm.name)::text = 'ORF'::text));

CREATE VIEW so.organelle_sequence (organelle_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS organelle_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((cvterm.name)::text = 'macronuclear_sequence'::text) OR ((cvterm.name)::text = 'micronuclear_sequence'::text)) OR ((cvterm.name)::text = 'mitochondrial_sequence'::text)) OR ((cvterm.name)::text = 'nuclear_sequence'::text)) OR ((cvterm.name)::text = 'nucleomorphic_sequence'::text)) OR ((cvterm.name)::text = 'plastid_sequence'::text)) OR ((cvterm.name)::text = 'mitochondrial_DNA'::text)) OR ((cvterm.name)::text = 'apicoplast_sequence'::text)) OR ((cvterm.name)::text = 'chromoplast_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_sequence'::text)) OR ((cvterm.name)::text = 'cyanelle_sequence'::text)) OR ((cvterm.name)::text = 'leucoplast_sequence'::text)) OR ((cvterm.name)::text = 'proplastid_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_DNA'::text)) OR ((cvterm.name)::text = 'organelle_sequence'::text));

CREATE VIEW so.oric (oric_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS oric_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'oriC'::text);

CREATE VIEW so.origin_of_replication (origin_of_replication_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS origin_of_replication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'D_loop'::text) OR ((cvterm.name)::text = 'ARS'::text)) OR ((cvterm.name)::text = 'oriT'::text)) OR ((cvterm.name)::text = 'amplification_origin'::text)) OR ((cvterm.name)::text = 'oriV'::text)) OR ((cvterm.name)::text = 'oriC'::text)) OR ((cvterm.name)::text = 'origin_of_replication'::text));

CREATE VIEW so.orit (orit_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS orit_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'oriT'::text);

CREATE VIEW so.oriv (oriv_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS oriv_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'oriV'::text);

CREATE VIEW so.orphan (orphan_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS orphan_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'orphan'::text);

CREATE VIEW so.orphan_cds (orphan_cds_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS orphan_cds_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'orphan_CDS'::text);

CREATE VIEW so.orthologous (orthologous_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS orthologous_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'orthologous'::text);

CREATE VIEW so.orthologous_region (orthologous_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS orthologous_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'orthologous_region'::text);

CREATE VIEW so.outron (outron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS outron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'outron'::text);

CREATE VIEW so.overlapping (overlapping_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS overlapping_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((cvterm.name)::text = 'inside_intron'::text) OR ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'antisense'::text)) OR ((cvterm.name)::text = 'inside_intron_antiparallel'::text)) OR ((cvterm.name)::text = 'inside_intron_parallel'::text)) OR ((cvterm.name)::text = 'overlapping'::text));

CREATE VIEW so.overlapping_est_set (overlapping_est_set_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS overlapping_est_set_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'overlapping_EST_set'::text);

CREATE VIEW so.overlapping_feature_set (overlapping_feature_set_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS overlapping_feature_set_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'overlapping_EST_set'::text) OR ((cvterm.name)::text = 'overlapping_feature_set'::text));

CREATE VIEW so.oxys_rna (oxys_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS oxys_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'OxyS_RNA'::text);

CREATE VIEW so.p_element (p_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS p_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'p_element'::text);

CREATE VIEW so.pac (pac_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pac_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'PAC'::text);

CREATE VIEW so.pac_end (pac_end_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pac_end_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'PAC_end'::text);

CREATE VIEW so.paired_end_fragment (paired_end_fragment_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS paired_end_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paired_end_fragment'::text);

CREATE VIEW so.paracentric (paracentric_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS paracentric_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paracentric'::text);

CREATE VIEW so.paracentric_inversion (paracentric_inversion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS paracentric_inversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paracentric_inversion'::text);

CREATE VIEW so.parallel_beta_strand (parallel_beta_strand_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS parallel_beta_strand_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'parallel_beta_strand'::text);

CREATE VIEW so.paralogous (paralogous_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS paralogous_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paralogous'::text);

CREATE VIEW so.paralogous_region (paralogous_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS paralogous_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paralogous_region'::text);

CREATE VIEW so.partially_characterised_chromosomal_mutation (partially_characterised_chromosomal_mutation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS partially_characterised_chromosomal_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text);

CREATE VIEW so.partially_processed_cdna_clone (partially_processed_cdna_clone_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS partially_processed_cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text);

CREATE VIEW so.paternal_uniparental_disomy (paternal_uniparental_disomy_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS paternal_uniparental_disomy_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paternal_uniparental_disomy'::text);

CREATE VIEW so.paternal_variant (paternal_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS paternal_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paternal_variant'::text);

CREATE VIEW so.paternally_imprinted (paternally_imprinted_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS paternally_imprinted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paternally_imprinted'::text);

CREATE VIEW so.paternally_imprinted_gene (paternally_imprinted_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS paternally_imprinted_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paternally_imprinted_gene'::text);

CREATE VIEW so.pathogenic_island (pathogenic_island_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pathogenic_island_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pathogenic_island'::text);

CREATE VIEW so.pcr_product (pcr_product_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pcr_product_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'RAPD'::text) OR ((cvterm.name)::text = 'PCR_product'::text));

CREATE VIEW so.pedigree_specific_variant (pedigree_specific_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pedigree_specific_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pedigree_specific_variant'::text);

CREATE VIEW so.peptide_coil (peptide_coil_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS peptide_coil_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'peptide_coil'::text);

CREATE VIEW so.peptide_collection (peptide_collection_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS peptide_collection_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'peptide_collection'::text);

CREATE VIEW so.peptide_helix (peptide_helix_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS peptide_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'left_handed_peptide_helix'::text) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text));

CREATE VIEW so.peptide_localization_signal (peptide_localization_signal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS peptide_localization_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'signal_peptide'::text) OR ((cvterm.name)::text = 'transit_peptide'::text)) OR ((cvterm.name)::text = 'nuclear_localization_signal'::text)) OR ((cvterm.name)::text = 'endosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'lysosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'nuclear_export_signal'::text)) OR ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text)) OR ((cvterm.name)::text = 'peptide_localization_signal'::text));

CREATE VIEW so.peptidyl (peptidyl_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS peptidyl_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'peptidyl'::text);

CREATE VIEW so.pericentric (pericentric_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pericentric_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pericentric'::text);

CREATE VIEW so.pericentric_inversion (pericentric_inversion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pericentric_inversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pericentric_inversion'::text);

CREATE VIEW so.peroxywybutosine (peroxywybutosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS peroxywybutosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'peroxywybutosine'::text);

CREATE VIEW so.phage_rna_polymerase_promoter (phage_rna_polymerase_promoter_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS phage_rna_polymerase_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text));

CREATE VIEW so.phage_sequence (phage_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS phage_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'phage_sequence'::text);

CREATE VIEW so.phagemid (phagemid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS phagemid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'phagemid'::text);

CREATE VIEW so.phe_trna_primary_transcript (phe_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS phe_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text);

CREATE VIEW so.phenylalanine (phenylalanine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS phenylalanine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'phenylalanine'::text);

CREATE VIEW so.phenylalanyl_trna (phenylalanyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS phenylalanyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'phenylalanyl_tRNA'::text);

CREATE VIEW so.pi_helix (pi_helix_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pi_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pi_helix'::text);

CREATE VIEW so.pirna (pirna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pirna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'piRNA'::text);

CREATE VIEW so.pirna_gene (pirna_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pirna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'piRNA_gene'::text);

CREATE VIEW so.plasmid (plasmid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS plasmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((cvterm.name)::text = 'engineered_plasmid'::text) OR ((cvterm.name)::text = 'episome'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'plasmid'::text));

CREATE VIEW so.plasmid_gene (plasmid_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS plasmid_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plasmid_gene'::text);

CREATE VIEW so.plasmid_location (plasmid_location_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS plasmid_location_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plasmid_location'::text);

CREATE VIEW so.plasmid_vector (plasmid_vector_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS plasmid_vector_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plasmid_vector'::text);

CREATE VIEW so.plastid_gene (plastid_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS plastid_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'apicoplast_gene'::text) OR ((cvterm.name)::text = 'ct_gene'::text)) OR ((cvterm.name)::text = 'chromoplast_gene'::text)) OR ((cvterm.name)::text = 'cyanelle_gene'::text)) OR ((cvterm.name)::text = 'leucoplast_gene'::text)) OR ((cvterm.name)::text = 'proplastid_gene'::text)) OR ((cvterm.name)::text = 'plastid_gene'::text));

CREATE VIEW so.plastid_sequence (plastid_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS plastid_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'apicoplast_sequence'::text) OR ((cvterm.name)::text = 'chromoplast_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_sequence'::text)) OR ((cvterm.name)::text = 'cyanelle_sequence'::text)) OR ((cvterm.name)::text = 'leucoplast_sequence'::text)) OR ((cvterm.name)::text = 'proplastid_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_DNA'::text)) OR ((cvterm.name)::text = 'plastid_sequence'::text));

CREATE VIEW so.plus_1_frameshift (plus_1_frameshift_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS plus_1_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_1_frameshift'::text);

CREATE VIEW so.plus_1_frameshift_variant (plus_1_frameshift_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS plus_1_frameshift_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_1_frameshift_variant'::text);

CREATE VIEW so.plus_1_translational_frameshift (plus_1_translational_frameshift_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS plus_1_translational_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_1_translational_frameshift'::text);

CREATE VIEW so.plus_1_translationally_frameshifted (plus_1_translationally_frameshifted_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS plus_1_translationally_frameshifted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text);

CREATE VIEW so.plus_2_frameshift_variant (plus_2_frameshift_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS plus_2_frameshift_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_2_frameshift variant'::text);

CREATE VIEW so.plus_2_framshift (plus_2_framshift_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS plus_2_framshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_2_framshift'::text);

CREATE VIEW so.plus_2_translational_frameshift (plus_2_translational_frameshift_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS plus_2_translational_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_2_translational_frameshift'::text);

CREATE VIEW so.pna (pna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'PNA'::text);

CREATE VIEW so.pna_oligo (pna_oligo_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pna_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'PNA_oligo'::text);

CREATE VIEW so.point_centromere (point_centromere_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS point_centromere_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'point_centromere'::text);

CREATE VIEW so.point_mutation (point_mutation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS point_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'point_mutation'::text);

CREATE VIEW so.polinton (polinton_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polinton_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polinton'::text);

CREATE VIEW so.polya_primed_cdna_clone (polya_primed_cdna_clone_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polya_primed_cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text);

CREATE VIEW so.polya_sequence (polya_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polya_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polyA_sequence'::text);

CREATE VIEW so.polya_signal_sequence (polya_signal_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polya_signal_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polyA_signal_sequence'::text);

CREATE VIEW so.polya_site (polya_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polya_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polyA_site'::text);

CREATE VIEW so.polyadenylated (polyadenylated_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polyadenylated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polyadenylated'::text);

CREATE VIEW so.polyadenylated_mrna (polyadenylated_mrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polyadenylated_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polyadenylated_mRNA'::text);

CREATE VIEW so.polyadenylation_variant (polyadenylation_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polyadenylation_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'increased_polyadenylation_variant'::text) OR ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'polyadenylation_variant'::text));

CREATE VIEW so.polycistronic (polycistronic_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polycistronic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'dicistronic'::text) OR ((cvterm.name)::text = 'polycistronic'::text));

CREATE VIEW so.polycistronic_mrna (polycistronic_mrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polycistronic_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text));

CREATE VIEW so.polycistronic_primary_transcript (polycistronic_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polycistronic_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text));

CREATE VIEW so.polycistronic_transcript (polycistronic_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polycistronic_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'dicistronic_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_transcript'::text));

CREATE VIEW so.polymer_attribute (polymer_attribute_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polymer_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((cvterm.name)::text = 'nucleic_acid'::text) OR ((cvterm.name)::text = 'synthetic_sequence'::text)) OR ((cvterm.name)::text = 'topology_attribute'::text)) OR ((cvterm.name)::text = 'peptidyl'::text)) OR ((cvterm.name)::text = 'DNA'::text)) OR ((cvterm.name)::text = 'RNA'::text)) OR ((cvterm.name)::text = 'morpholino_backbone'::text)) OR ((cvterm.name)::text = 'PNA'::text)) OR ((cvterm.name)::text = 'LNA'::text)) OR ((cvterm.name)::text = 'TNA'::text)) OR ((cvterm.name)::text = 'GNA'::text)) OR ((cvterm.name)::text = 'cDNA'::text)) OR ((cvterm.name)::text = 'genomic_DNA'::text)) OR ((cvterm.name)::text = 'single_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'double_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'R_GNA'::text)) OR ((cvterm.name)::text = 'S_GNA'::text)) OR ((cvterm.name)::text = 'random_sequence'::text)) OR ((cvterm.name)::text = 'designed_sequence'::text)) OR ((cvterm.name)::text = 'linear'::text)) OR ((cvterm.name)::text = 'circular'::text)) OR ((cvterm.name)::text = 'polymer_attribute'::text));

CREATE VIEW so.polymerase_synthesis_read (polymerase_synthesis_read_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polymerase_synthesis_read_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polymerase_synthesis_read'::text);

CREATE VIEW so.polymorphic_sequence_variant (polymorphic_sequence_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polymorphic_sequence_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polymorphic_sequence_variant'::text);

CREATE VIEW so.polymorphic_variant (polymorphic_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polymorphic_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polymorphic_variant'::text);

CREATE VIEW so.polypeptide (polypeptide_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide'::text);

CREATE VIEW so.polypeptide_binding_motif (polypeptide_binding_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_binding_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_binding_motif'::text);

CREATE VIEW so.polypeptide_calcium_ion_contact_site (polypeptide_calcium_ion_contact_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_calcium_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text);

CREATE VIEW so.polypeptide_catalytic_motif (polypeptide_catalytic_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_catalytic_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text);

CREATE VIEW so.polypeptide_cobalt_ion_contact_site (polypeptide_cobalt_ion_contact_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_cobalt_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text);

CREATE VIEW so.polypeptide_conserved_motif (polypeptide_conserved_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_conserved_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_conserved_motif'::text);

CREATE VIEW so.polypeptide_conserved_region (polypeptide_conserved_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_conserved_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'polypeptide_domain'::text) OR ((cvterm.name)::text = 'polypeptide_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_repeat'::text)) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text)) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_region'::text));

CREATE VIEW so.polypeptide_copper_ion_contact_site (polypeptide_copper_ion_contact_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_copper_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text);

CREATE VIEW so.polypeptide_dna_contact (polypeptide_dna_contact_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_dna_contact_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_DNA_contact'::text);

CREATE VIEW so.polypeptide_domain (polypeptide_domain_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_domain_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_domain'::text);

CREATE VIEW so.polypeptide_function_variant (polypeptide_function_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_function_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'polypeptide_gain_of_function_variant'::text) OR ((cvterm.name)::text = 'polypeptide_localization_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_loss_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_post_translational_processing_variant'::text)) OR ((cvterm.name)::text = 'inactive_ligand_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text)) OR ((cvterm.name)::text = 'inactive_catalytic_site'::text)) OR ((cvterm.name)::text = 'polypeptide_function_variant'::text));

CREATE VIEW so.polypeptide_fusion (polypeptide_fusion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_fusion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_fusion'::text);

CREATE VIEW so.polypeptide_gain_of_function_variant (polypeptide_gain_of_function_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_gain_of_function_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_gain_of_function_variant'::text);

CREATE VIEW so.polypeptide_iron_ion_contact_site (polypeptide_iron_ion_contact_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_iron_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text);

CREATE VIEW so.polypeptide_ligand_contact (polypeptide_ligand_contact_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_ligand_contact_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_ligand_contact'::text);

CREATE VIEW so.polypeptide_localization_variant (polypeptide_localization_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_localization_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_localization_variant'::text);

CREATE VIEW so.polypeptide_loss_of_function_variant (polypeptide_loss_of_function_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_loss_of_function_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'inactive_ligand_binding_site'::text) OR ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text)) OR ((cvterm.name)::text = 'inactive_catalytic_site'::text)) OR ((cvterm.name)::text = 'polypeptide_loss_of_function_variant'::text));

CREATE VIEW so.polypeptide_magnesium_ion_contact_site (polypeptide_magnesium_ion_contact_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_magnesium_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text);

CREATE VIEW so.polypeptide_manganese_ion_contact_site (polypeptide_manganese_ion_contact_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_manganese_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text);

CREATE VIEW so.polypeptide_metal_contact (polypeptide_metal_contact_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_metal_contact_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text));

CREATE VIEW so.polypeptide_molybdenum_ion_contact_site (polypeptide_molybdenum_ion_contact_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_molybdenum_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text);

CREATE VIEW so.polypeptide_motif (polypeptide_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'biochemical_region_of_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text)) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_motif'::text));

CREATE VIEW so.polypeptide_nest_left_right_motif (polypeptide_nest_left_right_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_nest_left_right_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text);

CREATE VIEW so.polypeptide_nest_motif (polypeptide_nest_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_nest_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text));

CREATE VIEW so.polypeptide_nest_right_left_motif (polypeptide_nest_right_left_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_nest_right_left_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text);

CREATE VIEW so.polypeptide_nickel_ion_contact_site (polypeptide_nickel_ion_contact_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_nickel_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text);

CREATE VIEW so.polypeptide_partial_loss_of_function (polypeptide_partial_loss_of_function_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_partial_loss_of_function_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text);

CREATE VIEW so.polypeptide_post_translational_processing_variant (polypeptide_post_translational_processing_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_post_translational_processing_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_post_translational_processing_variant'::text);

CREATE VIEW so.polypeptide_region (polypeptide_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'mature_protein_region'::text) OR ((cvterm.name)::text = 'immature_peptide_region'::text)) OR ((cvterm.name)::text = 'compositionally_biased_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_region'::text)) OR ((cvterm.name)::text = 'polypeptide_variation_site'::text)) OR ((cvterm.name)::text = 'peptide_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_peptide_region'::text)) OR ((cvterm.name)::text = 'hydrophobic_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_region'::text)) OR ((cvterm.name)::text = 'active_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'membrane_structure'::text)) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text)) OR ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text)) OR ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'membrane_peptide_loop'::text)) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'asx_motif'::text)) OR ((cvterm.name)::text = 'beta_bulge'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text)) OR ((cvterm.name)::text = 'beta_strand'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text)) OR ((cvterm.name)::text = 'serine_threonine_motif'::text)) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text)) OR ((cvterm.name)::text = 'alpha_beta_motif'::text)) OR ((cvterm.name)::text = 'peptide_coil'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text)) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text)) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'asx_turn'::text)) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'coiled_coil'::text)) OR ((cvterm.name)::text = 'helix_turn_helix'::text)) OR ((cvterm.name)::text = 'natural_variant_site'::text)) OR ((cvterm.name)::text = 'mutated_variant_site'::text)) OR ((cvterm.name)::text = 'alternate_sequence_site'::text)) OR ((cvterm.name)::text = 'signal_peptide'::text)) OR ((cvterm.name)::text = 'transit_peptide'::text)) OR ((cvterm.name)::text = 'nuclear_localization_signal'::text)) OR ((cvterm.name)::text = 'endosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'lysosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'nuclear_export_signal'::text)) OR ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_initiator_methionine'::text)) OR ((cvterm.name)::text = 'intein'::text)) OR ((cvterm.name)::text = 'propeptide_cleavage_site'::text)) OR ((cvterm.name)::text = 'propeptide'::text)) OR ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text)) OR ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text)) OR ((cvterm.name)::text = 'n_terminal_region'::text)) OR ((cvterm.name)::text = 'c_terminal_region'::text)) OR ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'polypeptide_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_repeat'::text)) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text)) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_region'::text));

CREATE VIEW so.polypeptide_repeat (polypeptide_repeat_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_repeat'::text);

CREATE VIEW so.polypeptide_secondary_structure (polypeptide_secondary_structure_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_secondary_structure_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'asx_motif'::text) OR ((cvterm.name)::text = 'beta_bulge'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text)) OR ((cvterm.name)::text = 'beta_strand'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text)) OR ((cvterm.name)::text = 'serine_threonine_motif'::text)) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text)) OR ((cvterm.name)::text = 'alpha_beta_motif'::text)) OR ((cvterm.name)::text = 'peptide_coil'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text)) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text)) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'asx_turn'::text)) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text));

CREATE VIEW so.polypeptide_sequence_variant (polypeptide_sequence_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_sequence_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((cvterm.name)::text = 'amino_acid_deletion'::text) OR ((cvterm.name)::text = 'amino_acid_insertion'::text)) OR ((cvterm.name)::text = 'amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide'::text)) OR ((cvterm.name)::text = 'polypeptide_fusion'::text)) OR ((cvterm.name)::text = 'polypeptide_truncation'::text)) OR ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'polypeptide_sequence_variant'::text));

CREATE VIEW so.polypeptide_sequencing_information (polypeptide_sequencing_information_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_sequencing_information_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'non_adjacent_residues'::text) OR ((cvterm.name)::text = 'non_terminal_residue'::text)) OR ((cvterm.name)::text = 'sequence_conflict'::text)) OR ((cvterm.name)::text = 'sequence_uncertainty'::text)) OR ((cvterm.name)::text = 'contig_collection'::text)) OR ((cvterm.name)::text = 'polypeptide_sequencing_information'::text));

CREATE VIEW so.polypeptide_structural_motif (polypeptide_structural_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_structural_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'coiled_coil'::text) OR ((cvterm.name)::text = 'helix_turn_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text));

CREATE VIEW so.polypeptide_structural_region (polypeptide_structural_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_structural_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'polypeptide_domain'::text) OR ((cvterm.name)::text = 'membrane_structure'::text)) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text)) OR ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text)) OR ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'membrane_peptide_loop'::text)) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'asx_motif'::text)) OR ((cvterm.name)::text = 'beta_bulge'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text)) OR ((cvterm.name)::text = 'beta_strand'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text)) OR ((cvterm.name)::text = 'serine_threonine_motif'::text)) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text)) OR ((cvterm.name)::text = 'alpha_beta_motif'::text)) OR ((cvterm.name)::text = 'peptide_coil'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text)) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text)) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'asx_turn'::text)) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'coiled_coil'::text)) OR ((cvterm.name)::text = 'helix_turn_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_region'::text));

CREATE VIEW so.polypeptide_truncation (polypeptide_truncation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_truncation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_truncation'::text);

CREATE VIEW so.polypeptide_tungsten_ion_contact_site (polypeptide_tungsten_ion_contact_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_tungsten_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text);

CREATE VIEW so.polypeptide_turn_motif (polypeptide_turn_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_turn_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((cvterm.name)::text = 'asx_turn'::text) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text));

CREATE VIEW so.polypeptide_variation_site (polypeptide_variation_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_variation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'natural_variant_site'::text) OR ((cvterm.name)::text = 'mutated_variant_site'::text)) OR ((cvterm.name)::text = 'alternate_sequence_site'::text)) OR ((cvterm.name)::text = 'polypeptide_variation_site'::text));

CREATE VIEW so.polypeptide_zinc_ion_contact_site (polypeptide_zinc_ion_contact_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypeptide_zinc_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text);

CREATE VIEW so.polyploid (polyploid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polyploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'autopolyploid'::text) OR ((cvterm.name)::text = 'allopolyploid'::text)) OR ((cvterm.name)::text = 'polyploid'::text));

CREATE VIEW so.polypyrimidine_tract (polypyrimidine_tract_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS polypyrimidine_tract_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypyrimidine_tract'::text);

CREATE VIEW so.population_specific_variant (population_specific_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS population_specific_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'population_specific_variant'::text);

CREATE VIEW so.positive_sense_ssrna_viral_sequence (positive_sense_ssrna_viral_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS positive_sense_ssrna_viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text);

CREATE VIEW so.positively_autoregulated (positively_autoregulated_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS positively_autoregulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'positively_autoregulated'::text);

CREATE VIEW so.positively_autoregulated_gene (positively_autoregulated_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS positively_autoregulated_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'positively_autoregulated_gene'::text);

CREATE VIEW so.possible_assembly_error (possible_assembly_error_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS possible_assembly_error_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'possible_assembly_error'::text);

CREATE VIEW so.possible_base_call_error (possible_base_call_error_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS possible_base_call_error_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'possible_base_call_error'::text);

CREATE VIEW so.post_translationally_modified_region (post_translationally_modified_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS post_translationally_modified_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'histone_modification'::text) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text));

CREATE VIEW so.post_translationally_regulated (post_translationally_regulated_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS post_translationally_regulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated'::text));

CREATE VIEW so.post_translationally_regulated_by_protein_modification (post_translationally_regulated_by_protein_modification_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS post_translationally_regulated_by_protein_modification_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text);

CREATE VIEW so.post_translationally_regulated_by_protein_stability (post_translationally_regulated_by_protein_stability_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS post_translationally_regulated_by_protein_stability_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text);

CREATE VIEW so.post_translationally_regulated_gene (post_translationally_regulated_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS post_translationally_regulated_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'post_translationally_regulated_gene'::text);

CREATE VIEW so.pre_edited_mrna (pre_edited_mrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pre_edited_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pre_edited_mRNA'::text);

CREATE VIEW so.pre_edited_region (pre_edited_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pre_edited_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pre_edited_region'::text);

CREATE VIEW so.pre_mirna (pre_mirna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pre_mirna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pre_miRNA'::text);

CREATE VIEW so.predicted (predicted_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS predicted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'supported_by_sequence_similarity'::text) OR ((cvterm.name)::text = 'orphan'::text)) OR ((cvterm.name)::text = 'predicted_by_ab_initio_computation'::text)) OR ((cvterm.name)::text = 'supported_by_domain_match'::text)) OR ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text)) OR ((cvterm.name)::text = 'predicted'::text));

CREATE VIEW so.predicted_by_ab_initio_computation (predicted_by_ab_initio_computation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS predicted_by_ab_initio_computation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'predicted_by_ab_initio_computation'::text);

CREATE VIEW so.predicted_gene (predicted_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS predicted_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'predicted_gene'::text);

CREATE VIEW so.primary_transcript (primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'protein_coding_primary_transcript'::text) OR ((cvterm.name)::text = 'nc_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text)) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text)) OR ((cvterm.name)::text = 'capped_primary_transcript'::text)) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text)) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'primary_transcript'::text));

CREATE VIEW so.primary_transcript_region (primary_transcript_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS primary_transcript_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'splice_site'::text) OR ((cvterm.name)::text = 'intron'::text)) OR ((cvterm.name)::text = 'clip'::text)) OR ((cvterm.name)::text = 'TSS'::text)) OR ((cvterm.name)::text = 'transcription_end_site'::text)) OR ((cvterm.name)::text = 'spliced_leader_RNA'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text)) OR ((cvterm.name)::text = 'intron_domain'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'outron'::text)) OR ((cvterm.name)::text = 'cis_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_site'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'five_prime_intron'::text)) OR ((cvterm.name)::text = 'interior_intron'::text)) OR ((cvterm.name)::text = 'three_prime_intron'::text)) OR ((cvterm.name)::text = 'twintron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text)) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'group_I_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'U2_intron'::text)) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'archaeal_intron'::text)) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'five_prime_clip'::text)) OR ((cvterm.name)::text = 'three_prime_clip'::text)) OR ((cvterm.name)::text = 'major_TSS'::text)) OR ((cvterm.name)::text = 'minor_TSS'::text)) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'branch_site'::text)) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text)) OR ((cvterm.name)::text = 'internal_guide_sequence'::text)) OR ((cvterm.name)::text = 'mirtron'::text)) OR ((cvterm.name)::text = 'pre_miRNA'::text)) OR ((cvterm.name)::text = 'miRNA_stem'::text)) OR ((cvterm.name)::text = 'miRNA_loop'::text)) OR ((cvterm.name)::text = 'miRNA_antiguide'::text)) OR ((cvterm.name)::text = 'primary_transcript_region'::text));

CREATE VIEW so.primer (primer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS primer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'sequencing_primer'::text) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'primer'::text));

CREATE VIEW so.primer_binding_site (primer_binding_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS primer_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'primer_binding_site'::text);

CREATE VIEW so.primer_match (primer_match_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS primer_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'primer_match'::text);

CREATE VIEW so.probe (probe_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS probe_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'microarray_oligo'::text) OR ((cvterm.name)::text = 'probe'::text));

CREATE VIEW so.processed_pseudogene (processed_pseudogene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS processed_pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'processed_pseudogene'::text);

CREATE VIEW so.processed_transcript (processed_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS processed_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'processed_transcript'::text);

CREATE VIEW so.proline (proline_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS proline_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'proline'::text);

CREATE VIEW so.proline_trna_primary_transcript (proline_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS proline_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text);

CREATE VIEW so.prolyl_trna (prolyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS prolyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'prolyl_tRNA'::text);

CREATE VIEW so.promoter (promoter_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((cvterm.name)::text = 'bidirectional_promoter'::text) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'promoter'::text));

CREATE VIEW so.promoter_element (promoter_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS promoter_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((cvterm.name)::text = 'GC_rich_promoter_region'::text) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text));

CREATE VIEW so.promoter_targeting_sequence (promoter_targeting_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS promoter_targeting_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'promoter_targeting_sequence'::text);

CREATE VIEW so.promoter_trap_construct (promoter_trap_construct_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS promoter_trap_construct_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'promoter_trap_construct'::text);

CREATE VIEW so.propeptide (propeptide_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS propeptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'propeptide'::text);

CREATE VIEW so.propeptide_cleavage_site (propeptide_cleavage_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS propeptide_cleavage_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'propeptide_cleavage_site'::text);

CREATE VIEW so.prophage (prophage_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS prophage_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'prophage'::text);

CREATE VIEW so.proplastid_gene (proplastid_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS proplastid_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'proplastid_gene'::text);

CREATE VIEW so.proplastid_sequence (proplastid_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS proplastid_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'proplastid_sequence'::text);

CREATE VIEW so.protein_binding_site (protein_binding_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS protein_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((cvterm.name)::text = 'protein_protein_contact'::text) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_binding_site'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'histone_binding_site'::text)) OR ((cvterm.name)::text = 'insulator_binding_site'::text)) OR ((cvterm.name)::text = 'enhancer_binding_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'protein_binding_site'::text));

CREATE VIEW so.protein_coding (protein_coding_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS protein_coding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'intein_containing'::text) OR ((cvterm.name)::text = 'protein_coding'::text));

CREATE VIEW so.protein_coding_gene (protein_coding_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS protein_coding_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text) OR ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_edited_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'protein_coding_gene'::text));

CREATE VIEW so.protein_coding_primary_transcript (protein_coding_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS protein_coding_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'pre_edited_mRNA'::text) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text));

CREATE VIEW so.protein_match (protein_match_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS protein_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'protein_match'::text);

CREATE VIEW so.protein_protein_contact (protein_protein_contact_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS protein_protein_contact_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'protein_protein_contact'::text);

CREATE VIEW so.proviral_gene (proviral_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS proviral_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'endogenous_retroviral_gene'::text) OR ((cvterm.name)::text = 'proviral_gene'::text));

CREATE VIEW so.proviral_location (proviral_location_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS proviral_location_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'endogenous_retroviral_sequence'::text) OR ((cvterm.name)::text = 'proviral_location'::text));

CREATE VIEW so.proviral_region (proviral_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS proviral_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'prophage'::text) OR ((cvterm.name)::text = 'proviral_region'::text));

CREATE VIEW so.proximal_promoter_element (proximal_promoter_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS proximal_promoter_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'proximal_promoter_element'::text);

CREATE VIEW so.pse_motif (pse_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pse_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'PSE_motif'::text);

CREATE VIEW so.pseudogene (pseudogene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'processed_pseudogene'::text) OR ((cvterm.name)::text = 'non_processed_pseudogene'::text)) OR ((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text)) OR ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text)) OR ((cvterm.name)::text = 'cassette_pseudogene'::text)) OR ((cvterm.name)::text = 'duplicated_pseudogene'::text)) OR ((cvterm.name)::text = 'unitary_pseudogene'::text)) OR ((cvterm.name)::text = 'pseudogene'::text));

CREATE VIEW so.pseudogene_by_unequal_crossing_over (pseudogene_by_unequal_crossing_over_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pseudogene_by_unequal_crossing_over_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text);

CREATE VIEW so.pseudogenic_exon (pseudogenic_exon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pseudogenic_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudogenic_exon'::text);

CREATE VIEW so.pseudogenic_gene_segment (pseudogenic_gene_segment_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pseudogenic_gene_segment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudogenic_gene_segment'::text);

CREATE VIEW so.pseudogenic_region (pseudogenic_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pseudogenic_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'decayed_exon'::text) OR ((cvterm.name)::text = 'pseudogenic_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_transcript'::text)) OR ((cvterm.name)::text = 'pseudogenic_rRNA'::text)) OR ((cvterm.name)::text = 'pseudogenic_tRNA'::text)) OR ((cvterm.name)::text = 'pseudogenic_region'::text));

CREATE VIEW so.pseudogenic_rrna (pseudogenic_rrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pseudogenic_rrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudogenic_rRNA'::text);

CREATE VIEW so.pseudogenic_transcript (pseudogenic_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pseudogenic_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudogenic_transcript'::text);

CREATE VIEW so.pseudogenic_trna (pseudogenic_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pseudogenic_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudogenic_tRNA'::text);

CREATE VIEW so.pseudoknot (pseudoknot_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pseudoknot_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'recoding_pseudoknot'::text) OR ((cvterm.name)::text = 'H_pseudoknot'::text)) OR ((cvterm.name)::text = 'pseudoknot'::text));

CREATE VIEW so.pseudouridine (pseudouridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pseudouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudouridine'::text);

CREATE VIEW so.pseudouridylation_guide_snorna (pseudouridylation_guide_snorna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pseudouridylation_guide_snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text);

CREATE VIEW so.purine_to_pyrimidine_transversion (purine_to_pyrimidine_transversion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS purine_to_pyrimidine_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'A_to_C_transversion'::text) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text));

CREATE VIEW so.purine_transition (purine_transition_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS purine_transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'A_to_G_transition'::text) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text));

CREATE VIEW so.pyrimidine_to_purine_transversion (pyrimidine_to_purine_transversion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pyrimidine_to_purine_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'C_to_A_transversion'::text) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text));

CREATE VIEW so.pyrimidine_transition (pyrimidine_transition_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pyrimidine_transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'C_to_T_transition'::text) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text));

CREATE VIEW so.pyrosequenced_read (pyrosequenced_read_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pyrosequenced_read_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pyrosequenced_read'::text);

CREATE VIEW so.pyrrolysine (pyrrolysine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pyrrolysine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pyrrolysine'::text);

CREATE VIEW so.pyrrolysine_trna_primary_transcript (pyrrolysine_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pyrrolysine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text);

CREATE VIEW so.pyrrolysyl_trna (pyrrolysyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS pyrrolysyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text);

CREATE VIEW so.qtl (qtl_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS qtl_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'QTL'::text);

CREATE VIEW so.quality_value (quality_value_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS quality_value_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'quality_value'::text);

CREATE VIEW so.quantitative_variant (quantitative_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS quantitative_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'quantitative_variant'::text);

CREATE VIEW so.queuosine (queuosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS queuosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'queuosine'::text);

CREATE VIEW so.r_five_prime_ltr_region (r_five_prime_ltr_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS r_five_prime_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'R_five_prime_LTR_region'::text);

CREATE VIEW so.r_gna (r_gna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS r_gna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'R_GNA'::text);

CREATE VIEW so.r_gna_oligo (r_gna_oligo_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS r_gna_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'R_GNA_oligo'::text);

CREATE VIEW so.r_ltr_region (r_ltr_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS r_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'R_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'R_LTR_region'::text));

CREATE VIEW so.r_three_prime_ltr_region (r_three_prime_ltr_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS r_three_prime_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'R_three_prime_LTR_region'::text);

CREATE VIEW so.random_sequence (random_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS random_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'random_sequence'::text);

CREATE VIEW so.rapd (rapd_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rapd_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RAPD'::text);

CREATE VIEW so.rare_variant (rare_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rare_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rare_variant'::text);

CREATE VIEW so.rasirna (rasirna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rasirna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rasiRNA'::text);

CREATE VIEW so.rate_of_transcription_variant (rate_of_transcription_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rate_of_transcription_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'increased_transcription_rate_variant'::text) OR ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'rate_of_transcription_variant'::text));

CREATE VIEW so."read" (read_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS read_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'read_pair'::text) OR ((cvterm.name)::text = 'contig_read'::text)) OR ((cvterm.name)::text = 'BAC_end'::text)) OR ((cvterm.name)::text = 'dye_terminator_read'::text)) OR ((cvterm.name)::text = 'pyrosequenced_read'::text)) OR ((cvterm.name)::text = 'ligation_based_read'::text)) OR ((cvterm.name)::text = 'polymerase_synthesis_read'::text)) OR ((cvterm.name)::text = 'PAC_end'::text)) OR ((cvterm.name)::text = 'YAC_end'::text)) OR ((cvterm.name)::text = 'clone_end'::text)) OR ((cvterm.name)::text = 'read'::text));

CREATE VIEW so.read_pair (read_pair_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS read_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'read_pair'::text);

CREATE VIEW so.reading_frame (reading_frame_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS reading_frame_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'ORF'::text) OR ((cvterm.name)::text = 'blocked_reading_frame'::text)) OR ((cvterm.name)::text = 'mini_gene'::text)) OR ((cvterm.name)::text = 'rescue_mini_gene'::text)) OR ((cvterm.name)::text = 'reading_frame'::text));

CREATE VIEW so.reagent (reagent_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS reagent_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'PCR_product'::text) OR ((cvterm.name)::text = 'clone'::text)) OR ((cvterm.name)::text = 'rescue_region'::text)) OR ((cvterm.name)::text = 'oligo'::text)) OR ((cvterm.name)::text = 'clone_insert'::text)) OR ((cvterm.name)::text = 'cloned_region'::text)) OR ((cvterm.name)::text = 'databank_entry'::text)) OR ((cvterm.name)::text = 'RAPD'::text)) OR ((cvterm.name)::text = 'genomic_clone'::text)) OR ((cvterm.name)::text = 'cDNA_clone'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'validated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text)) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text)) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'aptamer'::text)) OR ((cvterm.name)::text = 'probe'::text)) OR ((cvterm.name)::text = 'tag'::text)) OR ((cvterm.name)::text = 'ss_oligo'::text)) OR ((cvterm.name)::text = 'ds_oligo'::text)) OR ((cvterm.name)::text = 'DNAzyme'::text)) OR ((cvterm.name)::text = 'synthetic_oligo'::text)) OR ((cvterm.name)::text = 'DNA_aptamer'::text)) OR ((cvterm.name)::text = 'RNA_aptamer'::text)) OR ((cvterm.name)::text = 'microarray_oligo'::text)) OR ((cvterm.name)::text = 'SAGE_tag'::text)) OR ((cvterm.name)::text = 'STS'::text)) OR ((cvterm.name)::text = 'EST'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'five_prime_EST'::text)) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'primer'::text)) OR ((cvterm.name)::text = 'sequencing_primer'::text)) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'RNAi_reagent'::text)) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text)) OR ((cvterm.name)::text = 'morpholino_oligo'::text)) OR ((cvterm.name)::text = 'PNA_oligo'::text)) OR ((cvterm.name)::text = 'LNA_oligo'::text)) OR ((cvterm.name)::text = 'TNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text)) OR ((cvterm.name)::text = 'R_GNA_oligo'::text)) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'cloned_cDNA_insert'::text)) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'reagent'::text));

CREATE VIEW so.rearranged_at_dna_level (rearranged_at_dna_level_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rearranged_at_dna_level_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rearranged_at_DNA_level'::text);

CREATE VIEW so.reciprocal (reciprocal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS reciprocal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'reciprocal'::text);

CREATE VIEW so.reciprocal_chromosomal_translocation (reciprocal_chromosomal_translocation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS reciprocal_chromosomal_translocation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text);

CREATE VIEW so.recoded (recoded_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS recoded_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'codon_redefined'::text) OR ((cvterm.name)::text = 'recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'recoded'::text));

CREATE VIEW so.recoded_by_translational_bypass (recoded_by_translational_bypass_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS recoded_by_translational_bypass_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recoded_by_translational_bypass'::text);

CREATE VIEW so.recoded_codon (recoded_codon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS recoded_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'stop_codon_read_through'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text));

CREATE VIEW so.recoded_mrna (recoded_mrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS recoded_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text));

CREATE VIEW so.recoding_pseudoknot (recoding_pseudoknot_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS recoding_pseudoknot_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recoding_pseudoknot'::text);

CREATE VIEW so.recoding_stimulatory_region (recoding_stimulatory_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS recoding_stimulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text));

CREATE VIEW so.recombination_feature (recombination_feature_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS recombination_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'recombination_hotspot'::text) OR ((cvterm.name)::text = 'haplotype_block'::text)) OR ((cvterm.name)::text = 'sequence_rearrangement_feature'::text)) OR ((cvterm.name)::text = 'iDNA'::text)) OR ((cvterm.name)::text = 'specific_recombination_site'::text)) OR ((cvterm.name)::text = 'chromosome_breakage_sequence'::text)) OR ((cvterm.name)::text = 'internal_eliminated_sequence'::text)) OR ((cvterm.name)::text = 'macronucleus_destined_segment'::text)) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text)) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text)) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'recombination_feature'::text));

CREATE VIEW so.recombination_feature_of_rearranged_gene (recombination_feature_of_rearranged_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS recombination_feature_of_rearranged_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text));

CREATE VIEW so.recombination_hotspot (recombination_hotspot_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS recombination_hotspot_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recombination_hotspot'::text);

CREATE VIEW so.recombination_regulatory_region (recombination_regulatory_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS recombination_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recombination_regulatory_region'::text);

CREATE VIEW so.recombination_signal_sequence (recombination_signal_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS recombination_signal_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recombination_signal_sequence'::text);

CREATE VIEW so.recombinationally_inverted_gene (recombinationally_inverted_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS recombinationally_inverted_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recombinationally_inverted_gene'::text);

CREATE VIEW so.recombinationally_rearranged (recombinationally_rearranged_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS recombinationally_rearranged_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recombinationally_rearranged'::text);

CREATE VIEW so.recombinationally_rearranged_gene (recombinationally_rearranged_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS recombinationally_rearranged_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'recombinationally_inverted_gene'::text) OR ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_gene'::text));

CREATE VIEW so.recombinationally_rearranged_vertebrate_immune_system_gene (recombinationally_rearranged_vertebrate_immune_system_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS recombinationally_rearranged_vertebrate_immune_system_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text);

CREATE VIEW so.recursive_splice_site (recursive_splice_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS recursive_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recursive_splice_site'::text);

CREATE VIEW so.reference_genome (reference_genome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS reference_genome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'reference_genome'::text);

CREATE VIEW so.region (region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
cvterm.name)::text = 'biomaterial_region'::text) OR ((cvterm.name)::text = 'experimental_feature'::text)) OR ((cvterm.name)::text = 'biological_region'::text)) OR ((cvterm.name)::text = 'topologically_defined_region'::text)) OR ((cvterm.name)::text = 'reagent'::text)) OR ((cvterm.name)::text = 'engineered_region'::text)) OR ((cvterm.name)::text = 'PCR_product'::text)) OR ((cvterm.name)::text = 'clone'::text)) OR ((cvterm.name)::text = 'rescue_region'::text)) OR ((cvterm.name)::text = 'oligo'::text)) OR ((cvterm.name)::text = 'clone_insert'::text)) OR ((cvterm.name)::text = 'cloned_region'::text)) OR ((cvterm.name)::text = 'databank_entry'::text)) OR ((cvterm.name)::text = 'RAPD'::text)) OR ((cvterm.name)::text = 'genomic_clone'::text)) OR ((cvterm.name)::text = 'cDNA_clone'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'validated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text)) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text)) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'aptamer'::text)) OR ((cvterm.name)::text = 'probe'::text)) OR ((cvterm.name)::text = 'tag'::text)) OR ((cvterm.name)::text = 'ss_oligo'::text)) OR ((cvterm.name)::text = 'ds_oligo'::text)) OR ((cvterm.name)::text = 'DNAzyme'::text)) OR ((cvterm.name)::text = 'synthetic_oligo'::text)) OR ((cvterm.name)::text = 'DNA_aptamer'::text)) OR ((cvterm.name)::text = 'RNA_aptamer'::text)) OR ((cvterm.name)::text = 'microarray_oligo'::text)) OR ((cvterm.name)::text = 'SAGE_tag'::text)) OR ((cvterm.name)::text = 'STS'::text)) OR ((cvterm.name)::text = 'EST'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'five_prime_EST'::text)) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'primer'::text)) OR ((cvterm.name)::text = 'sequencing_primer'::text)) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'RNAi_reagent'::text)) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text)) OR ((cvterm.name)::text = 'morpholino_oligo'::text)) OR ((cvterm.name)::text = 'PNA_oligo'::text)) OR ((cvterm.name)::text = 'LNA_oligo'::text)) OR ((cvterm.name)::text = 'TNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text)) OR ((cvterm.name)::text = 'R_GNA_oligo'::text)) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'cloned_cDNA_insert'::text)) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_region'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'match_part'::text)) OR ((cvterm.name)::text = 'assembly_component'::text)) OR ((cvterm.name)::text = 'conserved_region'::text)) OR ((cvterm.name)::text = 'match'::text)) OR ((cvterm.name)::text = 'remark'::text)) OR ((cvterm.name)::text = 'reading_frame'::text)) OR ((cvterm.name)::text = 'consensus_region'::text)) OR ((cvterm.name)::text = 'low_complexity_region'::text)) OR ((cvterm.name)::text = 'assembly'::text)) OR ((cvterm.name)::text = 'transcribed_fragment'::text)) OR ((cvterm.name)::text = 'transcribed_cluster'::text)) OR ((cvterm.name)::text = 'high_identity_region'::text)) OR ((cvterm.name)::text = 'mathematically_defined_repeat'::text)) OR ((cvterm.name)::text = 'experimentally_defined_binding_region'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'read'::text)) OR ((cvterm.name)::text = 'restriction_fragment'::text)) OR ((cvterm.name)::text = 'golden_path_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_fragment'::text)) OR ((cvterm.name)::text = 'gap'::text)) OR ((cvterm.name)::text = 'sonicate_fragment'::text)) OR ((cvterm.name)::text = 'paired_end_fragment'::text)) OR ((cvterm.name)::text = 'read_pair'::text)) OR ((cvterm.name)::text = 'contig_read'::text)) OR ((cvterm.name)::text = 'BAC_end'::text)) OR ((cvterm.name)::text = 'dye_terminator_read'::text)) OR ((cvterm.name)::text = 'pyrosequenced_read'::text)) OR ((cvterm.name)::text = 'ligation_based_read'::text)) OR ((cvterm.name)::text = 'polymerase_synthesis_read'::text)) OR ((cvterm.name)::text = 'PAC_end'::text)) OR ((cvterm.name)::text = 'YAC_end'::text)) OR ((cvterm.name)::text = 'clone_end'::text)) OR ((cvterm.name)::text = 'RFLP_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'coding_conserved_region'::text)) OR ((cvterm.name)::text = 'nc_conserved_region'::text)) OR ((cvterm.name)::text = 'RR_tract'::text)) OR ((cvterm.name)::text = 'homologous_region'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_I'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_II'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_III'::text)) OR ((cvterm.name)::text = 'X_element'::text)) OR ((cvterm.name)::text = 'U_box'::text)) OR ((cvterm.name)::text = 'regional_centromere_central_core'::text)) OR ((cvterm.name)::text = 'syntenic_region'::text)) OR ((cvterm.name)::text = 'paralogous_region'::text)) OR ((cvterm.name)::text = 'orthologous_region'::text)) OR ((cvterm.name)::text = 'nucleotide_match'::text)) OR ((cvterm.name)::text = 'protein_match'::text)) OR ((cvterm.name)::text = 'expressed_sequence_match'::text)) OR ((cvterm.name)::text = 'cross_genome_match'::text)) OR ((cvterm.name)::text = 'translated_nucleotide_match'::text)) OR ((cvterm.name)::text = 'primer_match'::text)) OR ((cvterm.name)::text = 'EST_match'::text)) OR ((cvterm.name)::text = 'cDNA_match'::text)) OR ((cvterm.name)::text = 'UST_match'::text)) OR ((cvterm.name)::text = 'RST_match'::text)) OR ((cvterm.name)::text = 'sequence_difference'::text)) OR ((cvterm.name)::text = 'experimental_result_region'::text)) OR ((cvterm.name)::text = 'polypeptide_sequencing_information'::text)) OR ((cvterm.name)::text = 'possible_base_call_error'::text)) OR ((cvterm.name)::text = 'possible_assembly_error'::text)) OR ((cvterm.name)::text = 'assembly_error_correction'::text)) OR ((cvterm.name)::text = 'base_call_error_correction'::text)) OR ((cvterm.name)::text = 'overlapping_feature_set'::text)) OR ((cvterm.name)::text = 'no_output'::text)) OR ((cvterm.name)::text = 'overlapping_EST_set'::text)) OR ((cvterm.name)::text = 'non_adjacent_residues'::text)) OR ((cvterm.name)::text = 'non_terminal_residue'::text)) OR ((cvterm.name)::text = 'sequence_conflict'::text)) OR ((cvterm.name)::text = 'sequence_uncertainty'::text)) OR ((cvterm.name)::text = 'contig_collection'::text)) OR ((cvterm.name)::text = 'ORF'::text)) OR ((cvterm.name)::text = 'blocked_reading_frame'::text)) OR ((cvterm.name)::text = 'mini_gene'::text)) OR ((cvterm.name)::text = 'rescue_mini_gene'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'sequence_assembly'::text)) OR ((cvterm.name)::text = 'fragment_assembly'::text)) OR ((cvterm.name)::text = 'supercontig'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'tiling_path'::text)) OR ((cvterm.name)::text = 'virtual_sequence'::text)) OR ((cvterm.name)::text = 'golden_path'::text)) OR ((cvterm.name)::text = 'ultracontig'::text)) OR ((cvterm.name)::text = 'expressed_sequence_assembly'::text)) OR ((cvterm.name)::text = 'fingerprint_map'::text)) OR ((cvterm.name)::text = 'STS_map'::text)) OR ((cvterm.name)::text = 'RH_map'::text)) OR ((cvterm.name)::text = 'unigene_cluster'::text)) OR ((cvterm.name)::text = 'CHiP_seq_region'::text)) OR ((cvterm.name)::text = 'sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'linkage_group'::text)) OR ((cvterm.name)::text = 'polypeptide'::text)) OR ((cvterm.name)::text = 'deletion'::text)) OR ((cvterm.name)::text = 'origin_of_replication'::text)) OR ((cvterm.name)::text = 'recombination_feature'::text)) OR ((cvterm.name)::text = 'CpG_island'::text)) OR ((cvterm.name)::text = 'pseudogene'::text)) OR ((cvterm.name)::text = 'binding_site'::text)) OR ((cvterm.name)::text = 'pseudogenic_region'::text)) OR ((cvterm.name)::text = 'cap'::text)) OR ((cvterm.name)::text = 'intergenic_region'::text)) OR ((cvterm.name)::text = 'oligo_U_tail'::text)) OR ((cvterm.name)::text = 'polyA_sequence'::text)) OR ((cvterm.name)::text = 'repeat_region'::text)) OR ((cvterm.name)::text = 'insertion'::text)) OR ((cvterm.name)::text = 'gene'::text)) OR ((cvterm.name)::text = 'repeat_unit'::text)) OR ((cvterm.name)::text = 'QTL'::text)) OR ((cvterm.name)::text = 'chromosome_part'::text)) OR ((cvterm.name)::text = 'gene_member_region'::text)) OR ((cvterm.name)::text = 'transcript_region'::text)) OR ((cvterm.name)::text = 'polypeptide_region'::text)) OR ((cvterm.name)::text = 'gene_component_region'::text)) OR ((cvterm.name)::text = 'mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'replicon'::text)) OR ((cvterm.name)::text = 'base'::text)) OR ((cvterm.name)::text = 'amino_acid'::text)) OR ((cvterm.name)::text = 'genetic_marker'::text)) OR ((cvterm.name)::text = 'sequence_motif'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_recognition_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_single_strand_overhang'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_region'::text)) OR ((cvterm.name)::text = 'open_chromatin_region'::text)) OR ((cvterm.name)::text = 'gene_group'::text)) OR ((cvterm.name)::text = 'substitution'::text)) OR ((cvterm.name)::text = 'inversion'::text)) OR ((cvterm.name)::text = 'retron'::text)) OR ((cvterm.name)::text = 'G_quartet'::text)) OR ((cvterm.name)::text = 'base_pair'::text)) OR ((cvterm.name)::text = 'RNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'DNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'pseudoknot'::text)) OR ((cvterm.name)::text = 'WC_base_pair'::text)) OR ((cvterm.name)::text = 'sugar_edge_base_pair'::text)) OR ((cvterm.name)::text = 'Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'wobble_base_pair'::text)) OR ((cvterm.name)::text = 'stem_loop'::text)) OR ((cvterm.name)::text = 'tetraloop'::text)) OR ((cvterm.name)::text = 'i_motif'::text)) OR ((cvterm.name)::text = 'recoding_pseudoknot'::text)) OR ((cvterm.name)::text = 'H_pseudoknot'::text)) OR ((cvterm.name)::text = 'D_loop'::text)) OR ((cvterm.name)::text = 'ARS'::text)) OR ((cvterm.name)::text = 'oriT'::text)) OR ((cvterm.name)::text = 'amplification_origin'::text)) OR ((cvterm.name)::text = 'oriV'::text)) OR ((cvterm.name)::text = 'oriC'::text)) OR ((cvterm.name)::text = 'recombination_hotspot'::text)) OR ((cvterm.name)::text = 'haplotype_block'::text)) OR ((cvterm.name)::text = 'sequence_rearrangement_feature'::text)) OR ((cvterm.name)::text = 'iDNA'::text)) OR ((cvterm.name)::text = 'specific_recombination_site'::text)) OR ((cvterm.name)::text = 'chromosome_breakage_sequence'::text)) OR ((cvterm.name)::text = 'internal_eliminated_sequence'::text)) OR ((cvterm.name)::text = 'macronucleus_destined_segment'::text)) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text)) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text)) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'processed_pseudogene'::text)) OR ((cvterm.name)::text = 'non_processed_pseudogene'::text)) OR ((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text)) OR ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text)) OR ((cvterm.name)::text = 'cassette_pseudogene'::text)) OR ((cvterm.name)::text = 'duplicated_pseudogene'::text)) OR ((cvterm.name)::text = 'unitary_pseudogene'::text)) OR ((cvterm.name)::text = 'protein_binding_site'::text)) OR ((cvterm.name)::text = 'epitope'::text)) OR ((cvterm.name)::text = 'nucleotide_binding_site'::text)) OR ((cvterm.name)::text = 'metal_binding_site'::text)) OR ((cvterm.name)::text = 'ligand_binding_site'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_binding_site'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'histone_binding_site'::text)) OR ((cvterm.name)::text = 'insulator_binding_site'::text)) OR ((cvterm.name)::text = 'enhancer_binding_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'miRNA_target_site'::text)) OR ((cvterm.name)::text = 'DNA_binding_site'::text)) OR ((cvterm.name)::text = 'primer_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'decayed_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_transcript'::text)) OR ((cvterm.name)::text = 'pseudogenic_rRNA'::text)) OR ((cvterm.name)::text = 'pseudogenic_tRNA'::text)) OR ((cvterm.name)::text = 'long_terminal_repeat'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'inverted_repeat'::text)) OR ((cvterm.name)::text = 'direct_repeat'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'dispersed_repeat'::text)) OR ((cvterm.name)::text = 'tandem_repeat'::text)) OR ((cvterm.name)::text = 'X_element_combinatorial_repeat'::text)) OR ((cvterm.name)::text = 'Y_prime_element'::text)) OR ((cvterm.name)::text = 'telomeric_repeat'::text)) OR ((cvterm.name)::text = 'nested_repeat'::text)) OR ((cvterm.name)::text = 'centromeric_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_LTR'::text)) OR ((cvterm.name)::text = 'three_prime_LTR'::text)) OR ((cvterm.name)::text = 'solo_LTR'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'target_site_duplication'::text)) OR ((cvterm.name)::text = 'CRISPR'::text)) OR ((cvterm.name)::text = 'satellite_DNA'::text)) OR ((cvterm.name)::text = 'microsatellite'::text)) OR ((cvterm.name)::text = 'minisatellite'::text)) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'nested_tandem_repeat'::text)) OR ((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text)) OR ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text)) OR ((cvterm.name)::text = 'transgenic_insertion'::text)) OR ((cvterm.name)::text = 'duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text)) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'nuclear_gene'::text)) OR ((cvterm.name)::text = 'mt_gene'::text)) OR ((cvterm.name)::text = 'plastid_gene'::text)) OR ((cvterm.name)::text = 'nucleomorph_gene'::text)) OR ((cvterm.name)::text = 'plasmid_gene'::text)) OR ((cvterm.name)::text = 'proviral_gene'::text)) OR ((cvterm.name)::text = 'transposable_element_gene'::text)) OR ((cvterm.name)::text = 'silenced_gene'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'foreign_gene'::text)) OR ((cvterm.name)::text = 'fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_gene'::text)) OR ((cvterm.name)::text = 'gene_with_trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'rescue_gene'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'positively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'transgene'::text)) OR ((cvterm.name)::text = 'predicted_gene'::text)) OR ((cvterm.name)::text = 'protein_coding_gene'::text)) OR ((cvterm.name)::text = 'retrogene'::text)) OR ((cvterm.name)::text = 'ncRNA_gene'::text)) OR ((cvterm.name)::text = 'cryptic_gene'::text)) OR ((cvterm.name)::text = 'gene_with_non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'gene_cassette'::text)) OR ((cvterm.name)::text = 'kinetoplast_gene'::text)) OR ((cvterm.name)::text = 'maxicircle_gene'::text)) OR ((cvterm.name)::text = 'minicircle_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'apicoplast_gene'::text)) OR ((cvterm.name)::text = 'ct_gene'::text)) OR ((cvterm.name)::text = 'chromoplast_gene'::text)) OR ((cvterm.name)::text = 'cyanelle_gene'::text)) OR ((cvterm.name)::text = 'leucoplast_gene'::text)) OR ((cvterm.name)::text = 'proplastid_gene'::text)) OR ((cvterm.name)::text = 'endogenous_retroviral_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_inverted_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'wild_type_rescue_gene'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'floxed_gene'::text)) OR ((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_edited_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'gRNA_gene'::text)) OR ((cvterm.name)::text = 'miRNA_gene'::text)) OR ((cvterm.name)::text = 'scRNA_gene'::text)) OR ((cvterm.name)::text = 'snoRNA_gene'::text)) OR ((cvterm.name)::text = 'snRNA_gene'::text)) OR ((cvterm.name)::text = 'SRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'stRNA_gene'::text)) OR ((cvterm.name)::text = 'tmRNA_gene'::text)) OR ((cvterm.name)::text = 'tRNA_gene'::text)) OR ((cvterm.name)::text = 'rRNA_gene'::text)) OR ((cvterm.name)::text = 'piRNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'lincRNA_gene'::text)) OR ((cvterm.name)::text = 'telomerase_RNA_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'gene_with_start_codon_CUG'::text)) OR ((cvterm.name)::text = 'chromosome_arm'::text)) OR ((cvterm.name)::text = 'chromosome_band'::text)) OR ((cvterm.name)::text = 'interband'::text)) OR ((cvterm.name)::text = 'chromosomal_regulatory_element'::text)) OR ((cvterm.name)::text = 'chromosomal_structural_element'::text)) OR ((cvterm.name)::text = 'introgressed_chromosome_region'::text)) OR ((cvterm.name)::text = 'matrix_attachment_site'::text)) OR ((cvterm.name)::text = 'centromere'::text)) OR ((cvterm.name)::text = 'telomere'::text)) OR ((cvterm.name)::text = 'point_centromere'::text)) OR ((cvterm.name)::text = 'regional_centromere'::text)) OR ((cvterm.name)::text = 'transcript'::text)) OR ((cvterm.name)::text = 'regulatory_region'::text)) OR ((cvterm.name)::text = 'polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'primary_transcript'::text)) OR ((cvterm.name)::text = 'mature_transcript'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_protein'::text)) OR ((cvterm.name)::text = 'enzymatic_RNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_transcript'::text)) OR ((cvterm.name)::text = 'aberrant_processed_transcript'::text)) OR ((cvterm.name)::text = 'edited_transcript'::text)) OR ((cvterm.name)::text = 'processed_transcript'::text)) OR ((cvterm.name)::text = 'alternatively_spliced_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text)) OR ((cvterm.name)::text = 'nc_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text)) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text)) OR ((cvterm.name)::text = 'capped_primary_transcript'::text)) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text)) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mRNA'::text)) OR ((cvterm.name)::text = 'ncRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'scRNA'::text)) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'ribozyme'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'transcription_regulatory_region'::text)) OR ((cvterm.name)::text = 'translation_regulatory_region'::text)) OR ((cvterm.name)::text = 'recombination_regulatory_region'::text)) OR ((cvterm.name)::text = 'replication_regulatory_region'::text)) OR ((cvterm.name)::text = 'terminator'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text)) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text)) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'operator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'promoter'::text)) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'attenuator'::text)) OR ((cvterm.name)::text = 'exon'::text)) OR ((cvterm.name)::text = 'edited_transcript_feature'::text)) OR ((cvterm.name)::text = 'mature_transcript_region'::text)) OR ((cvterm.name)::text = 'primary_transcript_region'::text)) OR ((cvterm.name)::text = 'exon_region'::text)) OR ((cvterm.name)::text = 'anchor_binding_site'::text)) OR ((cvterm.name)::text = 'coding_exon'::text)) OR ((cvterm.name)::text = 'noncoding_exon'::text)) OR ((cvterm.name)::text = 'interior_exon'::text)) OR ((cvterm.name)::text = 'exon_of_single_exon_gene'::text)) OR ((cvterm.name)::text = 'interior_coding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'pre_edited_region'::text)) OR ((cvterm.name)::text = 'editing_block'::text)) OR ((cvterm.name)::text = 'editing_domain'::text)) OR ((cvterm.name)::text = 'unedited_region'::text)) OR ((cvterm.name)::text = 'mRNA_region'::text)) OR ((cvterm.name)::text = 'tmRNA_region'::text)) OR ((cvterm.name)::text = 'guide_RNA_region'::text)) OR ((cvterm.name)::text = 'tRNA_region'::text)) OR ((cvterm.name)::text = 'riboswitch'::text)) OR ((cvterm.name)::text = 'ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'UTR'::text)) OR ((cvterm.name)::text = 'CDS'::text)) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text)) OR ((cvterm.name)::text = 'UTR_region'::text)) OR ((cvterm.name)::text = 'CDS_region'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text)) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'five_prime_UTR'::text)) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_CDS'::text)) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text)) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'coding_start'::text)) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'tmRNA_coding_piece'::text)) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text)) OR ((cvterm.name)::text = 'anchor_region'::text)) OR ((cvterm.name)::text = 'template_region'::text)) OR ((cvterm.name)::text = 'anticodon_loop'::text)) OR ((cvterm.name)::text = 'anticodon'::text)) OR ((cvterm.name)::text = 'CCA_tail'::text)) OR ((cvterm.name)::text = 'DHU_loop'::text)) OR ((cvterm.name)::text = 'T_loop'::text)) OR ((cvterm.name)::text = 'splice_site'::text)) OR ((cvterm.name)::text = 'intron'::text)) OR ((cvterm.name)::text = 'clip'::text)) OR ((cvterm.name)::text = 'TSS'::text)) OR ((cvterm.name)::text = 'transcription_end_site'::text)) OR ((cvterm.name)::text = 'spliced_leader_RNA'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text)) OR ((cvterm.name)::text = 'intron_domain'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'outron'::text)) OR ((cvterm.name)::text = 'cis_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_site'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'five_prime_intron'::text)) OR ((cvterm.name)::text = 'interior_intron'::text)) OR ((cvterm.name)::text = 'three_prime_intron'::text)) OR ((cvterm.name)::text = 'twintron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text)) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'group_I_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'U2_intron'::text)) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'archaeal_intron'::text)) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'five_prime_clip'::text)) OR ((cvterm.name)::text = 'three_prime_clip'::text)) OR ((cvterm.name)::text = 'major_TSS'::text)) OR ((cvterm.name)::text = 'minor_TSS'::text)) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'branch_site'::text)) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text)) OR ((cvterm.name)::text = 'internal_guide_sequence'::text)) OR ((cvterm.name)::text = 'mirtron'::text)) OR ((cvterm.name)::text = 'pre_miRNA'::text)) OR ((cvterm.name)::text = 'miRNA_stem'::text)) OR ((cvterm.name)::text = 'miRNA_loop'::text)) OR ((cvterm.name)::text = 'miRNA_antiguide'::text)) OR ((cvterm.name)::text = 'noncoding_region_of_exon'::text)) OR ((cvterm.name)::text = 'coding_region_of_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'mature_protein_region'::text)) OR ((cvterm.name)::text = 'immature_peptide_region'::text)) OR ((cvterm.name)::text = 'compositionally_biased_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_region'::text)) OR ((cvterm.name)::text = 'polypeptide_variation_site'::text)) OR ((cvterm.name)::text = 'peptide_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_peptide_region'::text)) OR ((cvterm.name)::text = 'hydrophobic_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_region'::text)) OR ((cvterm.name)::text = 'active_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'membrane_structure'::text)) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text)) OR ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text)) OR ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'membrane_peptide_loop'::text)) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'asx_motif'::text)) OR ((cvterm.name)::text = 'beta_bulge'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text)) OR ((cvterm.name)::text = 'beta_strand'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text)) OR ((cvterm.name)::text = 'serine_threonine_motif'::text)) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text)) OR ((cvterm.name)::text = 'alpha_beta_motif'::text)) OR ((cvterm.name)::text = 'peptide_coil'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text)) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text)) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'asx_turn'::text)) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'coiled_coil'::text)) OR ((cvterm.name)::text = 'helix_turn_helix'::text)) OR ((cvterm.name)::text = 'natural_variant_site'::text)) OR ((cvterm.name)::text = 'mutated_variant_site'::text)) OR ((cvterm.name)::text = 'alternate_sequence_site'::text)) OR ((cvterm.name)::text = 'signal_peptide'::text)) OR ((cvterm.name)::text = 'transit_peptide'::text)) OR ((cvterm.name)::text = 'nuclear_localization_signal'::text)) OR ((cvterm.name)::text = 'endosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'lysosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'nuclear_export_signal'::text)) OR ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_initiator_methionine'::text)) OR ((cvterm.name)::text = 'intein'::text)) OR ((cvterm.name)::text = 'propeptide_cleavage_site'::text)) OR ((cvterm.name)::text = 'propeptide'::text)) OR ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text)) OR ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text)) OR ((cvterm.name)::text = 'n_terminal_region'::text)) OR ((cvterm.name)::text = 'c_terminal_region'::text)) OR ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'polypeptide_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_repeat'::text)) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text)) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'non_transcribed_region'::text)) OR ((cvterm.name)::text = 'gene_fragment'::text)) OR ((cvterm.name)::text = 'TSS_region'::text)) OR ((cvterm.name)::text = 'gene_segment'::text)) OR ((cvterm.name)::text = 'pseudogenic_gene_segment'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'extrachromosomal_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'integrated_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'transposable_element'::text)) OR ((cvterm.name)::text = 'proviral_region'::text)) OR ((cvterm.name)::text = 'integron'::text)) OR ((cvterm.name)::text = 'genomic_island'::text)) OR ((cvterm.name)::text = 'integrated_plasmid'::text)) OR ((cvterm.name)::text = 'cointegrated_plasmid'::text)) OR ((cvterm.name)::text = 'retrotransposon'::text)) OR ((cvterm.name)::text = 'DNA_transposon'::text)) OR ((cvterm.name)::text = 'foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'nested_transposon'::text)) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text)) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'prophage'::text)) OR ((cvterm.name)::text = 'pathogenic_island'::text)) OR ((cvterm.name)::text = 'metabolic_island'::text)) OR ((cvterm.name)::text = 'adaptive_island'::text)) OR ((cvterm.name)::text = 'symbiosis_island'::text)) OR ((cvterm.name)::text = 'cryptic_prophage'::text)) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text)) OR ((cvterm.name)::text = 'plasmid'::text)) OR ((cvterm.name)::text = 'chromosome'::text)) OR ((cvterm.name)::text = 'vector_replicon'::text)) OR ((cvterm.name)::text = 'maxicircle'::text)) OR ((cvterm.name)::text = 'minicircle'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'episome'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'mitochondrial_chromosome'::text)) OR ((cvterm.name)::text = 'chloroplast_chromosome'::text)) OR ((cvterm.name)::text = 'chromoplast_chromosome'::text)) OR ((cvterm.name)::text = 'cyanelle_chromosome'::text)) OR ((cvterm.name)::text = 'leucoplast_chromosome'::text)) OR ((cvterm.name)::text = 'macronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'micronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nucleomorphic_chromosome'::text)) OR ((cvterm.name)::text = 'DNA_chromosome'::text)) OR ((cvterm.name)::text = 'RNA_chromosome'::text)) OR ((cvterm.name)::text = 'apicoplast_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'YAC'::text)) OR ((cvterm.name)::text = 'BAC'::text)) OR ((cvterm.name)::text = 'PAC'::text)) OR ((cvterm.name)::text = 'cosmid'::text)) OR ((cvterm.name)::text = 'phagemid'::text)) OR ((cvterm.name)::text = 'fosmid'::text)) OR ((cvterm.name)::text = 'lambda_vector'::text)) OR ((cvterm.name)::text = 'plasmid_vector'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'modified_RNA_base_feature'::text)) OR ((cvterm.name)::text = 'inosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanine'::text)) OR ((cvterm.name)::text = 'ribothymidine'::text)) OR ((cvterm.name)::text = 'modified_adenosine'::text)) OR ((cvterm.name)::text = 'modified_cytidine'::text)) OR ((cvterm.name)::text = 'modified_guanosine'::text)) OR ((cvterm.name)::text = 'modified_uridine'::text)) OR ((cvterm.name)::text = 'modified_inosine'::text)) OR ((cvterm.name)::text = 'methylinosine'::text)) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'one_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text)) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text)) OR ((cvterm.name)::text = 'three_methylcytidine'::text)) OR ((cvterm.name)::text = 'five_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_thiocytidine'::text)) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text)) OR ((cvterm.name)::text = 'five_formylcytidine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'lysidine'::text)) OR ((cvterm.name)::text = 'N4_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text)) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text)) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'one_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_methylguanosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text)) OR ((cvterm.name)::text = 'wybutosine'::text)) OR ((cvterm.name)::text = 'peroxywybutosine'::text)) OR ((cvterm.name)::text = 'hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'wyosine'::text)) OR ((cvterm.name)::text = 'methylwyosine'::text)) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'four_demethylwyosine'::text)) OR ((cvterm.name)::text = 'isowyosine'::text)) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'queuosine'::text)) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'dihydrouridine'::text)) OR ((cvterm.name)::text = 'pseudouridine'::text)) OR ((cvterm.name)::text = 'five_methyluridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_thiouridine'::text)) OR ((cvterm.name)::text = 'four_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text)) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text)) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text)) OR ((cvterm.name)::text = 'five_methoxyuridine'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'three_methyluridine'::text)) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text)) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text)) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'catalytic_residue'::text)) OR ((cvterm.name)::text = 'modified_amino_acid_feature'::text)) OR ((cvterm.name)::text = 'alanine'::text)) OR ((cvterm.name)::text = 'valine'::text)) OR ((cvterm.name)::text = 'leucine'::text)) OR ((cvterm.name)::text = 'isoleucine'::text)) OR ((cvterm.name)::text = 'proline'::text)) OR ((cvterm.name)::text = 'tryptophan'::text)) OR ((cvterm.name)::text = 'phenylalanine'::text)) OR ((cvterm.name)::text = 'methionine'::text)) OR ((cvterm.name)::text = 'glycine'::text)) OR ((cvterm.name)::text = 'serine'::text)) OR ((cvterm.name)::text = 'threonine'::text)) OR ((cvterm.name)::text = 'tyrosine'::text)) OR ((cvterm.name)::text = 'cysteine'::text)) OR ((cvterm.name)::text = 'glutamine'::text)) OR ((cvterm.name)::text = 'asparagine'::text)) OR ((cvterm.name)::text = 'lysine'::text)) OR ((cvterm.name)::text = 'arginine'::text)) OR ((cvterm.name)::text = 'histidine'::text)) OR ((cvterm.name)::text = 'aspartic_acid'::text)) OR ((cvterm.name)::text = 'glutamic_acid'::text)) OR ((cvterm.name)::text = 'selenocysteine'::text)) OR ((cvterm.name)::text = 'pyrrolysine'::text)) OR ((cvterm.name)::text = 'modified_glycine'::text)) OR ((cvterm.name)::text = 'modified_L_alanine'::text)) OR ((cvterm.name)::text = 'modified_L_asparagine'::text)) OR ((cvterm.name)::text = 'modified_L_aspartic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_cysteine'::text)) OR ((cvterm.name)::text = 'modified_L_glutamic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_threonine'::text)) OR ((cvterm.name)::text = 'modified_L_tryptophan'::text)) OR ((cvterm.name)::text = 'modified_L_glutamine'::text)) OR ((cvterm.name)::text = 'modified_L_methionine'::text)) OR ((cvterm.name)::text = 'modified_L_isoleucine'::text)) OR ((cvterm.name)::text = 'modified_L_phenylalanine'::text)) OR ((cvterm.name)::text = 'modified_L_histidine'::text)) OR ((cvterm.name)::text = 'modified_L_serine'::text)) OR ((cvterm.name)::text = 'modified_L_lysine'::text)) OR ((cvterm.name)::text = 'modified_L_leucine'::text)) OR ((cvterm.name)::text = 'modified_L_selenocysteine'::text)) OR ((cvterm.name)::text = 'modified_L_valine'::text)) OR ((cvterm.name)::text = 'modified_L_proline'::text)) OR ((cvterm.name)::text = 'modified_L_tyrosine'::text)) OR ((cvterm.name)::text = 'modified_L_arginine'::text)) OR ((cvterm.name)::text = 'heritable_phenotypic_marker'::text)) OR ((cvterm.name)::text = 'DArT_marker'::text)) OR ((cvterm.name)::text = 'nucleotide_motif'::text)) OR ((cvterm.name)::text = 'DNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_motif'::text)) OR ((cvterm.name)::text = 'PSE_motif'::text)) OR ((cvterm.name)::text = 'CAAT_signal'::text)) OR ((cvterm.name)::text = 'minus_10_signal'::text)) OR ((cvterm.name)::text = 'minus_35_signal'::text)) OR ((cvterm.name)::text = 'DRE_motif'::text)) OR ((cvterm.name)::text = 'E_box_motif'::text)) OR ((cvterm.name)::text = 'INR1_motif'::text)) OR ((cvterm.name)::text = 'GAGA_motif'::text)) OR ((cvterm.name)::text = 'octamer_motif'::text)) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text)) OR ((cvterm.name)::text = 'DCE_SI'::text)) OR ((cvterm.name)::text = 'DCE_SII'::text)) OR ((cvterm.name)::text = 'DCE_SIII'::text)) OR ((cvterm.name)::text = 'minus_12_signal'::text)) OR ((cvterm.name)::text = 'minus_24_signal'::text)) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text)) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_junction_loop'::text)) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_hook_turn'::text)) OR ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'sticky_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'modified_base'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'methylated_base_feature'::text)) OR ((cvterm.name)::text = 'methylated_C'::text)) OR ((cvterm.name)::text = 'methylated_A'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'operon'::text)) OR ((cvterm.name)::text = 'mating_type_region'::text)) OR ((cvterm.name)::text = 'gene_array'::text)) OR ((cvterm.name)::text = 'gene_subarray'::text)) OR ((cvterm.name)::text = 'gene_cassette_array'::text)) OR ((cvterm.name)::text = 'regulon'::text)) OR ((cvterm.name)::text = 'sequence_length_variation'::text)) OR ((cvterm.name)::text = 'MNP'::text)) OR ((cvterm.name)::text = 'SNV'::text)) OR ((cvterm.name)::text = 'complex_substitution'::text)) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text)) OR ((cvterm.name)::text = 'SNP'::text)) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'flanking_region'::text)) OR ((cvterm.name)::text = 'repeat_component'::text)) OR ((cvterm.name)::text = 'transposable_element_flanking_region'::text)) OR ((cvterm.name)::text = 'five_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'three_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'LTR_component'::text)) OR ((cvterm.name)::text = 'repeat_fragment'::text)) OR ((cvterm.name)::text = 'transposon_fragment'::text)) OR ((cvterm.name)::text = 'U5_LTR_region'::text)) OR ((cvterm.name)::text = 'R_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_LTR_region'::text)) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'region'::text));

CREATE VIEW so.regional_centromere (regional_centromere_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS regional_centromere_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'regional_centromere'::text);

CREATE VIEW so.regional_centromere_central_core (regional_centromere_central_core_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS regional_centromere_central_core_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'regional_centromere_central_core'::text);

CREATE VIEW so.regional_centromere_inner_repeat_region (regional_centromere_inner_repeat_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS regional_centromere_inner_repeat_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text);

CREATE VIEW so.regional_centromere_outer_repeat_region (regional_centromere_outer_repeat_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS regional_centromere_outer_repeat_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text);

CREATE VIEW so.regulated (regulated_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS regulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((cvterm.name)::text = 'transcriptionally_regulated'::text) OR ((cvterm.name)::text = 'post_translationally_regulated'::text)) OR ((cvterm.name)::text = 'translationally_regulated'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'transcriptionally_constitutive'::text)) OR ((cvterm.name)::text = 'transcriptionally_induced'::text)) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text)) OR ((cvterm.name)::text = 'autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'silenced'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'regulated'::text));

CREATE VIEW so.regulatory_promoter_element (regulatory_promoter_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS regulatory_promoter_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'proximal_promoter_element'::text) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text));

CREATE VIEW so.regulatory_region (regulatory_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'transcription_regulatory_region'::text) OR ((cvterm.name)::text = 'translation_regulatory_region'::text)) OR ((cvterm.name)::text = 'recombination_regulatory_region'::text)) OR ((cvterm.name)::text = 'replication_regulatory_region'::text)) OR ((cvterm.name)::text = 'terminator'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text)) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text)) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'operator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'promoter'::text)) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'attenuator'::text)) OR ((cvterm.name)::text = 'regulatory_region'::text));

CREATE VIEW so.regulatory_region_variant (regulatory_region_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS regulatory_region_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'TF_binding_site_variant'::text) OR ((cvterm.name)::text = 'regulatory_region_variant'::text));

CREATE VIEW so.regulon (regulon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS regulon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'regulon'::text);

CREATE VIEW so.remark (remark_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS remark_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((cvterm.name)::text = 'sequence_difference'::text) OR ((cvterm.name)::text = 'experimental_result_region'::text)) OR ((cvterm.name)::text = 'polypeptide_sequencing_information'::text)) OR ((cvterm.name)::text = 'possible_base_call_error'::text)) OR ((cvterm.name)::text = 'possible_assembly_error'::text)) OR ((cvterm.name)::text = 'assembly_error_correction'::text)) OR ((cvterm.name)::text = 'base_call_error_correction'::text)) OR ((cvterm.name)::text = 'overlapping_feature_set'::text)) OR ((cvterm.name)::text = 'no_output'::text)) OR ((cvterm.name)::text = 'overlapping_EST_set'::text)) OR ((cvterm.name)::text = 'non_adjacent_residues'::text)) OR ((cvterm.name)::text = 'non_terminal_residue'::text)) OR ((cvterm.name)::text = 'sequence_conflict'::text)) OR ((cvterm.name)::text = 'sequence_uncertainty'::text)) OR ((cvterm.name)::text = 'contig_collection'::text)) OR ((cvterm.name)::text = 'remark'::text));

CREATE VIEW so.repeat_component (repeat_component_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS repeat_component_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text) OR ((cvterm.name)::text = 'LTR_component'::text)) OR ((cvterm.name)::text = 'repeat_fragment'::text)) OR ((cvterm.name)::text = 'transposon_fragment'::text)) OR ((cvterm.name)::text = 'U5_LTR_region'::text)) OR ((cvterm.name)::text = 'R_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_LTR_region'::text)) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'repeat_component'::text));

CREATE VIEW so.repeat_fragment (repeat_fragment_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS repeat_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'repeat_fragment'::text);

CREATE VIEW so.repeat_region (repeat_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS repeat_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((cvterm.name)::text = 'long_terminal_repeat'::text) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'inverted_repeat'::text)) OR ((cvterm.name)::text = 'direct_repeat'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'dispersed_repeat'::text)) OR ((cvterm.name)::text = 'tandem_repeat'::text)) OR ((cvterm.name)::text = 'X_element_combinatorial_repeat'::text)) OR ((cvterm.name)::text = 'Y_prime_element'::text)) OR ((cvterm.name)::text = 'telomeric_repeat'::text)) OR ((cvterm.name)::text = 'nested_repeat'::text)) OR ((cvterm.name)::text = 'centromeric_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_LTR'::text)) OR ((cvterm.name)::text = 'three_prime_LTR'::text)) OR ((cvterm.name)::text = 'solo_LTR'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'target_site_duplication'::text)) OR ((cvterm.name)::text = 'CRISPR'::text)) OR ((cvterm.name)::text = 'satellite_DNA'::text)) OR ((cvterm.name)::text = 'microsatellite'::text)) OR ((cvterm.name)::text = 'minisatellite'::text)) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'nested_tandem_repeat'::text)) OR ((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text)) OR ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text)) OR ((cvterm.name)::text = 'repeat_region'::text));

CREATE VIEW so.repeat_unit (repeat_unit_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS repeat_unit_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'repeat_unit'::text);

CREATE VIEW so.replication_regulatory_region (replication_regulatory_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS replication_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'replication_regulatory_region'::text);

CREATE VIEW so.replicon (replicon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS replicon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'plasmid'::text) OR ((cvterm.name)::text = 'chromosome'::text)) OR ((cvterm.name)::text = 'vector_replicon'::text)) OR ((cvterm.name)::text = 'maxicircle'::text)) OR ((cvterm.name)::text = 'minicircle'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'episome'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'mitochondrial_chromosome'::text)) OR ((cvterm.name)::text = 'chloroplast_chromosome'::text)) OR ((cvterm.name)::text = 'chromoplast_chromosome'::text)) OR ((cvterm.name)::text = 'cyanelle_chromosome'::text)) OR ((cvterm.name)::text = 'leucoplast_chromosome'::text)) OR ((cvterm.name)::text = 'macronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'micronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nucleomorphic_chromosome'::text)) OR ((cvterm.name)::text = 'DNA_chromosome'::text)) OR ((cvterm.name)::text = 'RNA_chromosome'::text)) OR ((cvterm.name)::text = 'apicoplast_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'YAC'::text)) OR ((cvterm.name)::text = 'BAC'::text)) OR ((cvterm.name)::text = 'PAC'::text)) OR ((cvterm.name)::text = 'cosmid'::text)) OR ((cvterm.name)::text = 'phagemid'::text)) OR ((cvterm.name)::text = 'fosmid'::text)) OR ((cvterm.name)::text = 'lambda_vector'::text)) OR ((cvterm.name)::text = 'plasmid_vector'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'replicon'::text));

CREATE VIEW so.rescue (rescue_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rescue_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rescue'::text);

CREATE VIEW so.rescue_gene (rescue_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rescue_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'wild_type_rescue_gene'::text) OR ((cvterm.name)::text = 'rescue_gene'::text));

CREATE VIEW so.rescue_mini_gene (rescue_mini_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rescue_mini_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rescue_mini_gene'::text);

CREATE VIEW so.rescue_region (rescue_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rescue_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_rescue_region'::text) OR ((cvterm.name)::text = 'rescue_region'::text));

CREATE VIEW so.resolution_site (resolution_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS resolution_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'loxP_site'::text) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text));

CREATE VIEW so.restriction_enzyme_binding_site (restriction_enzyme_binding_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS restriction_enzyme_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text);

CREATE VIEW so.restriction_enzyme_cleavage_junction (restriction_enzyme_cleavage_junction_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS restriction_enzyme_cleavage_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_junction'::text) OR ((cvterm.name)::text = 'single_strand_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'five_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'three_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_cleavage_junction'::text));

CREATE VIEW so.restriction_enzyme_recognition_site (restriction_enzyme_recognition_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS restriction_enzyme_recognition_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_site'::text) OR ((cvterm.name)::text = 'sticky_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_recognition_site'::text));

CREATE VIEW so.restriction_enzyme_single_strand_overhang (restriction_enzyme_single_strand_overhang_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS restriction_enzyme_single_strand_overhang_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'restriction_enzyme_single_strand_overhang'::text);

CREATE VIEW so.restriction_fragment (restriction_fragment_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS restriction_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'RFLP_fragment'::text) OR ((cvterm.name)::text = 'restriction_fragment'::text));

CREATE VIEW so.retinoic_acid_responsive_element (retinoic_acid_responsive_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS retinoic_acid_responsive_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text);

CREATE VIEW so.retrogene (retrogene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS retrogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'retrogene'::text);

CREATE VIEW so.retron (retron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS retron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'retron'::text);

CREATE VIEW so.retrotransposed (retrotransposed_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS retrotransposed_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'retrotransposed'::text);

CREATE VIEW so.retrotransposon (retrotransposon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS retrotransposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'LTR_retrotransposon'::text) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'retrotransposon'::text));

CREATE VIEW so.reverse (reverse_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS reverse_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'reverse'::text);

CREATE VIEW so.reverse_hoogsteen_base_pair (reverse_hoogsteen_base_pair_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS reverse_hoogsteen_base_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text);

CREATE VIEW so.reverse_primer (reverse_primer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS reverse_primer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'reverse_primer'::text);

CREATE VIEW so.rflp_fragment (rflp_fragment_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rflp_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RFLP_fragment'::text);

CREATE VIEW so.rh_map (rh_map_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rh_map_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RH_map'::text);

CREATE VIEW so.rho_dependent_bacterial_terminator (rho_dependent_bacterial_terminator_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rho_dependent_bacterial_terminator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text);

CREATE VIEW so.rho_independent_bacterial_terminator (rho_independent_bacterial_terminator_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rho_independent_bacterial_terminator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text);

CREATE VIEW so.ribosome_entry_site (ribosome_entry_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ribosome_entry_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'internal_ribosome_entry_site'::text) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'ribosome_entry_site'::text));

CREATE VIEW so.riboswitch (riboswitch_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS riboswitch_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'riboswitch'::text);

CREATE VIEW so.ribothymidine (ribothymidine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ribothymidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ribothymidine'::text);

CREATE VIEW so.ribozyme (ribozyme_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ribozyme_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ribozyme'::text);

CREATE VIEW so.ribozymic (ribozymic_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ribozymic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ribozymic'::text);

CREATE VIEW so.right_handed_peptide_helix (right_handed_peptide_helix_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS right_handed_peptide_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'alpha_helix'::text) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text));

CREATE VIEW so.ring_chromosome (ring_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ring_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'inverted_ring_chromosome'::text) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'ring_chromosome'::text));

CREATE VIEW so.rna (rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNA'::text);

CREATE VIEW so.rna_6s (rna_6s_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rna_6s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNA_6S'::text);

CREATE VIEW so.rna_aptamer (rna_aptamer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rna_aptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNA_aptamer'::text);

CREATE VIEW so.rna_chromosome (rna_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'RNA_chromosome'::text));

CREATE VIEW so.rna_hook_turn (rna_hook_turn_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rna_hook_turn_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNA_hook_turn'::text);

CREATE VIEW so.rna_internal_loop (rna_internal_loop_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rna_internal_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_internal_loop'::text));

CREATE VIEW so.rna_junction_loop (rna_junction_loop_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rna_junction_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'RNA_hook_turn'::text) OR ((cvterm.name)::text = 'RNA_junction_loop'::text));

CREATE VIEW so.rna_motif (rna_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rna_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((cvterm.name)::text = 'RNA_internal_loop'::text) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_junction_loop'::text)) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_hook_turn'::text)) OR ((cvterm.name)::text = 'RNA_motif'::text));

CREATE VIEW so.rna_polymerase_ii_tata_box (rna_polymerase_ii_tata_box_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rna_polymerase_ii_tata_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text);

CREATE VIEW so.rna_polymerase_iii_tata_box (rna_polymerase_iii_tata_box_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rna_polymerase_iii_tata_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text);

CREATE VIEW so.rna_polymerase_promoter (rna_polymerase_promoter_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rna_polymerase_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((cvterm.name)::text = 'RNApol_I_promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text));

CREATE VIEW so.rna_sequence_secondary_structure (rna_sequence_secondary_structure_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rna_sequence_secondary_structure_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'stem_loop'::text) OR ((cvterm.name)::text = 'tetraloop'::text)) OR ((cvterm.name)::text = 'RNA_sequence_secondary_structure'::text));

CREATE VIEW so.rnai_reagent (rnai_reagent_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rnai_reagent_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNAi_reagent'::text);

CREATE VIEW so.rnapol_i_promoter (rnapol_i_promoter_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rnapol_i_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNApol_I_promoter'::text);

CREATE VIEW so.rnapol_ii_core_promoter (rnapol_ii_core_promoter_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rnapol_ii_core_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNApol_II_core_promoter'::text);

CREATE VIEW so.rnapol_ii_promoter (rnapol_ii_promoter_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rnapol_ii_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'RNApol_II_core_promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text));

CREATE VIEW so.rnapol_iii_promoter (rnapol_iii_promoter_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rnapol_iii_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text));

CREATE VIEW so.rnapol_iii_promoter_type_1 (rnapol_iii_promoter_type_1_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rnapol_iii_promoter_type_1_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text);

CREATE VIEW so.rnapol_iii_promoter_type_2 (rnapol_iii_promoter_type_2_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rnapol_iii_promoter_type_2_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text);

CREATE VIEW so.rnapol_iii_promoter_type_3 (rnapol_iii_promoter_type_3_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rnapol_iii_promoter_type_3_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text);

CREATE VIEW so.rnase_mrp_rna (rnase_mrp_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rnase_mrp_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNase_MRP_RNA'::text);

CREATE VIEW so.rnase_mrp_rna_gene (rnase_mrp_rna_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rnase_mrp_rna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text);

CREATE VIEW so.rnase_p_rna (rnase_p_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rnase_p_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNase_P_RNA'::text);

CREATE VIEW so.rnase_p_rna_gene (rnase_p_rna_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rnase_p_rna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNase_P_RNA_gene'::text);

CREATE VIEW so.robertsonian_fusion (robertsonian_fusion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS robertsonian_fusion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'Robertsonian_fusion'::text);

CREATE VIEW so.rpra_rna (rpra_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rpra_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RprA_RNA'::text);

CREATE VIEW so.rr_tract (rr_tract_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rr_tract_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RR_tract'::text);

CREATE VIEW so.rre_rna (rre_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rre_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RRE_RNA'::text);

CREATE VIEW so.rrna (rrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'small_subunit_rRNA'::text) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'rRNA'::text));

CREATE VIEW so.rrna_16s (rrna_16s_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rrna_16s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_16S'::text);

CREATE VIEW so.rrna_18s (rrna_18s_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rrna_18s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_18S'::text);

CREATE VIEW so.rrna_21s (rrna_21s_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rrna_21s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_21S'::text);

CREATE VIEW so.rrna_23s (rrna_23s_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rrna_23s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_23S'::text);

CREATE VIEW so.rrna_25s (rrna_25s_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rrna_25s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_25S'::text);

CREATE VIEW so.rrna_28s (rrna_28s_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rrna_28s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_28S'::text);

CREATE VIEW so.rrna_5_8s (rrna_5_8s_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rrna_5_8s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_5_8S'::text);

CREATE VIEW so.rrna_5s (rrna_5s_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rrna_5s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_5S'::text);

CREATE VIEW so.rrna_cleavage_rna (rrna_cleavage_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rrna_cleavage_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text);

CREATE VIEW so.rrna_cleavage_snorna_primary_transcript (rrna_cleavage_snorna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rrna_cleavage_snorna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text);

CREATE VIEW so.rrna_encoding (rrna_encoding_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rrna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_encoding'::text);

CREATE VIEW so.rrna_gene (rrna_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rrna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_gene'::text);

CREATE VIEW so.rrna_large_subunit_primary_transcript (rrna_large_subunit_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rrna_large_subunit_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text);

CREATE VIEW so.rrna_primary_transcript (rrna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rrna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text));

CREATE VIEW so.rrna_primary_transcript_region (rrna_primary_transcript_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rrna_primary_transcript_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text));

CREATE VIEW so.rrna_small_subunit_primary_transcript (rrna_small_subunit_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rrna_small_subunit_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text);

CREATE VIEW so.rst (rst_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rst_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'three_prime_RST'::text) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'RST'::text));

CREATE VIEW so.rst_match (rst_match_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS rst_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RST_match'::text);

CREATE VIEW so.s_gna (s_gna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS s_gna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'S_GNA'::text);

CREATE VIEW so.s_gna_oligo (s_gna_oligo_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS s_gna_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'S_GNA_oligo'::text);

CREATE VIEW so.sage_tag (sage_tag_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sage_tag_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SAGE_tag'::text);

CREATE VIEW so.sarcin_like_rna_motif (sarcin_like_rna_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sarcin_like_rna_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text);

CREATE VIEW so.satellite_dna (satellite_dna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS satellite_dna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'microsatellite'::text) OR ((cvterm.name)::text = 'minisatellite'::text)) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'satellite_DNA'::text));

CREATE VIEW so.schellmann_loop (schellmann_loop_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS schellmann_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'schellmann_loop_seven'::text) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text));

CREATE VIEW so.schellmann_loop_seven (schellmann_loop_seven_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS schellmann_loop_seven_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'schellmann_loop_seven'::text);

CREATE VIEW so.schellmann_loop_six (schellmann_loop_six_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS schellmann_loop_six_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'schellmann_loop_six'::text);

CREATE VIEW so.score (score_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS score_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'score'::text);

CREATE VIEW so.scrna (scrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS scrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'scRNA'::text);

CREATE VIEW so.scrna_encoding (scrna_encoding_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS scrna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'scRNA_encoding'::text);

CREATE VIEW so.scrna_gene (scrna_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS scrna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'scRNA_gene'::text);

CREATE VIEW so.scrna_primary_transcript (scrna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS scrna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'scRNA_primary_transcript'::text);

CREATE VIEW so.secis_element (secis_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS secis_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SECIS_element'::text);

CREATE VIEW so.selenocysteine (selenocysteine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS selenocysteine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'selenocysteine'::text);

CREATE VIEW so.selenocysteine_trna_primary_transcript (selenocysteine_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS selenocysteine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text);

CREATE VIEW so.selenocysteinyl_trna (selenocysteinyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS selenocysteinyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text);

CREATE VIEW so.sequence_alteration (sequence_alteration_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sequence_alteration_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'deletion'::text) OR ((cvterm.name)::text = 'translocation'::text)) OR ((cvterm.name)::text = 'insertion'::text)) OR ((cvterm.name)::text = 'copy_number_variation'::text)) OR ((cvterm.name)::text = 'UPD'::text)) OR ((cvterm.name)::text = 'structural_alteration'::text)) OR ((cvterm.name)::text = 'substitution'::text)) OR ((cvterm.name)::text = 'indel'::text)) OR ((cvterm.name)::text = 'inversion'::text)) OR ((cvterm.name)::text = 'transgenic_insertion'::text)) OR ((cvterm.name)::text = 'duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text)) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'copy_number_gain'::text)) OR ((cvterm.name)::text = 'copy_number_loss'::text)) OR ((cvterm.name)::text = 'maternal_uniparental_disomy'::text)) OR ((cvterm.name)::text = 'paternal_uniparental_disomy'::text)) OR ((cvterm.name)::text = 'complex_structural_alteration'::text)) OR ((cvterm.name)::text = 'sequence_length_variation'::text)) OR ((cvterm.name)::text = 'MNP'::text)) OR ((cvterm.name)::text = 'SNV'::text)) OR ((cvterm.name)::text = 'complex_substitution'::text)) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text)) OR ((cvterm.name)::text = 'SNP'::text)) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'sequence_alteration'::text));

CREATE VIEW so.sequence_assembly (sequence_assembly_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sequence_assembly_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'supercontig'::text) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'tiling_path'::text)) OR ((cvterm.name)::text = 'virtual_sequence'::text)) OR ((cvterm.name)::text = 'golden_path'::text)) OR ((cvterm.name)::text = 'ultracontig'::text)) OR ((cvterm.name)::text = 'expressed_sequence_assembly'::text)) OR ((cvterm.name)::text = 'sequence_assembly'::text));

CREATE VIEW so.sequence_attribute (sequence_attribute_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sequence_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'polymer_attribute'::text) OR ((cvterm.name)::text = 'feature_attribute'::text)) OR ((cvterm.name)::text = 'sequence_location'::text)) OR ((cvterm.name)::text = 'variant_quality'::text)) OR ((cvterm.name)::text = 'nucleic_acid'::text)) OR ((cvterm.name)::text = 'synthetic_sequence'::text)) OR ((cvterm.name)::text = 'topology_attribute'::text)) OR ((cvterm.name)::text = 'peptidyl'::text)) OR ((cvterm.name)::text = 'DNA'::text)) OR ((cvterm.name)::text = 'RNA'::text)) OR ((cvterm.name)::text = 'morpholino_backbone'::text)) OR ((cvterm.name)::text = 'PNA'::text)) OR ((cvterm.name)::text = 'LNA'::text)) OR ((cvterm.name)::text = 'TNA'::text)) OR ((cvterm.name)::text = 'GNA'::text)) OR ((cvterm.name)::text = 'cDNA'::text)) OR ((cvterm.name)::text = 'genomic_DNA'::text)) OR ((cvterm.name)::text = 'single_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'double_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'R_GNA'::text)) OR ((cvterm.name)::text = 'S_GNA'::text)) OR ((cvterm.name)::text = 'random_sequence'::text)) OR ((cvterm.name)::text = 'designed_sequence'::text)) OR ((cvterm.name)::text = 'linear'::text)) OR ((cvterm.name)::text = 'circular'::text)) OR ((cvterm.name)::text = 'transcript_attribute'::text)) OR ((cvterm.name)::text = 'bound_by_factor'::text)) OR ((cvterm.name)::text = 'flanked'::text)) OR ((cvterm.name)::text = 'gene_attribute'::text)) OR ((cvterm.name)::text = 'retrotransposed'::text)) OR ((cvterm.name)::text = 'transgenic'::text)) OR ((cvterm.name)::text = 'natural'::text)) OR ((cvterm.name)::text = 'engineered'::text)) OR ((cvterm.name)::text = 'foreign'::text)) OR ((cvterm.name)::text = 'fusion'::text)) OR ((cvterm.name)::text = 'rescue'::text)) OR ((cvterm.name)::text = 'wild_type'::text)) OR ((cvterm.name)::text = 'conserved'::text)) OR ((cvterm.name)::text = 'status'::text)) OR ((cvterm.name)::text = 'intermediate'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged'::text)) OR ((cvterm.name)::text = 'cryptic'::text)) OR ((cvterm.name)::text = 'strand_attribute'::text)) OR ((cvterm.name)::text = 'direction_attribute'::text)) OR ((cvterm.name)::text = 'enzymatic'::text)) OR ((cvterm.name)::text = 'mobile'::text)) OR ((cvterm.name)::text = 'alteration_attribute'::text)) OR ((cvterm.name)::text = 'experimental_feature_attribute'::text)) OR ((cvterm.name)::text = 'edited'::text)) OR ((cvterm.name)::text = 'capped'::text)) OR ((cvterm.name)::text = 'mRNA_attribute'::text)) OR ((cvterm.name)::text = 'trans_spliced'::text)) OR ((cvterm.name)::text = 'alternatively_spliced'::text)) OR ((cvterm.name)::text = 'monocistronic'::text)) OR ((cvterm.name)::text = 'polycistronic'::text)) OR ((cvterm.name)::text = 'polyadenylated'::text)) OR ((cvterm.name)::text = 'exemplar'::text)) OR ((cvterm.name)::text = 'frameshift'::text)) OR ((cvterm.name)::text = 'recoded'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_framshift'::text)) OR ((cvterm.name)::text = 'codon_redefined'::text)) OR ((cvterm.name)::text = 'recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'dicistronic'::text)) OR ((cvterm.name)::text = 'bound_by_protein'::text)) OR ((cvterm.name)::text = 'bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'floxed'::text)) OR ((cvterm.name)::text = 'FRT_flanked'::text)) OR ((cvterm.name)::text = 'protein_coding'::text)) OR ((cvterm.name)::text = 'non_protein_coding'::text)) OR ((cvterm.name)::text = 'gene_to_gene_feature'::text)) OR ((cvterm.name)::text = 'gene_array_member'::text)) OR ((cvterm.name)::text = 'regulated'::text)) OR ((cvterm.name)::text = 'epigenetically_modified'::text)) OR ((cvterm.name)::text = 'encodes_alternately_spliced_transcripts'::text)) OR ((cvterm.name)::text = 'encodes_alternate_transcription_start_sites'::text)) OR ((cvterm.name)::text = 'intein_containing'::text)) OR ((cvterm.name)::text = 'miRNA_encoding'::text)) OR ((cvterm.name)::text = 'rRNA_encoding'::text)) OR ((cvterm.name)::text = 'scRNA_encoding'::text)) OR ((cvterm.name)::text = 'snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'snRNA_encoding'::text)) OR ((cvterm.name)::text = 'SRP_RNA_encoding'::text)) OR ((cvterm.name)::text = 'stRNA_encoding'::text)) OR ((cvterm.name)::text = 'tmRNA_encoding'::text)) OR ((cvterm.name)::text = 'tRNA_encoding'::text)) OR ((cvterm.name)::text = 'gRNA_encoding'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'overlapping'::text)) OR ((cvterm.name)::text = 'inside_intron'::text)) OR ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'antisense'::text)) OR ((cvterm.name)::text = 'inside_intron_antiparallel'::text)) OR ((cvterm.name)::text = 'inside_intron_parallel'::text)) OR ((cvterm.name)::text = 'operon_member'::text)) OR ((cvterm.name)::text = 'gene_cassette_member'::text)) OR ((cvterm.name)::text = 'gene_subarray_member'::text)) OR ((cvterm.name)::text = 'member_of_regulon'::text)) OR ((cvterm.name)::text = 'cassette_array_member'::text)) OR ((cvterm.name)::text = 'transcriptionally_regulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated'::text)) OR ((cvterm.name)::text = 'translationally_regulated'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'transcriptionally_constitutive'::text)) OR ((cvterm.name)::text = 'transcriptionally_induced'::text)) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text)) OR ((cvterm.name)::text = 'autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'silenced'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'allelically_excluded'::text)) OR ((cvterm.name)::text = 'rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'encodes_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_greater_than_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text)) OR ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text)) OR ((cvterm.name)::text = 'homologous'::text)) OR ((cvterm.name)::text = 'syntenic'::text)) OR ((cvterm.name)::text = 'orthologous'::text)) OR ((cvterm.name)::text = 'paralogous'::text)) OR ((cvterm.name)::text = 'fragmentary'::text)) OR ((cvterm.name)::text = 'predicted'::text)) OR ((cvterm.name)::text = 'validated'::text)) OR ((cvterm.name)::text = 'invalidated'::text)) OR ((cvterm.name)::text = 'independently_known'::text)) OR ((cvterm.name)::text = 'consensus'::text)) OR ((cvterm.name)::text = 'low_complexity'::text)) OR ((cvterm.name)::text = 'whole_genome_sequence_status'::text)) OR ((cvterm.name)::text = 'supported_by_sequence_similarity'::text)) OR ((cvterm.name)::text = 'orphan'::text)) OR ((cvterm.name)::text = 'predicted_by_ab_initio_computation'::text)) OR ((cvterm.name)::text = 'supported_by_domain_match'::text)) OR ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text)) OR ((cvterm.name)::text = 'experimentally_determined'::text)) OR ((cvterm.name)::text = 'invalidated_by_chimeric_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_contamination'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_polyA_primed_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_partial_processing'::text)) OR ((cvterm.name)::text = 'standard_draft'::text)) OR ((cvterm.name)::text = 'high_quality_draft'::text)) OR ((cvterm.name)::text = 'improved_high_quality_draft'::text)) OR ((cvterm.name)::text = 'annotation_directed_improved_draft'::text)) OR ((cvterm.name)::text = 'noncontiguous_finished'::text)) OR ((cvterm.name)::text = 'finished_genome'::text)) OR ((cvterm.name)::text = 'single'::text)) OR ((cvterm.name)::text = 'double'::text)) OR ((cvterm.name)::text = 'forward'::text)) OR ((cvterm.name)::text = 'reverse'::text)) OR ((cvterm.name)::text = 'ribozymic'::text)) OR ((cvterm.name)::text = 'chromosomal_variation_attribute'::text)) OR ((cvterm.name)::text = 'insertion_attribute'::text)) OR ((cvterm.name)::text = 'inversion_attribute'::text)) OR ((cvterm.name)::text = 'translocaton_attribute'::text)) OR ((cvterm.name)::text = 'duplication_attribute'::text)) OR ((cvterm.name)::text = 'intrachromosomal'::text)) OR ((cvterm.name)::text = 'interchromosomal'::text)) OR ((cvterm.name)::text = 'tandem'::text)) OR ((cvterm.name)::text = 'direct'::text)) OR ((cvterm.name)::text = 'inverted'::text)) OR ((cvterm.name)::text = 'pericentric'::text)) OR ((cvterm.name)::text = 'paracentric'::text)) OR ((cvterm.name)::text = 'reciprocal'::text)) OR ((cvterm.name)::text = 'insertional'::text)) OR ((cvterm.name)::text = 'free'::text)) OR ((cvterm.name)::text = 'score'::text)) OR ((cvterm.name)::text = 'quality_value'::text)) OR ((cvterm.name)::text = 'organelle_sequence'::text)) OR ((cvterm.name)::text = 'plasmid_location'::text)) OR ((cvterm.name)::text = 'proviral_location'::text)) OR ((cvterm.name)::text = 'macronuclear_sequence'::text)) OR ((cvterm.name)::text = 'micronuclear_sequence'::text)) OR ((cvterm.name)::text = 'mitochondrial_sequence'::text)) OR ((cvterm.name)::text = 'nuclear_sequence'::text)) OR ((cvterm.name)::text = 'nucleomorphic_sequence'::text)) OR ((cvterm.name)::text = 'plastid_sequence'::text)) OR ((cvterm.name)::text = 'mitochondrial_DNA'::text)) OR ((cvterm.name)::text = 'apicoplast_sequence'::text)) OR ((cvterm.name)::text = 'chromoplast_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_sequence'::text)) OR ((cvterm.name)::text = 'cyanelle_sequence'::text)) OR ((cvterm.name)::text = 'leucoplast_sequence'::text)) OR ((cvterm.name)::text = 'proplastid_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_DNA'::text)) OR ((cvterm.name)::text = 'endogenous_retroviral_sequence'::text)) OR ((cvterm.name)::text = 'variant_origin'::text)) OR ((cvterm.name)::text = 'variant_frequency'::text)) OR ((cvterm.name)::text = 'variant_phenotype'::text)) OR ((cvterm.name)::text = 'maternal_variant'::text)) OR ((cvterm.name)::text = 'paternal_variant'::text)) OR ((cvterm.name)::text = 'somatic_variant'::text)) OR ((cvterm.name)::text = 'germline_variant'::text)) OR ((cvterm.name)::text = 'pedigree_specific_variant'::text)) OR ((cvterm.name)::text = 'population_specific_variant'::text)) OR ((cvterm.name)::text = 'de_novo_variant'::text)) OR ((cvterm.name)::text = 'unique_variant'::text)) OR ((cvterm.name)::text = 'rare_variant'::text)) OR ((cvterm.name)::text = 'polymorphic_variant'::text)) OR ((cvterm.name)::text = 'common_variant'::text)) OR ((cvterm.name)::text = 'fixed_variant'::text)) OR ((cvterm.name)::text = 'benign_variant'::text)) OR ((cvterm.name)::text = 'disease_associated_variant'::text)) OR ((cvterm.name)::text = 'disease_causing_variant'::text)) OR ((cvterm.name)::text = 'lethal_variant'::text)) OR ((cvterm.name)::text = 'quantitative_variant'::text)) OR ((cvterm.name)::text = 'sequence_attribute'::text));

CREATE VIEW so.sequence_collection (sequence_collection_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sequence_collection_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'kinetoplast'::text) OR ((cvterm.name)::text = 'genome'::text)) OR ((cvterm.name)::text = 'contig_collection'::text)) OR ((cvterm.name)::text = 'peptide_collection'::text)) OR ((cvterm.name)::text = 'variant_collection'::text)) OR ((cvterm.name)::text = 'kinetoplast'::text)) OR ((cvterm.name)::text = 'reference_genome'::text)) OR ((cvterm.name)::text = 'variant_genome'::text)) OR ((cvterm.name)::text = 'chromosomally_aberrant_genome'::text)) OR ((cvterm.name)::text = 'chromosome_variation'::text)) OR ((cvterm.name)::text = 'allele'::text)) OR ((cvterm.name)::text = 'haplotype'::text)) OR ((cvterm.name)::text = 'genotype'::text)) OR ((cvterm.name)::text = 'diplotype'::text)) OR ((cvterm.name)::text = 'assortment_derived_variation'::text)) OR ((cvterm.name)::text = 'chromosome_number_variation'::text)) OR ((cvterm.name)::text = 'chromosome_structure_variation'::text)) OR ((cvterm.name)::text = 'assortment_derived_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency'::text)) OR ((cvterm.name)::text = 'assortment_derived_aneuploid'::text)) OR ((cvterm.name)::text = 'aneuploid'::text)) OR ((cvterm.name)::text = 'polyploid'::text)) OR ((cvterm.name)::text = 'hyperploid'::text)) OR ((cvterm.name)::text = 'hypoploid'::text)) OR ((cvterm.name)::text = 'autopolyploid'::text)) OR ((cvterm.name)::text = 'allopolyploid'::text)) OR ((cvterm.name)::text = 'free_chromosome_arm'::text)) OR ((cvterm.name)::text = 'chromosomal_transposition'::text)) OR ((cvterm.name)::text = 'aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'intrachromosomal_mutation'::text)) OR ((cvterm.name)::text = 'interchromosomal_mutation'::text)) OR ((cvterm.name)::text = 'chromosomal_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome'::text)) OR ((cvterm.name)::text = 'autosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'complex_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'uncharacterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'chromosomal_deletion'::text)) OR ((cvterm.name)::text = 'chromosomal_inversion'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'ring_chromosome'::text)) OR ((cvterm.name)::text = 'chromosome_fission'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'pericentric_inversion'::text)) OR ((cvterm.name)::text = 'paracentric_inversion'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'translocation_element'::text)) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text)) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'cyclic_translocation'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_duplication'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'free_duplication'::text)) OR ((cvterm.name)::text = 'insertional_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'uninverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome_arm'::text)) OR ((cvterm.name)::text = 'homo_compound_chromosome'::text)) OR ((cvterm.name)::text = 'hetero_compound_chromosome'::text)) OR ((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'laevosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'polymorphic_sequence_variant'::text)) OR ((cvterm.name)::text = 'sequence_collection'::text));

CREATE VIEW so.sequence_conflict (sequence_conflict_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sequence_conflict_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'contig_collection'::text) OR ((cvterm.name)::text = 'sequence_conflict'::text));

CREATE VIEW so.sequence_difference (sequence_difference_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sequence_difference_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'possible_base_call_error'::text) OR ((cvterm.name)::text = 'possible_assembly_error'::text)) OR ((cvterm.name)::text = 'assembly_error_correction'::text)) OR ((cvterm.name)::text = 'base_call_error_correction'::text)) OR ((cvterm.name)::text = 'sequence_difference'::text));

CREATE VIEW so.sequence_feature (sequence_feature_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sequence_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
cvterm.name)::text = 'region'::text) OR ((cvterm.name)::text = 'junction'::text)) OR ((cvterm.name)::text = 'sequence_alteration'::text)) OR ((cvterm.name)::text = 'biomaterial_region'::text)) OR ((cvterm.name)::text = 'experimental_feature'::text)) OR ((cvterm.name)::text = 'biological_region'::text)) OR ((cvterm.name)::text = 'topologically_defined_region'::text)) OR ((cvterm.name)::text = 'reagent'::text)) OR ((cvterm.name)::text = 'engineered_region'::text)) OR ((cvterm.name)::text = 'PCR_product'::text)) OR ((cvterm.name)::text = 'clone'::text)) OR ((cvterm.name)::text = 'rescue_region'::text)) OR ((cvterm.name)::text = 'oligo'::text)) OR ((cvterm.name)::text = 'clone_insert'::text)) OR ((cvterm.name)::text = 'cloned_region'::text)) OR ((cvterm.name)::text = 'databank_entry'::text)) OR ((cvterm.name)::text = 'RAPD'::text)) OR ((cvterm.name)::text = 'genomic_clone'::text)) OR ((cvterm.name)::text = 'cDNA_clone'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'validated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text)) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text)) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'aptamer'::text)) OR ((cvterm.name)::text = 'probe'::text)) OR ((cvterm.name)::text = 'tag'::text)) OR ((cvterm.name)::text = 'ss_oligo'::text)) OR ((cvterm.name)::text = 'ds_oligo'::text)) OR ((cvterm.name)::text = 'DNAzyme'::text)) OR ((cvterm.name)::text = 'synthetic_oligo'::text)) OR ((cvterm.name)::text = 'DNA_aptamer'::text)) OR ((cvterm.name)::text = 'RNA_aptamer'::text)) OR ((cvterm.name)::text = 'microarray_oligo'::text)) OR ((cvterm.name)::text = 'SAGE_tag'::text)) OR ((cvterm.name)::text = 'STS'::text)) OR ((cvterm.name)::text = 'EST'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'five_prime_EST'::text)) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'primer'::text)) OR ((cvterm.name)::text = 'sequencing_primer'::text)) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'RNAi_reagent'::text)) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text)) OR ((cvterm.name)::text = 'morpholino_oligo'::text)) OR ((cvterm.name)::text = 'PNA_oligo'::text)) OR ((cvterm.name)::text = 'LNA_oligo'::text)) OR ((cvterm.name)::text = 'TNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text)) OR ((cvterm.name)::text = 'R_GNA_oligo'::text)) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'cloned_cDNA_insert'::text)) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_region'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'match_part'::text)) OR ((cvterm.name)::text = 'assembly_component'::text)) OR ((cvterm.name)::text = 'conserved_region'::text)) OR ((cvterm.name)::text = 'match'::text)) OR ((cvterm.name)::text = 'remark'::text)) OR ((cvterm.name)::text = 'reading_frame'::text)) OR ((cvterm.name)::text = 'consensus_region'::text)) OR ((cvterm.name)::text = 'low_complexity_region'::text)) OR ((cvterm.name)::text = 'assembly'::text)) OR ((cvterm.name)::text = 'transcribed_fragment'::text)) OR ((cvterm.name)::text = 'transcribed_cluster'::text)) OR ((cvterm.name)::text = 'high_identity_region'::text)) OR ((cvterm.name)::text = 'mathematically_defined_repeat'::text)) OR ((cvterm.name)::text = 'experimentally_defined_binding_region'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'read'::text)) OR ((cvterm.name)::text = 'restriction_fragment'::text)) OR ((cvterm.name)::text = 'golden_path_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_fragment'::text)) OR ((cvterm.name)::text = 'gap'::text)) OR ((cvterm.name)::text = 'sonicate_fragment'::text)) OR ((cvterm.name)::text = 'paired_end_fragment'::text)) OR ((cvterm.name)::text = 'read_pair'::text)) OR ((cvterm.name)::text = 'contig_read'::text)) OR ((cvterm.name)::text = 'BAC_end'::text)) OR ((cvterm.name)::text = 'dye_terminator_read'::text)) OR ((cvterm.name)::text = 'pyrosequenced_read'::text)) OR ((cvterm.name)::text = 'ligation_based_read'::text)) OR ((cvterm.name)::text = 'polymerase_synthesis_read'::text)) OR ((cvterm.name)::text = 'PAC_end'::text)) OR ((cvterm.name)::text = 'YAC_end'::text)) OR ((cvterm.name)::text = 'clone_end'::text)) OR ((cvterm.name)::text = 'RFLP_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'coding_conserved_region'::text)) OR ((cvterm.name)::text = 'nc_conserved_region'::text)) OR ((cvterm.name)::text = 'RR_tract'::text)) OR ((cvterm.name)::text = 'homologous_region'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_I'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_II'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_III'::text)) OR ((cvterm.name)::text = 'X_element'::text)) OR ((cvterm.name)::text = 'U_box'::text)) OR ((cvterm.name)::text = 'regional_centromere_central_core'::text)) OR ((cvterm.name)::text = 'syntenic_region'::text)) OR ((cvterm.name)::text = 'paralogous_region'::text)) OR ((cvterm.name)::text = 'orthologous_region'::text)) OR ((cvterm.name)::text = 'nucleotide_match'::text)) OR ((cvterm.name)::text = 'protein_match'::text)) OR ((cvterm.name)::text = 'expressed_sequence_match'::text)) OR ((cvterm.name)::text = 'cross_genome_match'::text)) OR ((cvterm.name)::text = 'translated_nucleotide_match'::text)) OR ((cvterm.name)::text = 'primer_match'::text)) OR ((cvterm.name)::text = 'EST_match'::text)) OR ((cvterm.name)::text = 'cDNA_match'::text)) OR ((cvterm.name)::text = 'UST_match'::text)) OR ((cvterm.name)::text = 'RST_match'::text)) OR ((cvterm.name)::text = 'sequence_difference'::text)) OR ((cvterm.name)::text = 'experimental_result_region'::text)) OR ((cvterm.name)::text = 'polypeptide_sequencing_information'::text)) OR ((cvterm.name)::text = 'possible_base_call_error'::text)) OR ((cvterm.name)::text = 'possible_assembly_error'::text)) OR ((cvterm.name)::text = 'assembly_error_correction'::text)) OR ((cvterm.name)::text = 'base_call_error_correction'::text)) OR ((cvterm.name)::text = 'overlapping_feature_set'::text)) OR ((cvterm.name)::text = 'no_output'::text)) OR ((cvterm.name)::text = 'overlapping_EST_set'::text)) OR ((cvterm.name)::text = 'non_adjacent_residues'::text)) OR ((cvterm.name)::text = 'non_terminal_residue'::text)) OR ((cvterm.name)::text = 'sequence_conflict'::text)) OR ((cvterm.name)::text = 'sequence_uncertainty'::text)) OR ((cvterm.name)::text = 'contig_collection'::text)) OR ((cvterm.name)::text = 'ORF'::text)) OR ((cvterm.name)::text = 'blocked_reading_frame'::text)) OR ((cvterm.name)::text = 'mini_gene'::text)) OR ((cvterm.name)::text = 'rescue_mini_gene'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'sequence_assembly'::text)) OR ((cvterm.name)::text = 'fragment_assembly'::text)) OR ((cvterm.name)::text = 'supercontig'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'tiling_path'::text)) OR ((cvterm.name)::text = 'virtual_sequence'::text)) OR ((cvterm.name)::text = 'golden_path'::text)) OR ((cvterm.name)::text = 'ultracontig'::text)) OR ((cvterm.name)::text = 'expressed_sequence_assembly'::text)) OR ((cvterm.name)::text = 'fingerprint_map'::text)) OR ((cvterm.name)::text = 'STS_map'::text)) OR ((cvterm.name)::text = 'RH_map'::text)) OR ((cvterm.name)::text = 'unigene_cluster'::text)) OR ((cvterm.name)::text = 'CHiP_seq_region'::text)) OR ((cvterm.name)::text = 'sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'linkage_group'::text)) OR ((cvterm.name)::text = 'polypeptide'::text)) OR ((cvterm.name)::text = 'deletion'::text)) OR ((cvterm.name)::text = 'origin_of_replication'::text)) OR ((cvterm.name)::text = 'recombination_feature'::text)) OR ((cvterm.name)::text = 'CpG_island'::text)) OR ((cvterm.name)::text = 'pseudogene'::text)) OR ((cvterm.name)::text = 'binding_site'::text)) OR ((cvterm.name)::text = 'pseudogenic_region'::text)) OR ((cvterm.name)::text = 'cap'::text)) OR ((cvterm.name)::text = 'intergenic_region'::text)) OR ((cvterm.name)::text = 'oligo_U_tail'::text)) OR ((cvterm.name)::text = 'polyA_sequence'::text)) OR ((cvterm.name)::text = 'repeat_region'::text)) OR ((cvterm.name)::text = 'insertion'::text)) OR ((cvterm.name)::text = 'gene'::text)) OR ((cvterm.name)::text = 'repeat_unit'::text)) OR ((cvterm.name)::text = 'QTL'::text)) OR ((cvterm.name)::text = 'chromosome_part'::text)) OR ((cvterm.name)::text = 'gene_member_region'::text)) OR ((cvterm.name)::text = 'transcript_region'::text)) OR ((cvterm.name)::text = 'polypeptide_region'::text)) OR ((cvterm.name)::text = 'gene_component_region'::text)) OR ((cvterm.name)::text = 'mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'replicon'::text)) OR ((cvterm.name)::text = 'base'::text)) OR ((cvterm.name)::text = 'amino_acid'::text)) OR ((cvterm.name)::text = 'genetic_marker'::text)) OR ((cvterm.name)::text = 'sequence_motif'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_recognition_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_single_strand_overhang'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_region'::text)) OR ((cvterm.name)::text = 'open_chromatin_region'::text)) OR ((cvterm.name)::text = 'gene_group'::text)) OR ((cvterm.name)::text = 'substitution'::text)) OR ((cvterm.name)::text = 'inversion'::text)) OR ((cvterm.name)::text = 'retron'::text)) OR ((cvterm.name)::text = 'G_quartet'::text)) OR ((cvterm.name)::text = 'base_pair'::text)) OR ((cvterm.name)::text = 'RNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'DNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'pseudoknot'::text)) OR ((cvterm.name)::text = 'WC_base_pair'::text)) OR ((cvterm.name)::text = 'sugar_edge_base_pair'::text)) OR ((cvterm.name)::text = 'Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'wobble_base_pair'::text)) OR ((cvterm.name)::text = 'stem_loop'::text)) OR ((cvterm.name)::text = 'tetraloop'::text)) OR ((cvterm.name)::text = 'i_motif'::text)) OR ((cvterm.name)::text = 'recoding_pseudoknot'::text)) OR ((cvterm.name)::text = 'H_pseudoknot'::text)) OR ((cvterm.name)::text = 'D_loop'::text)) OR ((cvterm.name)::text = 'ARS'::text)) OR ((cvterm.name)::text = 'oriT'::text)) OR ((cvterm.name)::text = 'amplification_origin'::text)) OR ((cvterm.name)::text = 'oriV'::text)) OR ((cvterm.name)::text = 'oriC'::text)) OR ((cvterm.name)::text = 'recombination_hotspot'::text)) OR ((cvterm.name)::text = 'haplotype_block'::text)) OR ((cvterm.name)::text = 'sequence_rearrangement_feature'::text)) OR ((cvterm.name)::text = 'iDNA'::text)) OR ((cvterm.name)::text = 'specific_recombination_site'::text)) OR ((cvterm.name)::text = 'chromosome_breakage_sequence'::text)) OR ((cvterm.name)::text = 'internal_eliminated_sequence'::text)) OR ((cvterm.name)::text = 'macronucleus_destined_segment'::text)) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text)) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text)) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'processed_pseudogene'::text)) OR ((cvterm.name)::text = 'non_processed_pseudogene'::text)) OR ((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text)) OR ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text)) OR ((cvterm.name)::text = 'cassette_pseudogene'::text)) OR ((cvterm.name)::text = 'duplicated_pseudogene'::text)) OR ((cvterm.name)::text = 'unitary_pseudogene'::text)) OR ((cvterm.name)::text = 'protein_binding_site'::text)) OR ((cvterm.name)::text = 'epitope'::text)) OR ((cvterm.name)::text = 'nucleotide_binding_site'::text)) OR ((cvterm.name)::text = 'metal_binding_site'::text)) OR ((cvterm.name)::text = 'ligand_binding_site'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_binding_site'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'histone_binding_site'::text)) OR ((cvterm.name)::text = 'insulator_binding_site'::text)) OR ((cvterm.name)::text = 'enhancer_binding_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'miRNA_target_site'::text)) OR ((cvterm.name)::text = 'DNA_binding_site'::text)) OR ((cvterm.name)::text = 'primer_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'decayed_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_transcript'::text)) OR ((cvterm.name)::text = 'pseudogenic_rRNA'::text)) OR ((cvterm.name)::text = 'pseudogenic_tRNA'::text)) OR ((cvterm.name)::text = 'long_terminal_repeat'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'inverted_repeat'::text)) OR ((cvterm.name)::text = 'direct_repeat'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'dispersed_repeat'::text)) OR ((cvterm.name)::text = 'tandem_repeat'::text)) OR ((cvterm.name)::text = 'X_element_combinatorial_repeat'::text)) OR ((cvterm.name)::text = 'Y_prime_element'::text)) OR ((cvterm.name)::text = 'telomeric_repeat'::text)) OR ((cvterm.name)::text = 'nested_repeat'::text)) OR ((cvterm.name)::text = 'centromeric_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_LTR'::text)) OR ((cvterm.name)::text = 'three_prime_LTR'::text)) OR ((cvterm.name)::text = 'solo_LTR'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'target_site_duplication'::text)) OR ((cvterm.name)::text = 'CRISPR'::text)) OR ((cvterm.name)::text = 'satellite_DNA'::text)) OR ((cvterm.name)::text = 'microsatellite'::text)) OR ((cvterm.name)::text = 'minisatellite'::text)) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'nested_tandem_repeat'::text)) OR ((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text)) OR ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text)) OR ((cvterm.name)::text = 'transgenic_insertion'::text)) OR ((cvterm.name)::text = 'duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text)) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'nuclear_gene'::text)) OR ((cvterm.name)::text = 'mt_gene'::text)) OR ((cvterm.name)::text = 'plastid_gene'::text)) OR ((cvterm.name)::text = 'nucleomorph_gene'::text)) OR ((cvterm.name)::text = 'plasmid_gene'::text)) OR ((cvterm.name)::text = 'proviral_gene'::text)) OR ((cvterm.name)::text = 'transposable_element_gene'::text)) OR ((cvterm.name)::text = 'silenced_gene'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'foreign_gene'::text)) OR ((cvterm.name)::text = 'fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_gene'::text)) OR ((cvterm.name)::text = 'gene_with_trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'rescue_gene'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'positively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'transgene'::text)) OR ((cvterm.name)::text = 'predicted_gene'::text)) OR ((cvterm.name)::text = 'protein_coding_gene'::text)) OR ((cvterm.name)::text = 'retrogene'::text)) OR ((cvterm.name)::text = 'ncRNA_gene'::text)) OR ((cvterm.name)::text = 'cryptic_gene'::text)) OR ((cvterm.name)::text = 'gene_with_non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'gene_cassette'::text)) OR ((cvterm.name)::text = 'kinetoplast_gene'::text)) OR ((cvterm.name)::text = 'maxicircle_gene'::text)) OR ((cvterm.name)::text = 'minicircle_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'apicoplast_gene'::text)) OR ((cvterm.name)::text = 'ct_gene'::text)) OR ((cvterm.name)::text = 'chromoplast_gene'::text)) OR ((cvterm.name)::text = 'cyanelle_gene'::text)) OR ((cvterm.name)::text = 'leucoplast_gene'::text)) OR ((cvterm.name)::text = 'proplastid_gene'::text)) OR ((cvterm.name)::text = 'endogenous_retroviral_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_inverted_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'wild_type_rescue_gene'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'floxed_gene'::text)) OR ((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_edited_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'gRNA_gene'::text)) OR ((cvterm.name)::text = 'miRNA_gene'::text)) OR ((cvterm.name)::text = 'scRNA_gene'::text)) OR ((cvterm.name)::text = 'snoRNA_gene'::text)) OR ((cvterm.name)::text = 'snRNA_gene'::text)) OR ((cvterm.name)::text = 'SRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'stRNA_gene'::text)) OR ((cvterm.name)::text = 'tmRNA_gene'::text)) OR ((cvterm.name)::text = 'tRNA_gene'::text)) OR ((cvterm.name)::text = 'rRNA_gene'::text)) OR ((cvterm.name)::text = 'piRNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'lincRNA_gene'::text)) OR ((cvterm.name)::text = 'telomerase_RNA_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'gene_with_start_codon_CUG'::text)) OR ((cvterm.name)::text = 'chromosome_arm'::text)) OR ((cvterm.name)::text = 'chromosome_band'::text)) OR ((cvterm.name)::text = 'interband'::text)) OR ((cvterm.name)::text = 'chromosomal_regulatory_element'::text)) OR ((cvterm.name)::text = 'chromosomal_structural_element'::text)) OR ((cvterm.name)::text = 'introgressed_chromosome_region'::text)) OR ((cvterm.name)::text = 'matrix_attachment_site'::text)) OR ((cvterm.name)::text = 'centromere'::text)) OR ((cvterm.name)::text = 'telomere'::text)) OR ((cvterm.name)::text = 'point_centromere'::text)) OR ((cvterm.name)::text = 'regional_centromere'::text)) OR ((cvterm.name)::text = 'transcript'::text)) OR ((cvterm.name)::text = 'regulatory_region'::text)) OR ((cvterm.name)::text = 'polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'primary_transcript'::text)) OR ((cvterm.name)::text = 'mature_transcript'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_protein'::text)) OR ((cvterm.name)::text = 'enzymatic_RNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_transcript'::text)) OR ((cvterm.name)::text = 'aberrant_processed_transcript'::text)) OR ((cvterm.name)::text = 'edited_transcript'::text)) OR ((cvterm.name)::text = 'processed_transcript'::text)) OR ((cvterm.name)::text = 'alternatively_spliced_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text)) OR ((cvterm.name)::text = 'nc_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text)) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text)) OR ((cvterm.name)::text = 'capped_primary_transcript'::text)) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text)) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mRNA'::text)) OR ((cvterm.name)::text = 'ncRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'scRNA'::text)) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'ribozyme'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'transcription_regulatory_region'::text)) OR ((cvterm.name)::text = 'translation_regulatory_region'::text)) OR ((cvterm.name)::text = 'recombination_regulatory_region'::text)) OR ((cvterm.name)::text = 'replication_regulatory_region'::text)) OR ((cvterm.name)::text = 'terminator'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text)) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text)) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'operator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'promoter'::text)) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'attenuator'::text)) OR ((cvterm.name)::text = 'exon'::text)) OR ((cvterm.name)::text = 'edited_transcript_feature'::text)) OR ((cvterm.name)::text = 'mature_transcript_region'::text)) OR ((cvterm.name)::text = 'primary_transcript_region'::text)) OR ((cvterm.name)::text = 'exon_region'::text)) OR ((cvterm.name)::text = 'anchor_binding_site'::text)) OR ((cvterm.name)::text = 'coding_exon'::text)) OR ((cvterm.name)::text = 'noncoding_exon'::text)) OR ((cvterm.name)::text = 'interior_exon'::text)) OR ((cvterm.name)::text = 'exon_of_single_exon_gene'::text)) OR ((cvterm.name)::text = 'interior_coding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'pre_edited_region'::text)) OR ((cvterm.name)::text = 'editing_block'::text)) OR ((cvterm.name)::text = 'editing_domain'::text)) OR ((cvterm.name)::text = 'unedited_region'::text)) OR ((cvterm.name)::text = 'mRNA_region'::text)) OR ((cvterm.name)::text = 'tmRNA_region'::text)) OR ((cvterm.name)::text = 'guide_RNA_region'::text)) OR ((cvterm.name)::text = 'tRNA_region'::text)) OR ((cvterm.name)::text = 'riboswitch'::text)) OR ((cvterm.name)::text = 'ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'UTR'::text)) OR ((cvterm.name)::text = 'CDS'::text)) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text)) OR ((cvterm.name)::text = 'UTR_region'::text)) OR ((cvterm.name)::text = 'CDS_region'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text)) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'five_prime_UTR'::text)) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_CDS'::text)) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text)) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'coding_start'::text)) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'tmRNA_coding_piece'::text)) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text)) OR ((cvterm.name)::text = 'anchor_region'::text)) OR ((cvterm.name)::text = 'template_region'::text)) OR ((cvterm.name)::text = 'anticodon_loop'::text)) OR ((cvterm.name)::text = 'anticodon'::text)) OR ((cvterm.name)::text = 'CCA_tail'::text)) OR ((cvterm.name)::text = 'DHU_loop'::text)) OR ((cvterm.name)::text = 'T_loop'::text)) OR ((cvterm.name)::text = 'splice_site'::text)) OR ((cvterm.name)::text = 'intron'::text)) OR ((cvterm.name)::text = 'clip'::text)) OR ((cvterm.name)::text = 'TSS'::text)) OR ((cvterm.name)::text = 'transcription_end_site'::text)) OR ((cvterm.name)::text = 'spliced_leader_RNA'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text)) OR ((cvterm.name)::text = 'intron_domain'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'outron'::text)) OR ((cvterm.name)::text = 'cis_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_site'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'five_prime_intron'::text)) OR ((cvterm.name)::text = 'interior_intron'::text)) OR ((cvterm.name)::text = 'three_prime_intron'::text)) OR ((cvterm.name)::text = 'twintron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text)) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'group_I_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'U2_intron'::text)) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'archaeal_intron'::text)) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'five_prime_clip'::text)) OR ((cvterm.name)::text = 'three_prime_clip'::text)) OR ((cvterm.name)::text = 'major_TSS'::text)) OR ((cvterm.name)::text = 'minor_TSS'::text)) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'branch_site'::text)) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text)) OR ((cvterm.name)::text = 'internal_guide_sequence'::text)) OR ((cvterm.name)::text = 'mirtron'::text)) OR ((cvterm.name)::text = 'pre_miRNA'::text)) OR ((cvterm.name)::text = 'miRNA_stem'::text)) OR ((cvterm.name)::text = 'miRNA_loop'::text)) OR ((cvterm.name)::text = 'miRNA_antiguide'::text)) OR ((cvterm.name)::text = 'noncoding_region_of_exon'::text)) OR ((cvterm.name)::text = 'coding_region_of_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'mature_protein_region'::text)) OR ((cvterm.name)::text = 'immature_peptide_region'::text)) OR ((cvterm.name)::text = 'compositionally_biased_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_region'::text)) OR ((cvterm.name)::text = 'polypeptide_variation_site'::text)) OR ((cvterm.name)::text = 'peptide_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_peptide_region'::text)) OR ((cvterm.name)::text = 'hydrophobic_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_region'::text)) OR ((cvterm.name)::text = 'active_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'membrane_structure'::text)) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text)) OR ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text)) OR ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'membrane_peptide_loop'::text)) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'asx_motif'::text)) OR ((cvterm.name)::text = 'beta_bulge'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text)) OR ((cvterm.name)::text = 'beta_strand'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text)) OR ((cvterm.name)::text = 'serine_threonine_motif'::text)) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text)) OR ((cvterm.name)::text = 'alpha_beta_motif'::text)) OR ((cvterm.name)::text = 'peptide_coil'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text)) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text)) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'asx_turn'::text)) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'coiled_coil'::text)) OR ((cvterm.name)::text = 'helix_turn_helix'::text)) OR ((cvterm.name)::text = 'natural_variant_site'::text)) OR ((cvterm.name)::text = 'mutated_variant_site'::text)) OR ((cvterm.name)::text = 'alternate_sequence_site'::text)) OR ((cvterm.name)::text = 'signal_peptide'::text)) OR ((cvterm.name)::text = 'transit_peptide'::text)) OR ((cvterm.name)::text = 'nuclear_localization_signal'::text)) OR ((cvterm.name)::text = 'endosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'lysosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'nuclear_export_signal'::text)) OR ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_initiator_methionine'::text)) OR ((cvterm.name)::text = 'intein'::text)) OR ((cvterm.name)::text = 'propeptide_cleavage_site'::text)) OR ((cvterm.name)::text = 'propeptide'::text)) OR ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text)) OR ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text)) OR ((cvterm.name)::text = 'n_terminal_region'::text)) OR ((cvterm.name)::text = 'c_terminal_region'::text)) OR ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'polypeptide_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_repeat'::text)) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text)) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'non_transcribed_region'::text)) OR ((cvterm.name)::text = 'gene_fragment'::text)) OR ((cvterm.name)::text = 'TSS_region'::text)) OR ((cvterm.name)::text = 'gene_segment'::text)) OR ((cvterm.name)::text = 'pseudogenic_gene_segment'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'extrachromosomal_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'integrated_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'transposable_element'::text)) OR ((cvterm.name)::text = 'proviral_region'::text)) OR ((cvterm.name)::text = 'integron'::text)) OR ((cvterm.name)::text = 'genomic_island'::text)) OR ((cvterm.name)::text = 'integrated_plasmid'::text)) OR ((cvterm.name)::text = 'cointegrated_plasmid'::text)) OR ((cvterm.name)::text = 'retrotransposon'::text)) OR ((cvterm.name)::text = 'DNA_transposon'::text)) OR ((cvterm.name)::text = 'foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'nested_transposon'::text)) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text)) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'prophage'::text)) OR ((cvterm.name)::text = 'pathogenic_island'::text)) OR ((cvterm.name)::text = 'metabolic_island'::text)) OR ((cvterm.name)::text = 'adaptive_island'::text)) OR ((cvterm.name)::text = 'symbiosis_island'::text)) OR ((cvterm.name)::text = 'cryptic_prophage'::text)) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text)) OR ((cvterm.name)::text = 'plasmid'::text)) OR ((cvterm.name)::text = 'chromosome'::text)) OR ((cvterm.name)::text = 'vector_replicon'::text)) OR ((cvterm.name)::text = 'maxicircle'::text)) OR ((cvterm.name)::text = 'minicircle'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'episome'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'mitochondrial_chromosome'::text)) OR ((cvterm.name)::text = 'chloroplast_chromosome'::text)) OR ((cvterm.name)::text = 'chromoplast_chromosome'::text)) OR ((cvterm.name)::text = 'cyanelle_chromosome'::text)) OR ((cvterm.name)::text = 'leucoplast_chromosome'::text)) OR ((cvterm.name)::text = 'macronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'micronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nucleomorphic_chromosome'::text)) OR ((cvterm.name)::text = 'DNA_chromosome'::text)) OR ((cvterm.name)::text = 'RNA_chromosome'::text)) OR ((cvterm.name)::text = 'apicoplast_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'YAC'::text)) OR ((cvterm.name)::text = 'BAC'::text)) OR ((cvterm.name)::text = 'PAC'::text)) OR ((cvterm.name)::text = 'cosmid'::text)) OR ((cvterm.name)::text = 'phagemid'::text)) OR ((cvterm.name)::text = 'fosmid'::text)) OR ((cvterm.name)::text = 'lambda_vector'::text)) OR ((cvterm.name)::text = 'plasmid_vector'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'modified_RNA_base_feature'::text)) OR ((cvterm.name)::text = 'inosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanine'::text)) OR ((cvterm.name)::text = 'ribothymidine'::text)) OR ((cvterm.name)::text = 'modified_adenosine'::text)) OR ((cvterm.name)::text = 'modified_cytidine'::text)) OR ((cvterm.name)::text = 'modified_guanosine'::text)) OR ((cvterm.name)::text = 'modified_uridine'::text)) OR ((cvterm.name)::text = 'modified_inosine'::text)) OR ((cvterm.name)::text = 'methylinosine'::text)) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'one_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text)) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text)) OR ((cvterm.name)::text = 'three_methylcytidine'::text)) OR ((cvterm.name)::text = 'five_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_thiocytidine'::text)) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text)) OR ((cvterm.name)::text = 'five_formylcytidine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'lysidine'::text)) OR ((cvterm.name)::text = 'N4_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text)) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text)) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'one_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_methylguanosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text)) OR ((cvterm.name)::text = 'wybutosine'::text)) OR ((cvterm.name)::text = 'peroxywybutosine'::text)) OR ((cvterm.name)::text = 'hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'wyosine'::text)) OR ((cvterm.name)::text = 'methylwyosine'::text)) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'four_demethylwyosine'::text)) OR ((cvterm.name)::text = 'isowyosine'::text)) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'queuosine'::text)) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'dihydrouridine'::text)) OR ((cvterm.name)::text = 'pseudouridine'::text)) OR ((cvterm.name)::text = 'five_methyluridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_thiouridine'::text)) OR ((cvterm.name)::text = 'four_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text)) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text)) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text)) OR ((cvterm.name)::text = 'five_methoxyuridine'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'three_methyluridine'::text)) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text)) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text)) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'catalytic_residue'::text)) OR ((cvterm.name)::text = 'modified_amino_acid_feature'::text)) OR ((cvterm.name)::text = 'alanine'::text)) OR ((cvterm.name)::text = 'valine'::text)) OR ((cvterm.name)::text = 'leucine'::text)) OR ((cvterm.name)::text = 'isoleucine'::text)) OR ((cvterm.name)::text = 'proline'::text)) OR ((cvterm.name)::text = 'tryptophan'::text)) OR ((cvterm.name)::text = 'phenylalanine'::text)) OR ((cvterm.name)::text = 'methionine'::text)) OR ((cvterm.name)::text = 'glycine'::text)) OR ((cvterm.name)::text = 'serine'::text)) OR ((cvterm.name)::text = 'threonine'::text)) OR ((cvterm.name)::text = 'tyrosine'::text)) OR ((cvterm.name)::text = 'cysteine'::text)) OR ((cvterm.name)::text = 'glutamine'::text)) OR ((cvterm.name)::text = 'asparagine'::text)) OR ((cvterm.name)::text = 'lysine'::text)) OR ((cvterm.name)::text = 'arginine'::text)) OR ((cvterm.name)::text = 'histidine'::text)) OR ((cvterm.name)::text = 'aspartic_acid'::text)) OR ((cvterm.name)::text = 'glutamic_acid'::text)) OR ((cvterm.name)::text = 'selenocysteine'::text)) OR ((cvterm.name)::text = 'pyrrolysine'::text)) OR ((cvterm.name)::text = 'modified_glycine'::text)) OR ((cvterm.name)::text = 'modified_L_alanine'::text)) OR ((cvterm.name)::text = 'modified_L_asparagine'::text)) OR ((cvterm.name)::text = 'modified_L_aspartic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_cysteine'::text)) OR ((cvterm.name)::text = 'modified_L_glutamic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_threonine'::text)) OR ((cvterm.name)::text = 'modified_L_tryptophan'::text)) OR ((cvterm.name)::text = 'modified_L_glutamine'::text)) OR ((cvterm.name)::text = 'modified_L_methionine'::text)) OR ((cvterm.name)::text = 'modified_L_isoleucine'::text)) OR ((cvterm.name)::text = 'modified_L_phenylalanine'::text)) OR ((cvterm.name)::text = 'modified_L_histidine'::text)) OR ((cvterm.name)::text = 'modified_L_serine'::text)) OR ((cvterm.name)::text = 'modified_L_lysine'::text)) OR ((cvterm.name)::text = 'modified_L_leucine'::text)) OR ((cvterm.name)::text = 'modified_L_selenocysteine'::text)) OR ((cvterm.name)::text = 'modified_L_valine'::text)) OR ((cvterm.name)::text = 'modified_L_proline'::text)) OR ((cvterm.name)::text = 'modified_L_tyrosine'::text)) OR ((cvterm.name)::text = 'modified_L_arginine'::text)) OR ((cvterm.name)::text = 'heritable_phenotypic_marker'::text)) OR ((cvterm.name)::text = 'DArT_marker'::text)) OR ((cvterm.name)::text = 'nucleotide_motif'::text)) OR ((cvterm.name)::text = 'DNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_motif'::text)) OR ((cvterm.name)::text = 'PSE_motif'::text)) OR ((cvterm.name)::text = 'CAAT_signal'::text)) OR ((cvterm.name)::text = 'minus_10_signal'::text)) OR ((cvterm.name)::text = 'minus_35_signal'::text)) OR ((cvterm.name)::text = 'DRE_motif'::text)) OR ((cvterm.name)::text = 'E_box_motif'::text)) OR ((cvterm.name)::text = 'INR1_motif'::text)) OR ((cvterm.name)::text = 'GAGA_motif'::text)) OR ((cvterm.name)::text = 'octamer_motif'::text)) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text)) OR ((cvterm.name)::text = 'DCE_SI'::text)) OR ((cvterm.name)::text = 'DCE_SII'::text)) OR ((cvterm.name)::text = 'DCE_SIII'::text)) OR ((cvterm.name)::text = 'minus_12_signal'::text)) OR ((cvterm.name)::text = 'minus_24_signal'::text)) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text)) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_junction_loop'::text)) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_hook_turn'::text)) OR ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'sticky_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'modified_base'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'methylated_base_feature'::text)) OR ((cvterm.name)::text = 'methylated_C'::text)) OR ((cvterm.name)::text = 'methylated_A'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'operon'::text)) OR ((cvterm.name)::text = 'mating_type_region'::text)) OR ((cvterm.name)::text = 'gene_array'::text)) OR ((cvterm.name)::text = 'gene_subarray'::text)) OR ((cvterm.name)::text = 'gene_cassette_array'::text)) OR ((cvterm.name)::text = 'regulon'::text)) OR ((cvterm.name)::text = 'sequence_length_variation'::text)) OR ((cvterm.name)::text = 'MNP'::text)) OR ((cvterm.name)::text = 'SNV'::text)) OR ((cvterm.name)::text = 'complex_substitution'::text)) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text)) OR ((cvterm.name)::text = 'SNP'::text)) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'flanking_region'::text)) OR ((cvterm.name)::text = 'repeat_component'::text)) OR ((cvterm.name)::text = 'transposable_element_flanking_region'::text)) OR ((cvterm.name)::text = 'five_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'three_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'LTR_component'::text)) OR ((cvterm.name)::text = 'repeat_fragment'::text)) OR ((cvterm.name)::text = 'transposon_fragment'::text)) OR ((cvterm.name)::text = 'U5_LTR_region'::text)) OR ((cvterm.name)::text = 'R_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_LTR_region'::text)) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'clone_insert_end'::text)) OR ((cvterm.name)::text = 'clone_insert_start'::text)) OR ((cvterm.name)::text = 'exon_junction'::text)) OR ((cvterm.name)::text = 'insertion_site'::text)) OR ((cvterm.name)::text = 'polyA_site'::text)) OR ((cvterm.name)::text = 'deletion_junction'::text)) OR ((cvterm.name)::text = 'chromosome_breakpoint'::text)) OR ((cvterm.name)::text = 'splice_junction'::text)) OR ((cvterm.name)::text = 'trans_splice_junction'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_cleavage_junction'::text)) OR ((cvterm.name)::text = 'transposable_element_insertion_site'::text)) OR ((cvterm.name)::text = 'inversion_breakpoint'::text)) OR ((cvterm.name)::text = 'translocation_breakpoint'::text)) OR ((cvterm.name)::text = 'insertion_breakpoint'::text)) OR ((cvterm.name)::text = 'deletion_breakpoint'::text)) OR ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_junction'::text)) OR ((cvterm.name)::text = 'single_strand_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'five_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'three_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'deletion'::text)) OR ((cvterm.name)::text = 'translocation'::text)) OR ((cvterm.name)::text = 'insertion'::text)) OR ((cvterm.name)::text = 'copy_number_variation'::text)) OR ((cvterm.name)::text = 'UPD'::text)) OR ((cvterm.name)::text = 'structural_alteration'::text)) OR ((cvterm.name)::text = 'substitution'::text)) OR ((cvterm.name)::text = 'indel'::text)) OR ((cvterm.name)::text = 'inversion'::text)) OR ((cvterm.name)::text = 'transgenic_insertion'::text)) OR ((cvterm.name)::text = 'duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text)) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'copy_number_gain'::text)) OR ((cvterm.name)::text = 'copy_number_loss'::text)) OR ((cvterm.name)::text = 'maternal_uniparental_disomy'::text)) OR ((cvterm.name)::text = 'paternal_uniparental_disomy'::text)) OR ((cvterm.name)::text = 'complex_structural_alteration'::text)) OR ((cvterm.name)::text = 'sequence_length_variation'::text)) OR ((cvterm.name)::text = 'MNP'::text)) OR ((cvterm.name)::text = 'SNV'::text)) OR ((cvterm.name)::text = 'complex_substitution'::text)) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text)) OR ((cvterm.name)::text = 'SNP'::text)) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'sequence_feature'::text));

CREATE VIEW so.sequence_length_variation (sequence_length_variation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sequence_length_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'simple_sequence_length_variation'::text) OR ((cvterm.name)::text = 'sequence_length_variation'::text));

CREATE VIEW so.sequence_location (sequence_location_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sequence_location_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((cvterm.name)::text = 'organelle_sequence'::text) OR ((cvterm.name)::text = 'plasmid_location'::text)) OR ((cvterm.name)::text = 'proviral_location'::text)) OR ((cvterm.name)::text = 'macronuclear_sequence'::text)) OR ((cvterm.name)::text = 'micronuclear_sequence'::text)) OR ((cvterm.name)::text = 'mitochondrial_sequence'::text)) OR ((cvterm.name)::text = 'nuclear_sequence'::text)) OR ((cvterm.name)::text = 'nucleomorphic_sequence'::text)) OR ((cvterm.name)::text = 'plastid_sequence'::text)) OR ((cvterm.name)::text = 'mitochondrial_DNA'::text)) OR ((cvterm.name)::text = 'apicoplast_sequence'::text)) OR ((cvterm.name)::text = 'chromoplast_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_sequence'::text)) OR ((cvterm.name)::text = 'cyanelle_sequence'::text)) OR ((cvterm.name)::text = 'leucoplast_sequence'::text)) OR ((cvterm.name)::text = 'proplastid_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_DNA'::text)) OR ((cvterm.name)::text = 'endogenous_retroviral_sequence'::text)) OR ((cvterm.name)::text = 'sequence_location'::text));

CREATE VIEW so.sequence_motif (sequence_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sequence_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'nucleotide_motif'::text) OR ((cvterm.name)::text = 'DNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_motif'::text)) OR ((cvterm.name)::text = 'PSE_motif'::text)) OR ((cvterm.name)::text = 'CAAT_signal'::text)) OR ((cvterm.name)::text = 'minus_10_signal'::text)) OR ((cvterm.name)::text = 'minus_35_signal'::text)) OR ((cvterm.name)::text = 'DRE_motif'::text)) OR ((cvterm.name)::text = 'E_box_motif'::text)) OR ((cvterm.name)::text = 'INR1_motif'::text)) OR ((cvterm.name)::text = 'GAGA_motif'::text)) OR ((cvterm.name)::text = 'octamer_motif'::text)) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text)) OR ((cvterm.name)::text = 'DCE_SI'::text)) OR ((cvterm.name)::text = 'DCE_SII'::text)) OR ((cvterm.name)::text = 'DCE_SIII'::text)) OR ((cvterm.name)::text = 'minus_12_signal'::text)) OR ((cvterm.name)::text = 'minus_24_signal'::text)) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text)) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_junction_loop'::text)) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_hook_turn'::text)) OR ((cvterm.name)::text = 'sequence_motif'::text));

CREATE VIEW so.sequence_rearrangement_feature (sequence_rearrangement_feature_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sequence_rearrangement_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'specific_recombination_site'::text) OR ((cvterm.name)::text = 'chromosome_breakage_sequence'::text)) OR ((cvterm.name)::text = 'internal_eliminated_sequence'::text)) OR ((cvterm.name)::text = 'macronucleus_destined_segment'::text)) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text)) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text)) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'sequence_rearrangement_feature'::text));

CREATE VIEW so.sequence_secondary_structure (sequence_secondary_structure_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sequence_secondary_structure_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((cvterm.name)::text = 'G_quartet'::text) OR ((cvterm.name)::text = 'base_pair'::text)) OR ((cvterm.name)::text = 'RNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'DNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'pseudoknot'::text)) OR ((cvterm.name)::text = 'WC_base_pair'::text)) OR ((cvterm.name)::text = 'sugar_edge_base_pair'::text)) OR ((cvterm.name)::text = 'Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'wobble_base_pair'::text)) OR ((cvterm.name)::text = 'stem_loop'::text)) OR ((cvterm.name)::text = 'tetraloop'::text)) OR ((cvterm.name)::text = 'i_motif'::text)) OR ((cvterm.name)::text = 'recoding_pseudoknot'::text)) OR ((cvterm.name)::text = 'H_pseudoknot'::text)) OR ((cvterm.name)::text = 'sequence_secondary_structure'::text));

CREATE VIEW so.sequence_uncertainty (sequence_uncertainty_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sequence_uncertainty_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'sequence_uncertainty'::text);

CREATE VIEW so.sequence_variant (sequence_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sequence_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'functional_variant'::text) OR ((cvterm.name)::text = 'structural_variant'::text)) OR ((cvterm.name)::text = 'loss_of_heterozygosity'::text)) OR ((cvterm.name)::text = 'transcript_function_variant'::text)) OR ((cvterm.name)::text = 'translational_product_function_variant'::text)) OR ((cvterm.name)::text = 'level_of_transcript_variant'::text)) OR ((cvterm.name)::text = 'transcript_processing_variant'::text)) OR ((cvterm.name)::text = 'transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'transcription_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'increased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'editing_variant'::text)) OR ((cvterm.name)::text = 'polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'increased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'increased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'rate_of_transcription_variant'::text)) OR ((cvterm.name)::text = 'increased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'translational_product_level_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_function_variant'::text)) OR ((cvterm.name)::text = 'decreased_translational_product_level'::text)) OR ((cvterm.name)::text = 'increased_translational_product_level'::text)) OR ((cvterm.name)::text = 'polypeptide_gain_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_localization_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_loss_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_post_translational_processing_variant'::text)) OR ((cvterm.name)::text = 'inactive_ligand_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text)) OR ((cvterm.name)::text = 'inactive_catalytic_site'::text)) OR ((cvterm.name)::text = 'silent_mutation'::text)) OR ((cvterm.name)::text = 'copy_number_change'::text)) OR ((cvterm.name)::text = 'gene_variant'::text)) OR ((cvterm.name)::text = 'regulatory_region_variant'::text)) OR ((cvterm.name)::text = 'intergenic_variant'::text)) OR ((cvterm.name)::text = 'upstream_gene_variant'::text)) OR ((cvterm.name)::text = 'downstream_gene_variant'::text)) OR ((cvterm.name)::text = 'gene_fusion'::text)) OR ((cvterm.name)::text = 'splicing_variant'::text)) OR ((cvterm.name)::text = 'transcript_variant'::text)) OR ((cvterm.name)::text = 'translational_product_structure_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site_variant'::text)) OR ((cvterm.name)::text = 'exon_loss'::text)) OR ((cvterm.name)::text = 'intron_gain'::text)) OR ((cvterm.name)::text = 'splice_region_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_acceptor'::text)) OR ((cvterm.name)::text = 'cryptic_splice_donor'::text)) OR ((cvterm.name)::text = 'complex_change_in_transcript'::text)) OR ((cvterm.name)::text = 'transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'nc_transcript_variant'::text)) OR ((cvterm.name)::text = 'NMD_transcript_variant'::text)) OR ((cvterm.name)::text = 'UTR_variant'::text)) OR ((cvterm.name)::text = 'intron_variant'::text)) OR ((cvterm.name)::text = 'exon_variant'::text)) OR ((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'mature_miRNA_variant'::text)) OR ((cvterm.name)::text = '5_prime_UTR_variant'::text)) OR ((cvterm.name)::text = '3_prime_UTR_variant'::text)) OR ((cvterm.name)::text = 'splice_site_variant'::text)) OR ((cvterm.name)::text = 'splice_acceptor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text)) OR ((cvterm.name)::text = 'coding_sequence_variant'::text)) OR ((cvterm.name)::text = 'non_coding_exon_variant'::text)) OR ((cvterm.name)::text = 'codon_variant'::text)) OR ((cvterm.name)::text = 'frameshift_variant'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text)) OR ((cvterm.name)::text = 'initiator_codon_change'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'frame_restoring_variant'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'inframe_codon_gain'::text)) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = '3D_polypeptide_structure_variant'::text)) OR ((cvterm.name)::text = 'complex_change_of_translational_product_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_sequence_variant'::text)) OR ((cvterm.name)::text = 'complex_3D_structural_variant'::text)) OR ((cvterm.name)::text = 'conformational_change_variant'::text)) OR ((cvterm.name)::text = 'amino_acid_deletion'::text)) OR ((cvterm.name)::text = 'amino_acid_insertion'::text)) OR ((cvterm.name)::text = 'amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide'::text)) OR ((cvterm.name)::text = 'polypeptide_fusion'::text)) OR ((cvterm.name)::text = 'polypeptide_truncation'::text)) OR ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'TF_binding_site_variant'::text)) OR ((cvterm.name)::text = '5KB_upstream_variant'::text)) OR ((cvterm.name)::text = '2KB_upstream_variant'::text)) OR ((cvterm.name)::text = '5KB_downstream_variant'::text)) OR ((cvterm.name)::text = '500B_downstream_variant'::text)) OR ((cvterm.name)::text = 'sequence_variant'::text));

CREATE VIEW so.sequencing_primer (sequencing_primer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sequencing_primer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'sequencing_primer'::text);

CREATE VIEW so.serine (serine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS serine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'serine'::text);

CREATE VIEW so.serine_threonine_motif (serine_threonine_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS serine_threonine_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'serine_threonine_motif'::text);

CREATE VIEW so.serine_threonine_staple_motif (serine_threonine_staple_motif_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS serine_threonine_staple_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'serine_threonine_staple_motif'::text);

CREATE VIEW so.serine_threonine_turn (serine_threonine_turn_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS serine_threonine_turn_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'st_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text));

CREATE VIEW so.serine_trna_primary_transcript (serine_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS serine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text);

CREATE VIEW so.seryl_trna (seryl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS seryl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'seryl_tRNA'::text);

CREATE VIEW so.seven_aminomethyl_seven_deazaguanosine (seven_aminomethyl_seven_deazaguanosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS seven_aminomethyl_seven_deazaguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text);

CREATE VIEW so.seven_cyano_seven_deazaguanosine (seven_cyano_seven_deazaguanosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS seven_cyano_seven_deazaguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text);

CREATE VIEW so.seven_deazaguanosine (seven_deazaguanosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS seven_deazaguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'queuosine'::text) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text));

CREATE VIEW so.seven_methylguanine (seven_methylguanine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS seven_methylguanine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'seven_methylguanine'::text);

CREATE VIEW so.seven_methylguanosine (seven_methylguanosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS seven_methylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'seven_methylguanosine'::text);

CREATE VIEW so.shadow_enhancer (shadow_enhancer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS shadow_enhancer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'shadow_enhancer'::text);

CREATE VIEW so.shine_dalgarno_sequence (shine_dalgarno_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS shine_dalgarno_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text);

CREATE VIEW so.signal_peptide (signal_peptide_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS signal_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'signal_peptide'::text);

CREATE VIEW so.silenced (silenced_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS silenced_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'silenced_by_DNA_modification'::text) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'silenced'::text));

CREATE VIEW so.silenced_by_dna_methylation (silenced_by_dna_methylation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS silenced_by_dna_methylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text);

CREATE VIEW so.silenced_by_dna_modification (silenced_by_dna_modification_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS silenced_by_dna_modification_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'silenced_by_DNA_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text));

CREATE VIEW so.silenced_by_histone_deacetylation (silenced_by_histone_deacetylation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS silenced_by_histone_deacetylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text);

CREATE VIEW so.silenced_by_histone_methylation (silenced_by_histone_methylation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS silenced_by_histone_methylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'silenced_by_histone_methylation'::text);

CREATE VIEW so.silenced_by_histone_modification (silenced_by_histone_modification_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS silenced_by_histone_modification_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'silenced_by_histone_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text));

CREATE VIEW so.silenced_by_rna_interference (silenced_by_rna_interference_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS silenced_by_rna_interference_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'silenced_by_RNA_interference'::text);

CREATE VIEW so.silenced_gene (silenced_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS silenced_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text) OR ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'silenced_gene'::text));

CREATE VIEW so.silencer (silencer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS silencer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'silencer'::text);

CREATE VIEW so.silent_mutation (silent_mutation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS silent_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'silent_mutation'::text);

CREATE VIEW so.simple_sequence_length_variation (simple_sequence_length_variation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS simple_sequence_length_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'simple_sequence_length_variation'::text);

CREATE VIEW so.sine_element (sine_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sine_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SINE_element'::text);

CREATE VIEW so.single (single_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS single_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'single'::text);

CREATE VIEW so.single_strand_restriction_enzyme_cleavage_site (single_strand_restriction_enzyme_cleavage_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS single_strand_restriction_enzyme_cleavage_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'five_prime_restriction_enzyme_junction'::text) OR ((cvterm.name)::text = 'three_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'single_strand_restriction_enzyme_cleavage_site'::text));

CREATE VIEW so.single_stranded_cdna (single_stranded_cdna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS single_stranded_cdna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'single_stranded_cDNA'::text);

CREATE VIEW so.single_stranded_dna_chromosome (single_stranded_dna_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS single_stranded_dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text));

CREATE VIEW so.single_stranded_rna_chromosome (single_stranded_rna_chromosome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS single_stranded_rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text));

CREATE VIEW so.sirna (sirna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sirna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'siRNA'::text);

CREATE VIEW so.site_specific_recombination_target_region (site_specific_recombination_target_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS site_specific_recombination_target_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((cvterm.name)::text = 'integration_excision_site'::text) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text));

CREATE VIEW so.sl10_accceptor_site (sl10_accceptor_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sl10_accceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL10_accceptor_site'::text);

CREATE VIEW so.sl11_acceptor_site (sl11_acceptor_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sl11_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL11_acceptor_site'::text);

CREATE VIEW so.sl12_acceptor_site (sl12_acceptor_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sl12_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL12_acceptor_site'::text);

CREATE VIEW so.sl1_acceptor_site (sl1_acceptor_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sl1_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL1_acceptor_site'::text);

CREATE VIEW so.sl2_acceptor_site (sl2_acceptor_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sl2_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'SL3_acceptor_site'::text) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text));

CREATE VIEW so.sl3_acceptor_site (sl3_acceptor_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sl3_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL3_acceptor_site'::text);

CREATE VIEW so.sl4_acceptor_site (sl4_acceptor_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sl4_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL4_acceptor_site'::text);

CREATE VIEW so.sl5_acceptor_site (sl5_acceptor_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sl5_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL5_acceptor_site'::text);

CREATE VIEW so.sl6_acceptor_site (sl6_acceptor_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sl6_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL6_acceptor_site'::text);

CREATE VIEW so.sl7_acceptor_site (sl7_acceptor_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sl7_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL7_acceptor_site'::text);

CREATE VIEW so.sl8_acceptor_site (sl8_acceptor_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sl8_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL8_acceptor_site'::text);

CREATE VIEW so.sl9_acceptor_site (sl9_acceptor_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sl9_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL9_acceptor_site'::text);

CREATE VIEW so.small_regulatory_ncrna (small_regulatory_ncrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS small_regulatory_ncrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'miRNA'::text) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text));

CREATE VIEW so.small_subunit_rrna (small_subunit_rrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS small_subunit_rrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'rRNA_18S'::text) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text));

CREATE VIEW so.snorna (snorna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'C_D_box_snoRNA'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text));

CREATE VIEW so.snorna_encoding (snorna_encoding_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS snorna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'snoRNA_encoding'::text));

CREATE VIEW so.snorna_gene (snorna_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS snorna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'snoRNA_gene'::text);

CREATE VIEW so.snorna_primary_transcript (snorna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS snorna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text));

CREATE VIEW so.snp (snp_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS snp_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SNP'::text);

CREATE VIEW so.snrna (snrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((cvterm.name)::text = 'U1_snRNA'::text) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text));

CREATE VIEW so.snrna_encoding (snrna_encoding_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS snrna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'snRNA_encoding'::text);

CREATE VIEW so.snrna_gene (snrna_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS snrna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'snRNA_gene'::text);

CREATE VIEW so.snrna_primary_transcript (snrna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS snrna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'snRNA_primary_transcript'::text);

CREATE VIEW so.snv (snv_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS snv_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((cvterm.name)::text = 'SNP'::text) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'SNV'::text));

CREATE VIEW so.so_foreign (so_foreign_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS so_foreign_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'foreign'::text);

CREATE VIEW so.so_genotype (so_genotype_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS so_genotype_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'genotype'::text);

CREATE VIEW so.so_natural (so_natural_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS so_natural_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'natural'::text);

CREATE VIEW so.solo_ltr (solo_ltr_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS solo_ltr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'solo_LTR'::text);

CREATE VIEW so.somatic_variant (somatic_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS somatic_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'somatic_variant'::text);

CREATE VIEW so.sonicate_fragment (sonicate_fragment_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sonicate_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'sonicate_fragment'::text);

CREATE VIEW so.sp6_rna_polymerase_promoter (sp6_rna_polymerase_promoter_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sp6_rna_polymerase_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text);

CREATE VIEW so.specific_recombination_site (specific_recombination_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS specific_recombination_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text)) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'specific_recombination_site'::text));

CREATE VIEW so.splice_acceptor_variant (splice_acceptor_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS splice_acceptor_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'splice_acceptor_variant'::text);

CREATE VIEW so.splice_donor_5th_base_variant (splice_donor_5th_base_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS splice_donor_5th_base_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text);

CREATE VIEW so.splice_donor_variant (splice_donor_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS splice_donor_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'splice_donor_variant'::text);

CREATE VIEW so.splice_enhancer (splice_enhancer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS splice_enhancer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'intronic_splice_enhancer'::text) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text));

CREATE VIEW so.splice_junction (splice_junction_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS splice_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'splice_junction'::text);

CREATE VIEW so.splice_region_variant (splice_region_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS splice_region_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'splice_region_variant'::text);

CREATE VIEW so.splice_site (splice_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((cvterm.name)::text = 'cis_splice_site'::text) OR ((cvterm.name)::text = 'trans_splice_site'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'splice_site'::text));

CREATE VIEW so.splice_site_variant (splice_site_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS splice_site_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'splice_acceptor_variant'::text) OR ((cvterm.name)::text = 'splice_donor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text)) OR ((cvterm.name)::text = 'splice_site_variant'::text));

CREATE VIEW so.spliced_leader_rna (spliced_leader_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS spliced_leader_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'spliced_leader_RNA'::text);

CREATE VIEW so.spliceosomal_intron (spliceosomal_intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS spliceosomal_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'U2_intron'::text) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text));

CREATE VIEW so.spliceosomal_intron_region (spliceosomal_intron_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS spliceosomal_intron_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'intronic_splice_enhancer'::text) OR ((cvterm.name)::text = 'branch_site'::text)) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text));

CREATE VIEW so.splicing_regulatory_region (splicing_regulatory_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS splicing_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'splice_enhancer'::text) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text));

CREATE VIEW so.splicing_variant (splicing_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS splicing_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'cryptic_splice_site_variant'::text) OR ((cvterm.name)::text = 'exon_loss'::text)) OR ((cvterm.name)::text = 'intron_gain'::text)) OR ((cvterm.name)::text = 'splice_region_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_acceptor'::text)) OR ((cvterm.name)::text = 'cryptic_splice_donor'::text)) OR ((cvterm.name)::text = 'splicing_variant'::text));

CREATE VIEW so.spot_42_rna (spot_42_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS spot_42_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'spot_42_RNA'::text);

CREATE VIEW so.srp_rna (srp_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS srp_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SRP_RNA'::text);

CREATE VIEW so.srp_rna_encoding (srp_rna_encoding_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS srp_rna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SRP_RNA_encoding'::text);

CREATE VIEW so.srp_rna_gene (srp_rna_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS srp_rna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SRP_RNA_gene'::text);

CREATE VIEW so.srp_rna_primary_transcript (srp_rna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS srp_rna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text);

CREATE VIEW so.ss_oligo (ss_oligo_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ss_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'primer'::text) OR ((cvterm.name)::text = 'sequencing_primer'::text)) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'ss_oligo'::text));

CREATE VIEW so.ss_rna_viral_sequence (ss_rna_viral_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ss_rna_viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text));

CREATE VIEW so.st_turn_left_handed_type_one (st_turn_left_handed_type_one_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS st_turn_left_handed_type_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text);

CREATE VIEW so.st_turn_left_handed_type_two (st_turn_left_handed_type_two_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS st_turn_left_handed_type_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text);

CREATE VIEW so.st_turn_right_handed_type_one (st_turn_right_handed_type_one_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS st_turn_right_handed_type_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text);

CREATE VIEW so.st_turn_right_handed_type_two (st_turn_right_handed_type_two_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS st_turn_right_handed_type_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text);

CREATE VIEW so.standard_draft (standard_draft_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS standard_draft_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'standard_draft'::text);

CREATE VIEW so.start_codon (start_codon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS start_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'non_canonical_start_codon'::text) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text));

CREATE VIEW so.status (status_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS status_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((cvterm.name)::text = 'fragmentary'::text) OR ((cvterm.name)::text = 'predicted'::text)) OR ((cvterm.name)::text = 'validated'::text)) OR ((cvterm.name)::text = 'invalidated'::text)) OR ((cvterm.name)::text = 'independently_known'::text)) OR ((cvterm.name)::text = 'consensus'::text)) OR ((cvterm.name)::text = 'low_complexity'::text)) OR ((cvterm.name)::text = 'whole_genome_sequence_status'::text)) OR ((cvterm.name)::text = 'supported_by_sequence_similarity'::text)) OR ((cvterm.name)::text = 'orphan'::text)) OR ((cvterm.name)::text = 'predicted_by_ab_initio_computation'::text)) OR ((cvterm.name)::text = 'supported_by_domain_match'::text)) OR ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text)) OR ((cvterm.name)::text = 'experimentally_determined'::text)) OR ((cvterm.name)::text = 'invalidated_by_chimeric_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_contamination'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_polyA_primed_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_partial_processing'::text)) OR ((cvterm.name)::text = 'standard_draft'::text)) OR ((cvterm.name)::text = 'high_quality_draft'::text)) OR ((cvterm.name)::text = 'improved_high_quality_draft'::text)) OR ((cvterm.name)::text = 'annotation_directed_improved_draft'::text)) OR ((cvterm.name)::text = 'noncontiguous_finished'::text)) OR ((cvterm.name)::text = 'finished_genome'::text)) OR ((cvterm.name)::text = 'status'::text));

CREATE VIEW so.stem_loop (stem_loop_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS stem_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'tetraloop'::text) OR ((cvterm.name)::text = 'stem_loop'::text));

CREATE VIEW so.sticky_end_restriction_enzyme_cleavage_site (sticky_end_restriction_enzyme_cleavage_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sticky_end_restriction_enzyme_cleavage_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'sticky_end_restriction_enzyme_cleavage_site'::text);

CREATE VIEW so.stop_codon (stop_codon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS stop_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stop_codon'::text);

CREATE VIEW so.stop_codon_read_through (stop_codon_read_through_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS stop_codon_read_through_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text));

CREATE VIEW so.stop_codon_redefined_as_pyrrolysine (stop_codon_redefined_as_pyrrolysine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS stop_codon_redefined_as_pyrrolysine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text);

CREATE VIEW so.stop_codon_redefined_as_selenocysteine (stop_codon_redefined_as_selenocysteine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS stop_codon_redefined_as_selenocysteine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text);

CREATE VIEW so.stop_codon_signal (stop_codon_signal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS stop_codon_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'UAG_stop_codon_signal'::text) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text));

CREATE VIEW so.stop_gained (stop_gained_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS stop_gained_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stop_gained'::text);

CREATE VIEW so.stop_lost (stop_lost_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS stop_lost_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stop_lost'::text);

CREATE VIEW so.stop_retained_variant (stop_retained_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS stop_retained_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stop_retained_variant'::text);

CREATE VIEW so.strand_attribute (strand_attribute_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS strand_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'single'::text) OR ((cvterm.name)::text = 'double'::text)) OR ((cvterm.name)::text = 'strand_attribute'::text));

CREATE VIEW so.strna (strna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS strna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stRNA'::text);

CREATE VIEW so.strna_encoding (strna_encoding_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS strna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stRNA_encoding'::text);

CREATE VIEW so.strna_gene (strna_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS strna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stRNA_gene'::text);

CREATE VIEW so.strna_primary_transcript (strna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS strna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stRNA_primary_transcript'::text);

CREATE VIEW so.structural_alteration (structural_alteration_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS structural_alteration_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'complex_structural_alteration'::text) OR ((cvterm.name)::text = 'structural_alteration'::text));

CREATE VIEW so.structural_variant (structural_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS structural_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'silent_mutation'::text) OR ((cvterm.name)::text = 'copy_number_change'::text)) OR ((cvterm.name)::text = 'gene_variant'::text)) OR ((cvterm.name)::text = 'regulatory_region_variant'::text)) OR ((cvterm.name)::text = 'intergenic_variant'::text)) OR ((cvterm.name)::text = 'upstream_gene_variant'::text)) OR ((cvterm.name)::text = 'downstream_gene_variant'::text)) OR ((cvterm.name)::text = 'gene_fusion'::text)) OR ((cvterm.name)::text = 'splicing_variant'::text)) OR ((cvterm.name)::text = 'transcript_variant'::text)) OR ((cvterm.name)::text = 'translational_product_structure_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site_variant'::text)) OR ((cvterm.name)::text = 'exon_loss'::text)) OR ((cvterm.name)::text = 'intron_gain'::text)) OR ((cvterm.name)::text = 'splice_region_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_acceptor'::text)) OR ((cvterm.name)::text = 'cryptic_splice_donor'::text)) OR ((cvterm.name)::text = 'complex_change_in_transcript'::text)) OR ((cvterm.name)::text = 'transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'nc_transcript_variant'::text)) OR ((cvterm.name)::text = 'NMD_transcript_variant'::text)) OR ((cvterm.name)::text = 'UTR_variant'::text)) OR ((cvterm.name)::text = 'intron_variant'::text)) OR ((cvterm.name)::text = 'exon_variant'::text)) OR ((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'mature_miRNA_variant'::text)) OR ((cvterm.name)::text = '5_prime_UTR_variant'::text)) OR ((cvterm.name)::text = '3_prime_UTR_variant'::text)) OR ((cvterm.name)::text = 'splice_site_variant'::text)) OR ((cvterm.name)::text = 'splice_acceptor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text)) OR ((cvterm.name)::text = 'coding_sequence_variant'::text)) OR ((cvterm.name)::text = 'non_coding_exon_variant'::text)) OR ((cvterm.name)::text = 'codon_variant'::text)) OR ((cvterm.name)::text = 'frameshift_variant'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text)) OR ((cvterm.name)::text = 'initiator_codon_change'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'frame_restoring_variant'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'inframe_codon_gain'::text)) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = '3D_polypeptide_structure_variant'::text)) OR ((cvterm.name)::text = 'complex_change_of_translational_product_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_sequence_variant'::text)) OR ((cvterm.name)::text = 'complex_3D_structural_variant'::text)) OR ((cvterm.name)::text = 'conformational_change_variant'::text)) OR ((cvterm.name)::text = 'amino_acid_deletion'::text)) OR ((cvterm.name)::text = 'amino_acid_insertion'::text)) OR ((cvterm.name)::text = 'amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide'::text)) OR ((cvterm.name)::text = 'polypeptide_fusion'::text)) OR ((cvterm.name)::text = 'polypeptide_truncation'::text)) OR ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'TF_binding_site_variant'::text)) OR ((cvterm.name)::text = '5KB_upstream_variant'::text)) OR ((cvterm.name)::text = '2KB_upstream_variant'::text)) OR ((cvterm.name)::text = '5KB_downstream_variant'::text)) OR ((cvterm.name)::text = '500B_downstream_variant'::text)) OR ((cvterm.name)::text = 'structural_variant'::text));

CREATE VIEW so.sts (sts_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sts_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'STS'::text);

CREATE VIEW so.sts_map (sts_map_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sts_map_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'STS_map'::text);

CREATE VIEW so.substitution (substitution_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS substitution_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((cvterm.name)::text = 'sequence_length_variation'::text) OR ((cvterm.name)::text = 'MNP'::text)) OR ((cvterm.name)::text = 'SNV'::text)) OR ((cvterm.name)::text = 'complex_substitution'::text)) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text)) OR ((cvterm.name)::text = 'SNP'::text)) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'substitution'::text));

CREATE VIEW so.sugar_edge_base_pair (sugar_edge_base_pair_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS sugar_edge_base_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'sugar_edge_base_pair'::text);

CREATE VIEW so.supercontig (supercontig_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS supercontig_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'supercontig'::text);

CREATE VIEW so.supported_by_domain_match (supported_by_domain_match_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS supported_by_domain_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'supported_by_domain_match'::text);

CREATE VIEW so.supported_by_est_or_cdna (supported_by_est_or_cdna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS supported_by_est_or_cdna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text);

CREATE VIEW so.supported_by_sequence_similarity (supported_by_sequence_similarity_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS supported_by_sequence_similarity_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'supported_by_domain_match'::text) OR ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text)) OR ((cvterm.name)::text = 'supported_by_sequence_similarity'::text));

CREATE VIEW so.symbiosis_island (symbiosis_island_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS symbiosis_island_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'symbiosis_island'::text);

CREATE VIEW so.symmetric_rna_internal_loop (symmetric_rna_internal_loop_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS symmetric_rna_internal_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text);

CREATE VIEW so.synonymous_codon (synonymous_codon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS synonymous_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'synonymous_codon'::text);

CREATE VIEW so.syntenic (syntenic_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS syntenic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'syntenic'::text);

CREATE VIEW so.syntenic_region (syntenic_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS syntenic_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'syntenic_region'::text);

CREATE VIEW so.synthetic_oligo (synthetic_oligo_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS synthetic_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'morpholino_oligo'::text) OR ((cvterm.name)::text = 'PNA_oligo'::text)) OR ((cvterm.name)::text = 'LNA_oligo'::text)) OR ((cvterm.name)::text = 'TNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text)) OR ((cvterm.name)::text = 'R_GNA_oligo'::text)) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'synthetic_oligo'::text));

CREATE VIEW so.synthetic_sequence (synthetic_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS synthetic_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'random_sequence'::text) OR ((cvterm.name)::text = 'designed_sequence'::text)) OR ((cvterm.name)::text = 'synthetic_sequence'::text));

CREATE VIEW so.t3_rna_polymerase_promoter (t3_rna_polymerase_promoter_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS t3_rna_polymerase_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text);

CREATE VIEW so.t7_rna_polymerase_promoter (t7_rna_polymerase_promoter_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS t7_rna_polymerase_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text);

CREATE VIEW so.t_loop (t_loop_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS t_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'T_loop'::text);

CREATE VIEW so.t_to_a_transversion (t_to_a_transversion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS t_to_a_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'T_to_A_transversion'::text);

CREATE VIEW so.t_to_c_transition (t_to_c_transition_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS t_to_c_transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'T_to_C_transition'::text);

CREATE VIEW so.t_to_g_transversion (t_to_g_transversion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS t_to_g_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'T_to_G_transversion'::text);

CREATE VIEW so.tag (tag_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tag_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((cvterm.name)::text = 'SAGE_tag'::text) OR ((cvterm.name)::text = 'STS'::text)) OR ((cvterm.name)::text = 'EST'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'five_prime_EST'::text)) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'tag'::text));

CREATE VIEW so.tandem (tandem_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tandem_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tandem'::text);

CREATE VIEW so.tandem_duplication (tandem_duplication_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tandem_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'direct_tandem_duplication'::text) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text));

CREATE VIEW so.tandem_repeat (tandem_repeat_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tandem_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'satellite_DNA'::text) OR ((cvterm.name)::text = 'microsatellite'::text)) OR ((cvterm.name)::text = 'minisatellite'::text)) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tandem_repeat'::text));

CREATE VIEW so.target_site_duplication (target_site_duplication_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS target_site_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'target_site_duplication'::text);

CREATE VIEW so.targeting_vector (targeting_vector_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS targeting_vector_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'targeting_vector'::text);

CREATE VIEW so.tasirna (tasirna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tasirna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tasiRNA'::text);

CREATE VIEW so.tasirna_primary_transcript (tasirna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tasirna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text);

CREATE VIEW so.tata_box (tata_box_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tata_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'TATA_box'::text));

CREATE VIEW so.telomerase_rna (telomerase_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS telomerase_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'telomerase_RNA'::text);

CREATE VIEW so.telomerase_rna_gene (telomerase_rna_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS telomerase_rna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'telomerase_RNA_gene'::text);

CREATE VIEW so.telomere (telomere_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS telomere_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'telomere'::text);

CREATE VIEW so.telomeric_repeat (telomeric_repeat_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS telomeric_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'telomeric_repeat'::text);

CREATE VIEW so.template_region (template_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS template_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'template_region'::text);

CREATE VIEW so.terminal_codon_variant (terminal_codon_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS terminal_codon_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'terminator_codon_variant'::text) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text));

CREATE VIEW so.terminal_inverted_repeat (terminal_inverted_repeat_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS terminal_inverted_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat'::text));

CREATE VIEW so.terminal_inverted_repeat_element (terminal_inverted_repeat_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS terminal_inverted_repeat_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'MITE'::text) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text));

CREATE VIEW so.terminator (terminator_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS terminator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'bacterial_terminator'::text) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'terminator'::text));

CREATE VIEW so.terminator_codon_variant (terminator_codon_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS terminator_codon_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'stop_retained_variant'::text) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text));

CREATE VIEW so.terminator_of_type_2_rnapol_iii_promoter (terminator_of_type_2_rnapol_iii_promoter_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS terminator_of_type_2_rnapol_iii_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text);

CREATE VIEW so.tetraloop (tetraloop_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tetraloop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tetraloop'::text);

CREATE VIEW so.tetranuc_repeat_microsat (tetranuc_repeat_microsat_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tetranuc_repeat_microsat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text);

CREATE VIEW so.tf_binding_site (tf_binding_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tf_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'TF_binding_site'::text);

CREATE VIEW so.tf_binding_site_variant (tf_binding_site_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tf_binding_site_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'TF_binding_site_variant'::text);

CREATE VIEW so.thr_trna_primary_transcript (thr_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS thr_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text);

CREATE VIEW so.three_methylcytidine (three_methylcytidine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_methylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_methylcytidine'::text);

CREATE VIEW so.three_methylpseudouridine (three_methylpseudouridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_methylpseudouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_methylpseudouridine'::text);

CREATE VIEW so.three_methyluridine (three_methyluridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_methyluridine'::text);

CREATE VIEW so.three_prime_cis_splice_site (three_prime_cis_splice_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_cis_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'canonical_three_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text));

CREATE VIEW so.three_prime_clip (three_prime_clip_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_clip_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_clip'::text);

CREATE VIEW so.three_prime_coding_exon (three_prime_coding_exon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_coding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_coding_exon'::text);

CREATE VIEW so.three_prime_coding_exon_coding_region (three_prime_coding_exon_coding_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_coding_exon_coding_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text);

CREATE VIEW so.three_prime_coding_exon_noncoding_region (three_prime_coding_exon_noncoding_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_coding_exon_noncoding_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text);

CREATE VIEW so.three_prime_d_heptamer (three_prime_d_heptamer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_d_heptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_D_heptamer'::text);

CREATE VIEW so.three_prime_d_nonamer (three_prime_d_nonamer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_d_nonamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_D_nonamer'::text);

CREATE VIEW so.three_prime_d_recombination_signal_sequence (three_prime_d_recombination_signal_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_d_recombination_signal_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text);

CREATE VIEW so.three_prime_d_spacer (three_prime_d_spacer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_d_spacer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_D_spacer'::text);

CREATE VIEW so.three_prime_est (three_prime_est_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_est_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_EST'::text);

CREATE VIEW so.three_prime_five_prime_overlap (three_prime_five_prime_overlap_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_five_prime_overlap_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text);

CREATE VIEW so.three_prime_flanking_region (three_prime_flanking_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_flanking_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_flanking_region'::text);

CREATE VIEW so.three_prime_intron (three_prime_intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_intron'::text);

CREATE VIEW so.three_prime_ltr (three_prime_ltr_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_ltr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_LTR'::text);

CREATE VIEW so.three_prime_ltr_component (three_prime_ltr_component_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_ltr_component_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'R_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text));

CREATE VIEW so.three_prime_noncoding_exon (three_prime_noncoding_exon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_noncoding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_noncoding_exon'::text);

CREATE VIEW so.three_prime_race_clone (three_prime_race_clone_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_race_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_RACE_clone'::text);

CREATE VIEW so.three_prime_recoding_site (three_prime_recoding_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_recoding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'three_prime_stem_loop_structure'::text) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text));

CREATE VIEW so.three_prime_repeat_recoding_signal (three_prime_repeat_recoding_signal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_repeat_recoding_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text);

CREATE VIEW so.three_prime_restriction_enzyme_junction (three_prime_restriction_enzyme_junction_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_restriction_enzyme_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_restriction_enzyme_junction'::text);

CREATE VIEW so.three_prime_rst (three_prime_rst_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_rst_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_RST'::text);

CREATE VIEW so.three_prime_stem_loop_structure (three_prime_stem_loop_structure_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_stem_loop_structure_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text);

CREATE VIEW so.three_prime_terminal_inverted_repeat (three_prime_terminal_inverted_repeat_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_terminal_inverted_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text);

CREATE VIEW so.three_prime_three_prime_overlap (three_prime_three_prime_overlap_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_three_prime_overlap_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text);

CREATE VIEW so.three_prime_ust (three_prime_ust_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_ust_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_UST'::text);

CREATE VIEW so.three_prime_utr (three_prime_utr_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_utr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_UTR'::text);

CREATE VIEW so.three_prime_utr_intron (three_prime_utr_intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_utr_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_UTR_intron'::text);

CREATE VIEW so.three_prime_utr_variant (three_prime_utr_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_prime_utr_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = '3_prime_UTR_variant'::text);

CREATE VIEW so.three_ten_helix (three_ten_helix_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_ten_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_ten_helix'::text);

CREATE VIEW so.three_three_amino_three_carboxypropyl_uridine (three_three_amino_three_carboxypropyl_uridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_three_amino_three_carboxypropyl_uridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text);

CREATE VIEW so.three_two_prime_o_dimethyluridine (three_two_prime_o_dimethyluridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS three_two_prime_o_dimethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text);

CREATE VIEW so.threed_polypeptide_structure_variant (threed_polypeptide_structure_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS threed_polypeptide_structure_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'complex_3D_structural_variant'::text) OR ((cvterm.name)::text = 'conformational_change_variant'::text)) OR ((cvterm.name)::text = '3D_polypeptide_structure_variant'::text));

CREATE VIEW so.threonine (threonine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS threonine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'threonine'::text);

CREATE VIEW so.threonyl_trna (threonyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS threonyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'threonyl_tRNA'::text);

CREATE VIEW so.tiling_path (tiling_path_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tiling_path_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tiling_path'::text);

CREATE VIEW so.tiling_path_clone (tiling_path_clone_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tiling_path_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tiling_path_clone'::text);

CREATE VIEW so.tiling_path_fragment (tiling_path_fragment_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tiling_path_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'tiling_path_clone'::text) OR ((cvterm.name)::text = 'tiling_path_fragment'::text));

CREATE VIEW so.tmrna (tmrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tmrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tmRNA'::text);

CREATE VIEW so.tmrna_acceptor_piece (tmrna_acceptor_piece_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tmrna_acceptor_piece_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text);

CREATE VIEW so.tmrna_coding_piece (tmrna_coding_piece_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tmrna_coding_piece_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tmRNA_coding_piece'::text);

CREATE VIEW so.tmrna_encoding (tmrna_encoding_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tmrna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tmRNA_encoding'::text);

CREATE VIEW so.tmrna_gene (tmrna_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tmrna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tmRNA_gene'::text);

CREATE VIEW so.tmrna_primary_transcript (tmrna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tmrna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tmRNA_primary_transcript'::text);

CREATE VIEW so.tmrna_region (tmrna_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tmrna_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'tmRNA_coding_piece'::text) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text)) OR ((cvterm.name)::text = 'tmRNA_region'::text));

CREATE VIEW so.tna (tna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'TNA'::text);

CREATE VIEW so.tna_oligo (tna_oligo_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tna_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'TNA_oligo'::text);

CREATE VIEW so.topologically_defined_region (topologically_defined_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS topologically_defined_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((cvterm.name)::text = 'flanking_region'::text) OR ((cvterm.name)::text = 'repeat_component'::text)) OR ((cvterm.name)::text = 'transposable_element_flanking_region'::text)) OR ((cvterm.name)::text = 'five_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'three_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'LTR_component'::text)) OR ((cvterm.name)::text = 'repeat_fragment'::text)) OR ((cvterm.name)::text = 'transposon_fragment'::text)) OR ((cvterm.name)::text = 'U5_LTR_region'::text)) OR ((cvterm.name)::text = 'R_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_LTR_region'::text)) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'topologically_defined_region'::text));

CREATE VIEW so.topology_attribute (topology_attribute_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS topology_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'linear'::text) OR ((cvterm.name)::text = 'circular'::text)) OR ((cvterm.name)::text = 'topology_attribute'::text));

CREATE VIEW so.trans_splice_acceptor_site (trans_splice_acceptor_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS trans_splice_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((cvterm.name)::text = 'SL1_acceptor_site'::text) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text));

CREATE VIEW so.trans_splice_donor_site (trans_splice_donor_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS trans_splice_donor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'trans_splice_donor_site'::text);

CREATE VIEW so.trans_splice_junction (trans_splice_junction_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS trans_splice_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'trans_splice_junction'::text);

CREATE VIEW so.trans_splice_site (trans_splice_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS trans_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((cvterm.name)::text = 'trans_splice_acceptor_site'::text) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_site'::text));

CREATE VIEW so.trans_spliced (trans_spliced_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS trans_spliced_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'trans_spliced'::text);

CREATE VIEW so.trans_spliced_mrna (trans_spliced_mrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS trans_spliced_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'trans_spliced_mRNA'::text);

CREATE VIEW so.trans_spliced_transcript (trans_spliced_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS trans_spliced_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'trans_spliced_mRNA'::text) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text));

CREATE VIEW so.transcribed_cluster (transcribed_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcribed_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'unigene_cluster'::text) OR ((cvterm.name)::text = 'transcribed_cluster'::text));

CREATE VIEW so.transcribed_fragment (transcribed_fragment_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcribed_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transcribed_fragment'::text);

CREATE VIEW so.transcribed_spacer_region (transcribed_spacer_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcribed_spacer_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'internal_transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text));

CREATE VIEW so.transcript (transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'polycistronic_transcript'::text) OR ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'primary_transcript'::text)) OR ((cvterm.name)::text = 'mature_transcript'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_protein'::text)) OR ((cvterm.name)::text = 'enzymatic_RNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_transcript'::text)) OR ((cvterm.name)::text = 'aberrant_processed_transcript'::text)) OR ((cvterm.name)::text = 'edited_transcript'::text)) OR ((cvterm.name)::text = 'processed_transcript'::text)) OR ((cvterm.name)::text = 'alternatively_spliced_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text)) OR ((cvterm.name)::text = 'nc_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text)) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text)) OR ((cvterm.name)::text = 'capped_primary_transcript'::text)) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text)) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mRNA'::text)) OR ((cvterm.name)::text = 'ncRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'scRNA'::text)) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'ribozyme'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'transcript'::text));

CREATE VIEW so.transcript_attribute (transcript_attribute_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcript_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((cvterm.name)::text = 'edited'::text) OR ((cvterm.name)::text = 'capped'::text)) OR ((cvterm.name)::text = 'mRNA_attribute'::text)) OR ((cvterm.name)::text = 'trans_spliced'::text)) OR ((cvterm.name)::text = 'alternatively_spliced'::text)) OR ((cvterm.name)::text = 'monocistronic'::text)) OR ((cvterm.name)::text = 'polycistronic'::text)) OR ((cvterm.name)::text = 'polyadenylated'::text)) OR ((cvterm.name)::text = 'exemplar'::text)) OR ((cvterm.name)::text = 'frameshift'::text)) OR ((cvterm.name)::text = 'recoded'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_framshift'::text)) OR ((cvterm.name)::text = 'codon_redefined'::text)) OR ((cvterm.name)::text = 'recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'dicistronic'::text)) OR ((cvterm.name)::text = 'transcript_attribute'::text));

CREATE VIEW so.transcript_bound_by_nucleic_acid (transcript_bound_by_nucleic_acid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcript_bound_by_nucleic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text);

CREATE VIEW so.transcript_bound_by_protein (transcript_bound_by_protein_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcript_bound_by_protein_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transcript_bound_by_protein'::text);

CREATE VIEW so.transcript_function_variant (transcript_function_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcript_function_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((cvterm.name)::text = 'level_of_transcript_variant'::text) OR ((cvterm.name)::text = 'transcript_processing_variant'::text)) OR ((cvterm.name)::text = 'transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'transcription_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'increased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'editing_variant'::text)) OR ((cvterm.name)::text = 'polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'increased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'increased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'rate_of_transcription_variant'::text)) OR ((cvterm.name)::text = 'increased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'transcript_function_variant'::text));

CREATE VIEW so.transcript_processing_variant (transcript_processing_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcript_processing_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'editing_variant'::text) OR ((cvterm.name)::text = 'polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'increased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'transcript_processing_variant'::text));

CREATE VIEW so.transcript_region (transcript_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcript_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'exon'::text) OR ((cvterm.name)::text = 'edited_transcript_feature'::text)) OR ((cvterm.name)::text = 'mature_transcript_region'::text)) OR ((cvterm.name)::text = 'primary_transcript_region'::text)) OR ((cvterm.name)::text = 'exon_region'::text)) OR ((cvterm.name)::text = 'anchor_binding_site'::text)) OR ((cvterm.name)::text = 'coding_exon'::text)) OR ((cvterm.name)::text = 'noncoding_exon'::text)) OR ((cvterm.name)::text = 'interior_exon'::text)) OR ((cvterm.name)::text = 'exon_of_single_exon_gene'::text)) OR ((cvterm.name)::text = 'interior_coding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'pre_edited_region'::text)) OR ((cvterm.name)::text = 'editing_block'::text)) OR ((cvterm.name)::text = 'editing_domain'::text)) OR ((cvterm.name)::text = 'unedited_region'::text)) OR ((cvterm.name)::text = 'mRNA_region'::text)) OR ((cvterm.name)::text = 'tmRNA_region'::text)) OR ((cvterm.name)::text = 'guide_RNA_region'::text)) OR ((cvterm.name)::text = 'tRNA_region'::text)) OR ((cvterm.name)::text = 'riboswitch'::text)) OR ((cvterm.name)::text = 'ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'UTR'::text)) OR ((cvterm.name)::text = 'CDS'::text)) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text)) OR ((cvterm.name)::text = 'UTR_region'::text)) OR ((cvterm.name)::text = 'CDS_region'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text)) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'five_prime_UTR'::text)) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_CDS'::text)) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text)) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'coding_start'::text)) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'tmRNA_coding_piece'::text)) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text)) OR ((cvterm.name)::text = 'anchor_region'::text)) OR ((cvterm.name)::text = 'template_region'::text)) OR ((cvterm.name)::text = 'anticodon_loop'::text)) OR ((cvterm.name)::text = 'anticodon'::text)) OR ((cvterm.name)::text = 'CCA_tail'::text)) OR ((cvterm.name)::text = 'DHU_loop'::text)) OR ((cvterm.name)::text = 'T_loop'::text)) OR ((cvterm.name)::text = 'splice_site'::text)) OR ((cvterm.name)::text = 'intron'::text)) OR ((cvterm.name)::text = 'clip'::text)) OR ((cvterm.name)::text = 'TSS'::text)) OR ((cvterm.name)::text = 'transcription_end_site'::text)) OR ((cvterm.name)::text = 'spliced_leader_RNA'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text)) OR ((cvterm.name)::text = 'intron_domain'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'outron'::text)) OR ((cvterm.name)::text = 'cis_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_site'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'five_prime_intron'::text)) OR ((cvterm.name)::text = 'interior_intron'::text)) OR ((cvterm.name)::text = 'three_prime_intron'::text)) OR ((cvterm.name)::text = 'twintron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text)) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'group_I_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'U2_intron'::text)) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'archaeal_intron'::text)) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'five_prime_clip'::text)) OR ((cvterm.name)::text = 'three_prime_clip'::text)) OR ((cvterm.name)::text = 'major_TSS'::text)) OR ((cvterm.name)::text = 'minor_TSS'::text)) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'branch_site'::text)) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text)) OR ((cvterm.name)::text = 'internal_guide_sequence'::text)) OR ((cvterm.name)::text = 'mirtron'::text)) OR ((cvterm.name)::text = 'pre_miRNA'::text)) OR ((cvterm.name)::text = 'miRNA_stem'::text)) OR ((cvterm.name)::text = 'miRNA_loop'::text)) OR ((cvterm.name)::text = 'miRNA_antiguide'::text)) OR ((cvterm.name)::text = 'noncoding_region_of_exon'::text)) OR ((cvterm.name)::text = 'coding_region_of_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'transcript_region'::text));

CREATE VIEW so.transcript_secondary_structure_variant (transcript_secondary_structure_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcript_secondary_structure_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text) OR ((cvterm.name)::text = 'transcript_secondary_structure_variant'::text));

CREATE VIEW so.transcript_stability_variant (transcript_stability_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcript_stability_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'decreased_transcript_stability_variant'::text) OR ((cvterm.name)::text = 'increased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'transcript_stability_variant'::text));

CREATE VIEW so.transcript_variant (transcript_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcript_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'complex_change_in_transcript'::text) OR ((cvterm.name)::text = 'transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'nc_transcript_variant'::text)) OR ((cvterm.name)::text = 'NMD_transcript_variant'::text)) OR ((cvterm.name)::text = 'UTR_variant'::text)) OR ((cvterm.name)::text = 'intron_variant'::text)) OR ((cvterm.name)::text = 'exon_variant'::text)) OR ((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'mature_miRNA_variant'::text)) OR ((cvterm.name)::text = '5_prime_UTR_variant'::text)) OR ((cvterm.name)::text = '3_prime_UTR_variant'::text)) OR ((cvterm.name)::text = 'splice_site_variant'::text)) OR ((cvterm.name)::text = 'splice_acceptor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text)) OR ((cvterm.name)::text = 'coding_sequence_variant'::text)) OR ((cvterm.name)::text = 'non_coding_exon_variant'::text)) OR ((cvterm.name)::text = 'codon_variant'::text)) OR ((cvterm.name)::text = 'frameshift_variant'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text)) OR ((cvterm.name)::text = 'initiator_codon_change'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'frame_restoring_variant'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'inframe_codon_gain'::text)) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = 'transcript_variant'::text));

CREATE VIEW so.transcript_with_translational_frameshift (transcript_with_translational_frameshift_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcript_with_translational_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text);

CREATE VIEW so.transcription_end_site (transcription_end_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcription_end_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transcription_end_site'::text);

CREATE VIEW so.transcription_regulatory_region (transcription_regulatory_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcription_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'terminator'::text) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text)) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text)) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'operator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'promoter'::text)) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'transcription_regulatory_region'::text));

CREATE VIEW so.transcription_variant (transcription_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcription_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'rate_of_transcription_variant'::text) OR ((cvterm.name)::text = 'increased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'transcription_variant'::text));

CREATE VIEW so.transcriptional_cis_regulatory_region (transcriptional_cis_regulatory_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcriptional_cis_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((cvterm.name)::text = 'promoter'::text) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text));

CREATE VIEW so.transcriptionally_constitutive (transcriptionally_constitutive_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcriptionally_constitutive_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transcriptionally_constitutive'::text);

CREATE VIEW so.transcriptionally_induced (transcriptionally_induced_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcriptionally_induced_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'positively_autoregulated'::text) OR ((cvterm.name)::text = 'transcriptionally_induced'::text));

CREATE VIEW so.transcriptionally_regulated (transcriptionally_regulated_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcriptionally_regulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((cvterm.name)::text = 'transcriptionally_constitutive'::text) OR ((cvterm.name)::text = 'transcriptionally_induced'::text)) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text)) OR ((cvterm.name)::text = 'autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'silenced'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'transcriptionally_regulated'::text));

CREATE VIEW so.transcriptionally_repressed (transcriptionally_repressed_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transcriptionally_repressed_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((cvterm.name)::text = 'negatively_autoregulated'::text) OR ((cvterm.name)::text = 'silenced'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text));

CREATE VIEW so.transgene (transgene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transgene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'floxed_gene'::text) OR ((cvterm.name)::text = 'transgene'::text));

CREATE VIEW so.transgenic (transgenic_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transgenic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transgenic'::text);

CREATE VIEW so.transgenic_insertion (transgenic_insertion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transgenic_insertion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transgenic_insertion'::text);

CREATE VIEW so.transgenic_transposable_element (transgenic_transposable_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transgenic_transposable_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transgenic_transposable_element'::text);

CREATE VIEW so.transit_peptide (transit_peptide_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transit_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transit_peptide'::text);

CREATE VIEW so.transition (transition_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'pyrimidine_transition'::text) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'transition'::text));

CREATE VIEW so.translated_nucleotide_match (translated_nucleotide_match_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS translated_nucleotide_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'translated_nucleotide_match'::text);

CREATE VIEW so.translation_regulatory_region (translation_regulatory_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS translation_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'attenuator'::text) OR ((cvterm.name)::text = 'translation_regulatory_region'::text));

CREATE VIEW so.translational_frameshift (translational_frameshift_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS translational_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'plus_1_translational_frameshift'::text) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text));

CREATE VIEW so.translational_product_function_variant (translational_product_function_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS translational_product_function_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((cvterm.name)::text = 'translational_product_level_variant'::text) OR ((cvterm.name)::text = 'polypeptide_function_variant'::text)) OR ((cvterm.name)::text = 'decreased_translational_product_level'::text)) OR ((cvterm.name)::text = 'increased_translational_product_level'::text)) OR ((cvterm.name)::text = 'polypeptide_gain_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_localization_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_loss_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_post_translational_processing_variant'::text)) OR ((cvterm.name)::text = 'inactive_ligand_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text)) OR ((cvterm.name)::text = 'inactive_catalytic_site'::text)) OR ((cvterm.name)::text = 'translational_product_function_variant'::text));

CREATE VIEW so.translational_product_level_variant (translational_product_level_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS translational_product_level_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'decreased_translational_product_level'::text) OR ((cvterm.name)::text = 'increased_translational_product_level'::text)) OR ((cvterm.name)::text = 'translational_product_level_variant'::text));

CREATE VIEW so.translational_product_structure_variant (translational_product_structure_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS translational_product_structure_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((cvterm.name)::text = '3D_polypeptide_structure_variant'::text) OR ((cvterm.name)::text = 'complex_change_of_translational_product_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_sequence_variant'::text)) OR ((cvterm.name)::text = 'complex_3D_structural_variant'::text)) OR ((cvterm.name)::text = 'conformational_change_variant'::text)) OR ((cvterm.name)::text = 'amino_acid_deletion'::text)) OR ((cvterm.name)::text = 'amino_acid_insertion'::text)) OR ((cvterm.name)::text = 'amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide'::text)) OR ((cvterm.name)::text = 'polypeptide_fusion'::text)) OR ((cvterm.name)::text = 'polypeptide_truncation'::text)) OR ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'translational_product_structure_variant'::text));

CREATE VIEW so.translationally_frameshifted (translationally_frameshifted_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS translationally_frameshifted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'translationally_frameshifted'::text));

CREATE VIEW so.translationally_regulated (translationally_regulated_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS translationally_regulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'translationally_regulated'::text);

CREATE VIEW so.translationally_regulated_gene (translationally_regulated_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS translationally_regulated_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'translationally_regulated_gene'::text);

CREATE VIEW so.translocation (translocation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS translocation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'translocation'::text);

CREATE VIEW so.translocation_breakpoint (translocation_breakpoint_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS translocation_breakpoint_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'translocation_breakpoint'::text);

CREATE VIEW so.translocation_element (translocation_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS translocation_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'translocation_element'::text);

CREATE VIEW so.translocaton_attribute (translocaton_attribute_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS translocaton_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'reciprocal'::text) OR ((cvterm.name)::text = 'insertional'::text)) OR ((cvterm.name)::text = 'translocaton_attribute'::text));

CREATE VIEW so.transmembrane_polypeptide_region (transmembrane_polypeptide_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transmembrane_polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text);

CREATE VIEW so.transposable_element (transposable_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transposable_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((cvterm.name)::text = 'retrotransposon'::text) OR ((cvterm.name)::text = 'DNA_transposon'::text)) OR ((cvterm.name)::text = 'foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'nested_transposon'::text)) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text)) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transposable_element'::text));

CREATE VIEW so.transposable_element_flanking_region (transposable_element_flanking_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transposable_element_flanking_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transposable_element_flanking_region'::text);

CREATE VIEW so.transposable_element_gene (transposable_element_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transposable_element_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'transposable_element_gene'::text));

CREATE VIEW so.transposable_element_insertion_site (transposable_element_insertion_site_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transposable_element_insertion_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transposable_element_insertion_site'::text);

CREATE VIEW so.transposon_fragment (transposon_fragment_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transposon_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transposon_fragment'::text);

CREATE VIEW so.transversion (transversion_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'transversion'::text));

CREATE VIEW so.trinuc_repeat_microsat (trinuc_repeat_microsat_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS trinuc_repeat_microsat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text);

CREATE VIEW so.trna (trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((cvterm.name)::text = 'alanyl_tRNA'::text) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text));

CREATE VIEW so.trna_encoding (trna_encoding_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS trna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tRNA_encoding'::text);

CREATE VIEW so.trna_gene (trna_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS trna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tRNA_gene'::text);

CREATE VIEW so.trna_intron (trna_intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS trna_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tRNA_intron'::text);

CREATE VIEW so.trna_primary_transcript (trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text));

CREATE VIEW so.trna_region (trna_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS trna_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'anticodon_loop'::text) OR ((cvterm.name)::text = 'anticodon'::text)) OR ((cvterm.name)::text = 'CCA_tail'::text)) OR ((cvterm.name)::text = 'DHU_loop'::text)) OR ((cvterm.name)::text = 'T_loop'::text)) OR ((cvterm.name)::text = 'tRNA_region'::text));

CREATE VIEW so.try_trna_primary_transcript (try_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS try_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text);

CREATE VIEW so.tryptophan (tryptophan_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tryptophan_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tryptophan'::text);

CREATE VIEW so.tryptophanyl_trna (tryptophanyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tryptophanyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tryptophanyl_tRNA'::text);

CREATE VIEW so.tss (tss_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tss_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'major_TSS'::text) OR ((cvterm.name)::text = 'minor_TSS'::text)) OR ((cvterm.name)::text = 'TSS'::text));

CREATE VIEW so.tss_region (tss_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tss_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'TSS_region'::text);

CREATE VIEW so.twintron (twintron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS twintron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'twintron'::text);

CREATE VIEW so.two_methyladenosine (two_methyladenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS two_methyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_methyladenosine'::text);

CREATE VIEW so.two_methylthio_n6_cis_hydroxyisopentenyl_adenosine (two_methylthio_n6_cis_hydroxyisopentenyl_adenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS two_methylthio_n6_cis_hydroxyisopentenyl_adenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text);

CREATE VIEW so.two_methylthio_n6_hydroxynorvalyl_carbamoyladenosine (two_methylthio_n6_hydroxynorvalyl_carbamoyladenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS two_methylthio_n6_hydroxynorvalyl_carbamoyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text);

CREATE VIEW so.two_methylthio_n6_isopentenyladenosine (two_methylthio_n6_isopentenyladenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS two_methylthio_n6_isopentenyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text);

CREATE VIEW so.two_methylthio_n6_methyladenosine (two_methylthio_n6_methyladenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS two_methylthio_n6_methyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text);

CREATE VIEW so.two_methylthio_n6_threonyl_carbamoyladenosine (two_methylthio_n6_threonyl_carbamoyladenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS two_methylthio_n6_threonyl_carbamoyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text);

CREATE VIEW so.two_prime_o_methyladenosine (two_prime_o_methyladenosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS two_prime_o_methyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text);

CREATE VIEW so.two_prime_o_methylcytidine (two_prime_o_methylcytidine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS two_prime_o_methylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text);

CREATE VIEW so.two_prime_o_methylguanosine (two_prime_o_methylguanosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS two_prime_o_methylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text);

CREATE VIEW so.two_prime_o_methylinosine (two_prime_o_methylinosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS two_prime_o_methylinosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_methylinosine'::text);

CREATE VIEW so.two_prime_o_methylpseudouridine (two_prime_o_methylpseudouridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS two_prime_o_methylpseudouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text);

CREATE VIEW so.two_prime_o_methyluridine (two_prime_o_methyluridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS two_prime_o_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_methyluridine'::text);

CREATE VIEW so.two_prime_o_riboa_phosphate (two_prime_o_riboa_phosphate_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS two_prime_o_riboa_phosphate_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text);

CREATE VIEW so.two_prime_o_ribosylguanosine_phosphate (two_prime_o_ribosylguanosine_phosphate_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS two_prime_o_ribosylguanosine_phosphate_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text);

CREATE VIEW so.two_thio_two_prime_o_methyluridine (two_thio_two_prime_o_methyluridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS two_thio_two_prime_o_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text);

CREATE VIEW so.two_thiocytidine (two_thiocytidine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS two_thiocytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_thiocytidine'::text);

CREATE VIEW so.two_thiouridine (two_thiouridine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS two_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_thiouridine'::text);

CREATE VIEW so.twokb_upstream_variant (twokb_upstream_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS twokb_upstream_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = '2KB_upstream_variant'::text);

CREATE VIEW so.tyrosine (tyrosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tyrosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tyrosine'::text);

CREATE VIEW so.tyrosine_trna_primary_transcript (tyrosine_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tyrosine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text);

CREATE VIEW so.tyrosyl_trna (tyrosyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS tyrosyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tyrosyl_tRNA'::text);

CREATE VIEW so.u11_snrna (u11_snrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u11_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U11_snRNA'::text);

CREATE VIEW so.u12_intron (u12_intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u12_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U12_intron'::text);

CREATE VIEW so.u12_snrna (u12_snrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u12_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U12_snRNA'::text);

CREATE VIEW so.u14_snorna (u14_snorna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u14_snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U14_snoRNA'::text);

CREATE VIEW so.u14_snorna_primary_transcript (u14_snorna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u14_snorna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text);

CREATE VIEW so.u1_snrna (u1_snrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u1_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U1_snRNA'::text);

CREATE VIEW so.u2_intron (u2_intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u2_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U2_intron'::text);

CREATE VIEW so.u2_snrna (u2_snrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u2_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U2_snRNA'::text);

CREATE VIEW so.u3_five_prime_ltr_region (u3_five_prime_ltr_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u3_five_prime_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text);

CREATE VIEW so.u3_ltr_region (u3_ltr_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u3_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'U3_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_LTR_region'::text));

CREATE VIEW so.u3_snorna (u3_snorna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u3_snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U3_snoRNA'::text);

CREATE VIEW so.u3_three_prime_ltr_region (u3_three_prime_ltr_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u3_three_prime_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text);

CREATE VIEW so.u4_snrna (u4_snrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u4_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U4_snRNA'::text);

CREATE VIEW so.u4atac_snrna (u4atac_snrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u4atac_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U4atac_snRNA'::text);

CREATE VIEW so.u5_five_prime_ltr_region (u5_five_prime_ltr_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u5_five_prime_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text);

CREATE VIEW so.u5_ltr_region (u5_ltr_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u5_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'U5_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U5_LTR_region'::text));

CREATE VIEW so.u5_snrna (u5_snrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u5_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U5_snRNA'::text);

CREATE VIEW so.u5_three_prime_ltr_region (u5_three_prime_ltr_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u5_three_prime_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text);

CREATE VIEW so.u6_snrna (u6_snrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u6_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U6_snRNA'::text);

CREATE VIEW so.u6atac_snrna (u6atac_snrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u6atac_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U6atac_snRNA'::text);

CREATE VIEW so.u_box (u_box_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS u_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U_box'::text);

CREATE VIEW so.uaa_stop_codon_signal (uaa_stop_codon_signal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS uaa_stop_codon_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'UAA_stop_codon_signal'::text);

CREATE VIEW so.uag_stop_codon_signal (uag_stop_codon_signal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS uag_stop_codon_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'UAG_stop_codon_signal'::text);

CREATE VIEW so.uga_stop_codon_signal (uga_stop_codon_signal_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS uga_stop_codon_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'UGA_stop_codon_signal'::text);

CREATE VIEW so.ultracontig (ultracontig_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ultracontig_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ultracontig'::text);

CREATE VIEW so.uncharacterised_chromosomal_mutation (uncharacterised_chromosomal_mutation_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS uncharacterised_chromosomal_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text) OR ((cvterm.name)::text = 'uncharacterised_chromosomal_mutation'::text));

CREATE VIEW so.undermodified_hydroxywybutosine (undermodified_hydroxywybutosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS undermodified_hydroxywybutosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text);

CREATE VIEW so.unedited_region (unedited_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS unedited_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unedited_region'::text);

CREATE VIEW so.unigene_cluster (unigene_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS unigene_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unigene_cluster'::text);

CREATE VIEW so.uninvert_insert_dup (uninvert_insert_dup_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS uninvert_insert_dup_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'uninverted_insertional_duplication'::text);

CREATE VIEW so.uninvert_inter_transposition (uninvert_inter_transposition_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS uninvert_inter_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text);

CREATE VIEW so.uninvert_intra_transposition (uninvert_intra_transposition_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS uninvert_intra_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text);

CREATE VIEW so.unique_variant (unique_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS unique_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unique_variant'::text);

CREATE VIEW so.unitary_pseudogene (unitary_pseudogene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS unitary_pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unitary_pseudogene'::text);

CREATE VIEW so.unorient_insert_dup (unorient_insert_dup_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS unorient_insert_dup_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unoriented_insertional_duplication'::text);

CREATE VIEW so.unoriented_interchromosomal_transposition (unoriented_interchromosomal_transposition_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS unoriented_interchromosomal_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text);

CREATE VIEW so.unoriented_intrachromosomal_transposition (unoriented_intrachromosomal_transposition_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS unoriented_intrachromosomal_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text);

CREATE VIEW so.untranslated_region_polycistronic_mrna (untranslated_region_polycistronic_mrna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS untranslated_region_polycistronic_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text);

CREATE VIEW so.upd (upd_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS upd_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'maternal_uniparental_disomy'::text) OR ((cvterm.name)::text = 'paternal_uniparental_disomy'::text)) OR ((cvterm.name)::text = 'UPD'::text));

CREATE VIEW so.upstream_aug_codon (upstream_aug_codon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS upstream_aug_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'upstream_AUG_codon'::text);

CREATE VIEW so.upstream_gene_variant (upstream_gene_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS upstream_gene_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = '5KB_upstream_variant'::text) OR ((cvterm.name)::text = '2KB_upstream_variant'::text)) OR ((cvterm.name)::text = 'upstream_gene_variant'::text));

CREATE VIEW so.uridine_five_oxyacetic_acid (uridine_five_oxyacetic_acid_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS uridine_five_oxyacetic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text);

CREATE VIEW so.uridine_five_oxyacetic_acid_methyl_ester (uridine_five_oxyacetic_acid_methyl_ester_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS uridine_five_oxyacetic_acid_methyl_ester_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text);

CREATE VIEW so.ust (ust_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ust_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'three_prime_UST'::text) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'UST'::text));

CREATE VIEW so.ust_match (ust_match_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS ust_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'UST_match'::text);

CREATE VIEW so.utr (utr_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS utr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'five_prime_UTR'::text) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'UTR'::text));

CREATE VIEW so.utr_intron (utr_intron_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS utr_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'five_prime_UTR_intron'::text) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text));

CREATE VIEW so.utr_region (utr_region_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS utr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'upstream_AUG_codon'::text) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'UTR_region'::text));

CREATE VIEW so.utr_variant (utr_variant_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS utr_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = '5_prime_UTR_variant'::text) OR ((cvterm.name)::text = '3_prime_UTR_variant'::text)) OR ((cvterm.name)::text = 'UTR_variant'::text));

CREATE VIEW so.v_cluster (v_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_cluster'::text);

CREATE VIEW so.v_d_dj_c_cluster (v_d_dj_c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_d_dj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text);

CREATE VIEW so.v_d_dj_cluster (v_d_dj_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_d_dj_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_D_DJ_cluster'::text);

CREATE VIEW so.v_d_dj_j_c_cluster (v_d_dj_j_c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_d_dj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text);

CREATE VIEW so.v_d_dj_j_cluster (v_d_dj_j_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_d_dj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text);

CREATE VIEW so.v_d_j_c_cluster (v_d_j_c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_d_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_D_J_C_cluster'::text);

CREATE VIEW so.v_d_j_cluster (v_d_j_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_d_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_D_J_cluster'::text);

CREATE VIEW so.v_dj_c_cluster (v_dj_c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_dj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_DJ_C_cluster'::text);

CREATE VIEW so.v_dj_cluster (v_dj_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_dj_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_DJ_cluster'::text);

CREATE VIEW so.v_dj_j_c_cluster (v_dj_j_c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_dj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text);

CREATE VIEW so.v_dj_j_cluster (v_dj_j_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_dj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_DJ_J_cluster'::text);

CREATE VIEW so.v_gene (v_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_gene'::text);

CREATE VIEW so.v_gene_recombination_feature (v_gene_recombination_feature_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_gene_recombination_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_gene_recombination_feature'::text);

CREATE VIEW so.v_heptamer (v_heptamer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_heptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_heptamer'::text);

CREATE VIEW so.v_j_c_cluster (v_j_c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_J_C_cluster'::text);

CREATE VIEW so.v_j_cluster (v_j_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_J_cluster'::text);

CREATE VIEW so.v_nonamer (v_nonamer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_nonamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_nonamer'::text);

CREATE VIEW so.v_spacer (v_spacer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_spacer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_spacer'::text);

CREATE VIEW so.v_vdj_c_cluster (v_vdj_c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_vdj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VDJ_C_cluster'::text);

CREATE VIEW so.v_vdj_cluster (v_vdj_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_vdj_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VDJ_cluster'::text);

CREATE VIEW so.v_vdj_j_c_cluster (v_vdj_j_c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_vdj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text);

CREATE VIEW so.v_vdj_j_cluster (v_vdj_j_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_vdj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VDJ_J_cluster'::text);

CREATE VIEW so.v_vj_c_cluster (v_vj_c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_vj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VJ_C_cluster'::text);

CREATE VIEW so.v_vj_cluster (v_vj_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_vj_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VJ_cluster'::text);

CREATE VIEW so.v_vj_j_c_cluster (v_vj_j_c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_vj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text);

CREATE VIEW so.v_vj_j_cluster (v_vj_j_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS v_vj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VJ_J_cluster'::text);

CREATE VIEW so.validated (validated_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS validated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'experimentally_determined'::text) OR ((cvterm.name)::text = 'validated'::text));

CREATE VIEW so.validated_cdna_clone (validated_cdna_clone_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS validated_cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'validated_cDNA_clone'::text);

CREATE VIEW so.valine (valine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS valine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'valine'::text);

CREATE VIEW so.valine_trna_primary_transcript (valine_trna_primary_transcript_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS valine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text);

CREATE VIEW so.valyl_trna (valyl_trna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS valyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'valyl_tRNA'::text);

CREATE VIEW so.variant_collection (variant_collection_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS variant_collection_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'chromosome_variation'::text) OR ((cvterm.name)::text = 'allele'::text)) OR ((cvterm.name)::text = 'haplotype'::text)) OR ((cvterm.name)::text = 'genotype'::text)) OR ((cvterm.name)::text = 'diplotype'::text)) OR ((cvterm.name)::text = 'assortment_derived_variation'::text)) OR ((cvterm.name)::text = 'chromosome_number_variation'::text)) OR ((cvterm.name)::text = 'chromosome_structure_variation'::text)) OR ((cvterm.name)::text = 'assortment_derived_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency'::text)) OR ((cvterm.name)::text = 'assortment_derived_aneuploid'::text)) OR ((cvterm.name)::text = 'aneuploid'::text)) OR ((cvterm.name)::text = 'polyploid'::text)) OR ((cvterm.name)::text = 'hyperploid'::text)) OR ((cvterm.name)::text = 'hypoploid'::text)) OR ((cvterm.name)::text = 'autopolyploid'::text)) OR ((cvterm.name)::text = 'allopolyploid'::text)) OR ((cvterm.name)::text = 'free_chromosome_arm'::text)) OR ((cvterm.name)::text = 'chromosomal_transposition'::text)) OR ((cvterm.name)::text = 'aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'intrachromosomal_mutation'::text)) OR ((cvterm.name)::text = 'interchromosomal_mutation'::text)) OR ((cvterm.name)::text = 'chromosomal_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome'::text)) OR ((cvterm.name)::text = 'autosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'complex_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'uncharacterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'chromosomal_deletion'::text)) OR ((cvterm.name)::text = 'chromosomal_inversion'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'ring_chromosome'::text)) OR ((cvterm.name)::text = 'chromosome_fission'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'pericentric_inversion'::text)) OR ((cvterm.name)::text = 'paracentric_inversion'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'translocation_element'::text)) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text)) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'cyclic_translocation'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_duplication'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'free_duplication'::text)) OR ((cvterm.name)::text = 'insertional_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'uninverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome_arm'::text)) OR ((cvterm.name)::text = 'homo_compound_chromosome'::text)) OR ((cvterm.name)::text = 'hetero_compound_chromosome'::text)) OR ((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'laevosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'polymorphic_sequence_variant'::text)) OR ((cvterm.name)::text = 'variant_collection'::text));

CREATE VIEW so.variant_frequency (variant_frequency_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS variant_frequency_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'unique_variant'::text) OR ((cvterm.name)::text = 'rare_variant'::text)) OR ((cvterm.name)::text = 'polymorphic_variant'::text)) OR ((cvterm.name)::text = 'common_variant'::text)) OR ((cvterm.name)::text = 'fixed_variant'::text)) OR ((cvterm.name)::text = 'variant_frequency'::text));

CREATE VIEW so.variant_genome (variant_genome_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS variant_genome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'chromosomally_aberrant_genome'::text) OR ((cvterm.name)::text = 'variant_genome'::text));

CREATE VIEW so.variant_origin (variant_origin_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS variant_origin_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'maternal_variant'::text) OR ((cvterm.name)::text = 'paternal_variant'::text)) OR ((cvterm.name)::text = 'somatic_variant'::text)) OR ((cvterm.name)::text = 'germline_variant'::text)) OR ((cvterm.name)::text = 'pedigree_specific_variant'::text)) OR ((cvterm.name)::text = 'population_specific_variant'::text)) OR ((cvterm.name)::text = 'de_novo_variant'::text)) OR ((cvterm.name)::text = 'variant_origin'::text));

CREATE VIEW so.variant_phenotype (variant_phenotype_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS variant_phenotype_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'benign_variant'::text) OR ((cvterm.name)::text = 'disease_associated_variant'::text)) OR ((cvterm.name)::text = 'disease_causing_variant'::text)) OR ((cvterm.name)::text = 'lethal_variant'::text)) OR ((cvterm.name)::text = 'quantitative_variant'::text)) OR ((cvterm.name)::text = 'variant_phenotype'::text));

CREATE VIEW so.variant_quality (variant_quality_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS variant_quality_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((cvterm.name)::text = 'variant_origin'::text) OR ((cvterm.name)::text = 'variant_frequency'::text)) OR ((cvterm.name)::text = 'variant_phenotype'::text)) OR ((cvterm.name)::text = 'maternal_variant'::text)) OR ((cvterm.name)::text = 'paternal_variant'::text)) OR ((cvterm.name)::text = 'somatic_variant'::text)) OR ((cvterm.name)::text = 'germline_variant'::text)) OR ((cvterm.name)::text = 'pedigree_specific_variant'::text)) OR ((cvterm.name)::text = 'population_specific_variant'::text)) OR ((cvterm.name)::text = 'de_novo_variant'::text)) OR ((cvterm.name)::text = 'unique_variant'::text)) OR ((cvterm.name)::text = 'rare_variant'::text)) OR ((cvterm.name)::text = 'polymorphic_variant'::text)) OR ((cvterm.name)::text = 'common_variant'::text)) OR ((cvterm.name)::text = 'fixed_variant'::text)) OR ((cvterm.name)::text = 'benign_variant'::text)) OR ((cvterm.name)::text = 'disease_associated_variant'::text)) OR ((cvterm.name)::text = 'disease_causing_variant'::text)) OR ((cvterm.name)::text = 'lethal_variant'::text)) OR ((cvterm.name)::text = 'quantitative_variant'::text)) OR ((cvterm.name)::text = 'variant_quality'::text));

CREATE VIEW so.vault_rna (vault_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS vault_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'vault_RNA'::text);

CREATE VIEW so.vd_gene (vd_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS vd_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VD_gene'::text);

CREATE VIEW so.vdj_c_cluster (vdj_c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS vdj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VDJ_C_cluster'::text);

CREATE VIEW so.vdj_gene (vdj_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS vdj_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VDJ_gene'::text);

CREATE VIEW so.vdj_j_c_cluster (vdj_j_c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS vdj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VDJ_J_C_cluster'::text);

CREATE VIEW so.vdj_j_cluster (vdj_j_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS vdj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VDJ_J_cluster'::text);

CREATE VIEW so.vector_replicon (vector_replicon_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS vector_replicon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((cvterm.name)::text = 'YAC'::text) OR ((cvterm.name)::text = 'BAC'::text)) OR ((cvterm.name)::text = 'PAC'::text)) OR ((cvterm.name)::text = 'cosmid'::text)) OR ((cvterm.name)::text = 'phagemid'::text)) OR ((cvterm.name)::text = 'fosmid'::text)) OR ((cvterm.name)::text = 'lambda_vector'::text)) OR ((cvterm.name)::text = 'plasmid_vector'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'vector_replicon'::text));

CREATE VIEW so.vertebrate_ig_t_cell_receptor_rearranged_gene_cluster (vertebrate_ig_t_cell_receptor_rearranged_gene_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS vertebrate_ig_t_cell_receptor_rearranged_gene_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((cvterm.name)::text = 'DJ_J_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text));

CREATE VIEW so.vertebrate_immune_system_gene_recombination_feature (vertebrate_immune_system_gene_recombination_feature_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS vertebrate_immune_system_gene_recombination_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text));

CREATE VIEW so.vertebrate_immune_system_gene_recombination_signal_feature (vertebrate_immune_system_gene_recombination_signal_feature_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS vertebrate_immune_system_gene_recombination_signal_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((cvterm.name)::text = 'J_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text));

CREATE VIEW so.vertebrate_immune_system_gene_recombination_spacer (vertebrate_immune_system_gene_recombination_spacer_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS vertebrate_immune_system_gene_recombination_spacer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'three_prime_D_spacer'::text) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text));

CREATE VIEW so.vertebrate_immunoglobulin_t_cell_receptor_gene_cluster (vertebrate_immunoglobulin_t_cell_receptor_gene_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS vertebrate_immunoglobulin_t_cell_receptor_gene_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((cvterm.name)::text = 'D_J_C_cluster'::text) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text));

CREATE VIEW so.vertebrate_immunoglobulin_t_cell_receptor_rearranged_segment (vertebrate_immunoglobulin_t_cell_receptor_rearranged_segment_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS vertebrate_immunoglobulin_t_cell_receptor_rearranged_segment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'VD_gene'::text) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text));

CREATE VIEW so.vertebrate_immunoglobulin_t_cell_receptor_segment (vertebrate_immunoglobulin_t_cell_receptor_segment_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS vertebrate_immunoglobulin_t_cell_receptor_segment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'D_gene'::text) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text));

CREATE VIEW so.viral_sequence (viral_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'phage_sequence'::text) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text));

CREATE VIEW so.virtual_sequence (virtual_sequence_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS virtual_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'virtual_sequence'::text);

CREATE VIEW so.vj_c_cluster (vj_c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS vj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VJ_C_cluster'::text);

CREATE VIEW so.vj_gene (vj_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS vj_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VJ_gene'::text);

CREATE VIEW so.vj_j_c_cluster (vj_j_c_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS vj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VJ_J_C_cluster'::text);

CREATE VIEW so.vj_j_cluster (vj_j_cluster_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS vj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VJ_J_cluster'::text);

CREATE VIEW so.wc_base_pair (wc_base_pair_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS wc_base_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'WC_base_pair'::text);

CREATE VIEW so.whole_genome_sequence_status (whole_genome_sequence_status_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS whole_genome_sequence_status_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'standard_draft'::text) OR ((cvterm.name)::text = 'high_quality_draft'::text)) OR ((cvterm.name)::text = 'improved_high_quality_draft'::text)) OR ((cvterm.name)::text = 'annotation_directed_improved_draft'::text)) OR ((cvterm.name)::text = 'noncontiguous_finished'::text)) OR ((cvterm.name)::text = 'finished_genome'::text)) OR ((cvterm.name)::text = 'whole_genome_sequence_status'::text));

CREATE VIEW so.wild_type (wild_type_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS wild_type_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'wild_type'::text);

CREATE VIEW so.wild_type_rescue_gene (wild_type_rescue_gene_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS wild_type_rescue_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'wild_type_rescue_gene'::text);

CREATE VIEW so.wobble_base_pair (wobble_base_pair_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS wobble_base_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'wobble_base_pair'::text);

CREATE VIEW so.wybutosine (wybutosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS wybutosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'wybutosine'::text);

CREATE VIEW so.wyosine (wyosine_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS wyosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'wyosine'::text);

CREATE VIEW so.x_element (x_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS x_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'X_element'::text);

CREATE VIEW so.x_element_combinatorial_repeat (x_element_combinatorial_repeat_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS x_element_combinatorial_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'X_element_combinatorial_repeat'::text);

CREATE VIEW so.y_prime_element (y_prime_element_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS y_prime_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'Y_prime_element'::text);

CREATE VIEW so.y_rna (y_rna_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS y_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'Y_RNA'::text);

CREATE VIEW so.yac (yac_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS yac_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'YAC'::text);

CREATE VIEW so.yac_end (yac_end_id,feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT feature.feature_id AS yac_end_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'YAC_end'::text);

CREATE INDEX sequence_cv_lookup_table_idx ON so.sequence_cv_lookup_table USING btree (original_cvterm_name)

CREATE UNIQUE INDEX sequence_cv_lookup_table_pkey ON so.sequence_cv_lookup_table USING btree (sequence_cv_lookup_table_id)

REATE TABLE genetic_code.gencode (
	gencode_id int4 NOT NULL,
	organismstr varchar(512) NOT NULL,
	PRIMARY KEY (gencode_id)
);

CREATE TABLE genetic_code.gencode_codon_aa (
	gencode_id int4 NOT NULL,
	codon char(3) NOT NULL,
	aa char(1) NOT NULL
);

CREATE TABLE genetic_code.gencode_startcodon (
	gencode_id int4 NOT NULL,
	codon char(3)
);

ALTER TABLE genetic_code.gencode_codon_aa
	ADD FOREIGN KEY (gencode_id) 
	REFERENCES genetic_code.gencode (gencode_id);



ALTER TABLE genetic_code.gencode_startcodon
	ADD FOREIGN KEY (gencode_id) 
	REFERENCES genetic_code.gencode (gencode_id);



CREATE INDEX gencode_codon_aa_i1 ON genetic_code.gencode_codon_aa USING btree (gencode_id, codon, aa)

CREATE UNIQUE INDEX gencode_codon_unique ON genetic_code.gencode_codon_aa USING btree (gencode_id, codon)

CREATE UNIQUE INDEX gencode_pkey ON genetic_code.gencode USING btree (gencode_id)

CREATE UNIQUE INDEX gencode_startcodon_unique ON genetic_code.gencode_startcodon USING btree (gencode_id, codon)

REATE TABLE chado.acquisition (
	acquisition_id serial NOT NULL,
	assay_id int4 NOT NULL,
	protocol_id int4,
	channel_id int4,
	acquisitiondate timestamp DEFAULT now(),
	"name" text,
	"uri" text,
	PRIMARY KEY (acquisition_id)
);

CREATE TABLE chado.acquisition_relationship (
	acquisition_relationship_id serial NOT NULL,
	subject_id int4 NOT NULL,
	type_id int4 NOT NULL,
	object_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (acquisition_relationship_id)
);

CREATE TABLE chado.acquisitionprop (
	acquisitionprop_id serial NOT NULL,
	acquisition_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (acquisitionprop_id)
);

CREATE TABLE chado.analysis (
	analysis_id serial NOT NULL,
	"name" varchar(255),
	description text,
	program varchar(255) NOT NULL,
	programversion varchar(255) NOT NULL,
	algorithm varchar(255),
	sourcename varchar(255),
	sourceversion varchar(255),
	sourceuri text,
	timeexecuted timestamp DEFAULT now() NOT NULL,
	PRIMARY KEY (analysis_id)
);

CREATE TABLE chado.analysis_organism (
	analysis_id int4 NOT NULL,
	organism_id int4 NOT NULL
);

CREATE TABLE chado.analysisfeature (
	analysisfeature_id serial NOT NULL,
	feature_id int4 NOT NULL,
	analysis_id int4 NOT NULL,
	rawscore float8,
	normscore float8,
	significance float8,
	"identity" float8,
	PRIMARY KEY (analysisfeature_id)
);

CREATE TABLE chado.analysisfeatureprop (
	analysisfeatureprop_id serial NOT NULL,
	analysisfeature_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 NOT NULL,
	PRIMARY KEY (analysisfeatureprop_id)
);

CREATE TABLE chado.analysisprop (
	analysisprop_id serial NOT NULL,
	analysis_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (analysisprop_id)
);

CREATE TABLE chado.arraydesign (
	arraydesign_id serial NOT NULL,
	manufacturer_id int4 NOT NULL,
	platformtype_id int4 NOT NULL,
	substratetype_id int4,
	protocol_id int4,
	dbxref_id int4,
	"name" text NOT NULL,
	"version" text,
	description text,
	array_dimensions text,
	element_dimensions text,
	num_of_elements int4,
	num_array_columns int4,
	num_array_rows int4,
	num_grid_columns int4,
	num_grid_rows int4,
	num_sub_columns int4,
	num_sub_rows int4,
	PRIMARY KEY (arraydesign_id)
);

CREATE TABLE chado.arraydesignprop (
	arraydesignprop_id serial NOT NULL,
	arraydesign_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (arraydesignprop_id)
);

CREATE TABLE chado.assay (
	assay_id serial NOT NULL,
	arraydesign_id int4 NOT NULL,
	protocol_id int4,
	assaydate timestamp DEFAULT now(),
	arrayidentifier text,
	arraybatchidentifier text,
	operator_id int4 NOT NULL,
	dbxref_id int4,
	"name" text,
	description text,
	PRIMARY KEY (assay_id)
);

CREATE TABLE chado.assay_biomaterial (
	assay_biomaterial_id serial NOT NULL,
	assay_id int4 NOT NULL,
	biomaterial_id int4 NOT NULL,
	channel_id int4,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (assay_biomaterial_id)
);

CREATE TABLE chado.assay_project (
	assay_project_id serial NOT NULL,
	assay_id int4 NOT NULL,
	project_id int4 NOT NULL,
	PRIMARY KEY (assay_project_id)
);

CREATE TABLE chado.assayprop (
	assayprop_id serial NOT NULL,
	assay_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (assayprop_id)
);

CREATE TABLE chado.biomaterial (
	biomaterial_id serial NOT NULL,
	taxon_id int4,
	biosourceprovider_id int4,
	dbxref_id int4,
	"name" text,
	description text,
	PRIMARY KEY (biomaterial_id)
);

CREATE TABLE chado.biomaterial_dbxref (
	biomaterial_dbxref_id serial NOT NULL,
	biomaterial_id int4 NOT NULL,
	dbxref_id int4 NOT NULL,
	PRIMARY KEY (biomaterial_dbxref_id)
);

CREATE TABLE chado.biomaterial_relationship (
	biomaterial_relationship_id serial NOT NULL,
	subject_id int4 NOT NULL,
	type_id int4 NOT NULL,
	object_id int4 NOT NULL,
	PRIMARY KEY (biomaterial_relationship_id)
);

CREATE TABLE chado.biomaterial_treatment (
	biomaterial_treatment_id serial NOT NULL,
	biomaterial_id int4 NOT NULL,
	treatment_id int4 NOT NULL,
	unittype_id int4,
	"value" float4,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (biomaterial_treatment_id)
);

CREATE TABLE chado.biomaterialprop (
	biomaterialprop_id serial NOT NULL,
	biomaterial_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (biomaterialprop_id)
);

CREATE TABLE chado.cache_libraries (
	cid varchar(255) DEFAULT ''::character varying NOT NULL,
	"data" bytea,
	expire int4 DEFAULT 0 NOT NULL,
	created int4 DEFAULT 0 NOT NULL,
	serialized int2 DEFAULT 0 NOT NULL,
	PRIMARY KEY (cid)
);

CREATE TABLE chado.cell_line (
	cell_line_id serial NOT NULL,
	"name" varchar(255),
	uniquename varchar(255) NOT NULL,
	organism_id int4 NOT NULL,
	timeaccessioned timestamp DEFAULT now() NOT NULL,
	timelastmodified timestamp DEFAULT now() NOT NULL,
	PRIMARY KEY (cell_line_id)
);

CREATE TABLE chado.cell_line_cvterm (
	cell_line_cvterm_id serial NOT NULL,
	cell_line_id int4 NOT NULL,
	cvterm_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (cell_line_cvterm_id)
);

CREATE TABLE chado.cell_line_cvtermprop (
	cell_line_cvtermprop_id serial NOT NULL,
	cell_line_cvterm_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (cell_line_cvtermprop_id)
);

CREATE TABLE chado.cell_line_dbxref (
	cell_line_dbxref_id serial NOT NULL,
	cell_line_id int4 NOT NULL,
	dbxref_id int4 NOT NULL,
	is_current bool DEFAULT true NOT NULL,
	PRIMARY KEY (cell_line_dbxref_id)
);

CREATE TABLE chado.cell_line_feature (
	cell_line_feature_id serial NOT NULL,
	cell_line_id int4 NOT NULL,
	feature_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (cell_line_feature_id)
);

CREATE TABLE chado.cell_line_library (
	cell_line_library_id serial NOT NULL,
	cell_line_id int4 NOT NULL,
	library_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (cell_line_library_id)
);

CREATE TABLE chado.cell_line_pub (
	cell_line_pub_id serial NOT NULL,
	cell_line_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (cell_line_pub_id)
);

CREATE TABLE chado.cell_line_relationship (
	cell_line_relationship_id serial NOT NULL,
	subject_id int4 NOT NULL,
	object_id int4 NOT NULL,
	type_id int4 NOT NULL,
	PRIMARY KEY (cell_line_relationship_id)
);

CREATE TABLE chado.cell_line_synonym (
	cell_line_synonym_id serial NOT NULL,
	cell_line_id int4 NOT NULL,
	synonym_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	is_current bool DEFAULT false NOT NULL,
	is_internal bool DEFAULT false NOT NULL,
	PRIMARY KEY (cell_line_synonym_id)
);

CREATE TABLE chado.cell_lineprop (
	cell_lineprop_id serial NOT NULL,
	cell_line_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (cell_lineprop_id)
);

CREATE TABLE chado.cell_lineprop_pub (
	cell_lineprop_pub_id serial NOT NULL,
	cell_lineprop_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (cell_lineprop_pub_id)
);

CREATE TABLE chado.chadoprop (
	chadoprop_id serial NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (chadoprop_id)
);

CREATE TABLE chado.channel (
	channel_id serial NOT NULL,
	"name" text NOT NULL,
	definition text NOT NULL,
	PRIMARY KEY (channel_id)
);

CREATE TABLE chado.contact (
	contact_id serial NOT NULL,
	type_id int4,
	"name" varchar(255) NOT NULL,
	description varchar(255),
	PRIMARY KEY (contact_id)
);

CREATE TABLE chado.contact_relationship (
	contact_relationship_id serial NOT NULL,
	type_id int4 NOT NULL,
	subject_id int4 NOT NULL,
	object_id int4 NOT NULL,
	PRIMARY KEY (contact_relationship_id)
);

CREATE TABLE chado.contactprop (
	contactprop_id serial NOT NULL,
	contact_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (contactprop_id)
);

CREATE TABLE chado."control" (
	control_id serial NOT NULL,
	type_id int4 NOT NULL,
	assay_id int4 NOT NULL,
	tableinfo_id int4 NOT NULL,
	row_id int4 NOT NULL,
	"name" text,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (control_id)
);

CREATE TABLE chado.cv (
	cv_id serial NOT NULL,
	"name" varchar(255) NOT NULL,
	definition text,
	PRIMARY KEY (cv_id)
);

CREATE TABLE chado.cv_root_mview (
	"name" varchar(255) NOT NULL,
	cvterm_id int4 NOT NULL,
	cv_id int4 NOT NULL,
	cv_name varchar(255) NOT NULL
);

CREATE TABLE chado.cvprop (
	cvprop_id serial NOT NULL,
	cv_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (cvprop_id)
);

CREATE TABLE chado.cvterm (
	cvterm_id serial NOT NULL,
	cv_id int4 NOT NULL,
	"name" varchar(1024) NOT NULL,
	definition text,
	dbxref_id int4 NOT NULL,
	is_obsolete int4 DEFAULT 0 NOT NULL,
	is_relationshiptype int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (cvterm_id)
);

CREATE TABLE chado.cvterm_dbxref (
	cvterm_dbxref_id serial NOT NULL,
	cvterm_id int4 NOT NULL,
	dbxref_id int4 NOT NULL,
	is_for_definition int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (cvterm_dbxref_id)
);

CREATE TABLE chado.cvterm_relationship (
	cvterm_relationship_id serial NOT NULL,
	type_id int4 NOT NULL,
	subject_id int4 NOT NULL,
	object_id int4 NOT NULL,
	PRIMARY KEY (cvterm_relationship_id)
);

CREATE TABLE chado.cvtermpath (
	cvtermpath_id serial NOT NULL,
	type_id int4,
	subject_id int4 NOT NULL,
	object_id int4 NOT NULL,
	cv_id int4 NOT NULL,
	pathdistance int4,
	PRIMARY KEY (cvtermpath_id)
);

CREATE TABLE chado.cvtermprop (
	cvtermprop_id serial NOT NULL,
	cvterm_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text DEFAULT ''::text NOT NULL,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (cvtermprop_id)
);

CREATE TABLE chado.cvtermsynonym (
	cvtermsynonym_id serial NOT NULL,
	cvterm_id int4 NOT NULL,
	synonym varchar(1024) NOT NULL,
	type_id int4,
	PRIMARY KEY (cvtermsynonym_id)
);

CREATE TABLE chado."db" (
	db_id serial NOT NULL,
	"name" varchar(255) NOT NULL,
	description varchar(255),
	urlprefix varchar(255),
	url varchar(255),
	PRIMARY KEY (db_id)
);

CREATE TABLE chado.dbxref (
	dbxref_id serial NOT NULL,
	db_id int4 NOT NULL,
	accession varchar(255) NOT NULL,
	"version" varchar(255) DEFAULT ''::character varying NOT NULL,
	description text,
	PRIMARY KEY (dbxref_id)
);

CREATE TABLE chado.dbxrefprop (
	dbxrefprop_id serial NOT NULL,
	dbxref_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text DEFAULT ''::text NOT NULL,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (dbxrefprop_id)
);

CREATE TABLE chado.eimage (
	eimage_id serial NOT NULL,
	eimage_data text,
	eimage_type varchar(255) NOT NULL,
	image_uri varchar(255),
	PRIMARY KEY (eimage_id)
);

CREATE TABLE chado."element" (
	element_id serial NOT NULL,
	feature_id int4,
	arraydesign_id int4 NOT NULL,
	type_id int4,
	dbxref_id int4,
	PRIMARY KEY (element_id)
);

CREATE TABLE chado.element_relationship (
	element_relationship_id serial NOT NULL,
	subject_id int4 NOT NULL,
	type_id int4 NOT NULL,
	object_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (element_relationship_id)
);

CREATE TABLE chado.elementresult (
	elementresult_id serial NOT NULL,
	element_id int4 NOT NULL,
	quantification_id int4 NOT NULL,
	signal float8 NOT NULL,
	PRIMARY KEY (elementresult_id)
);

CREATE TABLE chado.elementresult_relationship (
	elementresult_relationship_id serial NOT NULL,
	subject_id int4 NOT NULL,
	type_id int4 NOT NULL,
	object_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (elementresult_relationship_id)
);

CREATE TABLE chado.environment (
	environment_id serial NOT NULL,
	uniquename text NOT NULL,
	description text,
	PRIMARY KEY (environment_id)
);

CREATE TABLE chado.environment_cvterm (
	environment_cvterm_id serial NOT NULL,
	environment_id int4 NOT NULL,
	cvterm_id int4 NOT NULL,
	PRIMARY KEY (environment_cvterm_id)
);

CREATE TABLE chado.expression (
	expression_id serial NOT NULL,
	uniquename text NOT NULL,
	md5checksum char(32),
	description text,
	PRIMARY KEY (expression_id)
);

CREATE TABLE chado.expression_cvterm (
	expression_cvterm_id serial NOT NULL,
	expression_id int4 NOT NULL,
	cvterm_id int4 NOT NULL,
	"rank" int4 DEFAULT 0 NOT NULL,
	cvterm_type_id int4 NOT NULL,
	PRIMARY KEY (expression_cvterm_id)
);

CREATE TABLE chado.expression_cvtermprop (
	expression_cvtermprop_id serial NOT NULL,
	expression_cvterm_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (expression_cvtermprop_id)
);

CREATE TABLE chado.expression_image (
	expression_image_id serial NOT NULL,
	expression_id int4 NOT NULL,
	eimage_id int4 NOT NULL,
	PRIMARY KEY (expression_image_id)
);

CREATE TABLE chado.expression_pub (
	expression_pub_id serial NOT NULL,
	expression_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (expression_pub_id)
);

CREATE TABLE chado.expressionprop (
	expressionprop_id serial NOT NULL,
	expression_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (expressionprop_id)
);

CREATE TABLE chado.feature (
	feature_id serial NOT NULL,
	dbxref_id int4,
	organism_id int4 NOT NULL,
	"name" varchar(255),
	uniquename text NOT NULL,
	residues text,
	seqlen int4,
	md5checksum char(32),
	type_id int4 NOT NULL,
	is_analysis bool DEFAULT false NOT NULL,
	is_obsolete bool DEFAULT false NOT NULL,
	timeaccessioned timestamp DEFAULT now() NOT NULL,
	timelastmodified timestamp DEFAULT now() NOT NULL,
	PRIMARY KEY (feature_id)
);

CREATE TABLE chado.feature_cvterm (
	feature_cvterm_id serial NOT NULL,
	feature_id int4 NOT NULL,
	cvterm_id int4 NOT NULL,
	pub_id int4,
	is_not bool DEFAULT false NOT NULL,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (feature_cvterm_id)
);

CREATE TABLE chado.feature_cvterm_dbxref (
	feature_cvterm_dbxref_id serial NOT NULL,
	feature_cvterm_id int4 NOT NULL,
	dbxref_id int4 NOT NULL,
	PRIMARY KEY (feature_cvterm_dbxref_id)
);

CREATE TABLE chado.feature_cvterm_pub (
	feature_cvterm_pub_id serial NOT NULL,
	feature_cvterm_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (feature_cvterm_pub_id)
);

CREATE TABLE chado.feature_cvtermprop (
	feature_cvtermprop_id serial NOT NULL,
	feature_cvterm_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (feature_cvtermprop_id)
);

CREATE TABLE chado.feature_dbxref (
	feature_dbxref_id serial NOT NULL,
	feature_id int4 NOT NULL,
	dbxref_id int4 NOT NULL,
	is_current bool DEFAULT true NOT NULL,
	PRIMARY KEY (feature_dbxref_id)
);

CREATE TABLE chado.feature_expression (
	feature_expression_id serial NOT NULL,
	expression_id int4 NOT NULL,
	feature_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (feature_expression_id)
);

CREATE TABLE chado.feature_expressionprop (
	feature_expressionprop_id serial NOT NULL,
	feature_expression_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (feature_expressionprop_id)
);

CREATE TABLE chado.feature_genotype (
	feature_genotype_id serial NOT NULL,
	feature_id int4 NOT NULL,
	genotype_id int4 NOT NULL,
	chromosome_id int4,
	"rank" int4 NOT NULL,
	cgroup int4 NOT NULL,
	cvterm_id int4 NOT NULL,
	background_accession_id int4,
	PRIMARY KEY (feature_genotype_id)
);

CREATE TABLE chado.feature_genotype_cvterm (
	feature_genotype_cvterm_id serial NOT NULL,
	feature_genotype_id int4 NOT NULL,
	cvterm_id int4 NOT NULL,
	pub_id int4,
	is_not bool,
	"rank" int4,
	PRIMARY KEY (feature_genotype_cvterm_id)
);

CREATE TABLE chado.feature_genotype_prop (
	feature_genotype_prop_id serial NOT NULL,
	feature_genotype_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (feature_genotype_prop_id)
);

CREATE TABLE chado.feature_phenotype (
	feature_phenotype_id serial NOT NULL,
	feature_id int4 NOT NULL,
	phenotype_id int4 NOT NULL,
	PRIMARY KEY (feature_phenotype_id)
);

CREATE TABLE chado.feature_pub (
	feature_pub_id serial NOT NULL,
	feature_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (feature_pub_id)
);

CREATE TABLE chado.feature_pubprop (
	feature_pubprop_id serial NOT NULL,
	feature_pub_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (feature_pubprop_id)
);

CREATE TABLE chado.feature_relationship (
	feature_relationship_id serial NOT NULL,
	subject_id int4 NOT NULL,
	object_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (feature_relationship_id)
);

CREATE TABLE chado.feature_relationship_pub (
	feature_relationship_pub_id serial NOT NULL,
	feature_relationship_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (feature_relationship_pub_id)
);

CREATE TABLE chado.feature_relationshipprop (
	feature_relationshipprop_id serial NOT NULL,
	feature_relationship_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (feature_relationshipprop_id)
);

create sequence feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq;
CREATE TABLE chado.feature_relationshipprop_pub (
	feature_relationshipprop_pub_id int4 DEFAULT nextval('feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq'::regclass) NOT NULL,
	feature_relationshipprop_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (feature_relationshipprop_pub_id)
);

CREATE TABLE chado.feature_synonym (
	feature_synonym_id serial NOT NULL,
	synonym_id int4 NOT NULL,
	feature_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	is_current bool DEFAULT false NOT NULL,
	is_internal bool DEFAULT false NOT NULL,
	PRIMARY KEY (feature_synonym_id)
);

CREATE TABLE chado.featureloc (
	featureloc_id serial NOT NULL,
	feature_id int4 NOT NULL,
	srcfeature_id int4,
	fmin int4,
	is_fmin_partial bool DEFAULT false NOT NULL,
	fmax int4,
	is_fmax_partial bool DEFAULT false NOT NULL,
	strand int2,
	phase int4,
	residue_info text,
	locgroup int4 DEFAULT 0 NOT NULL,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (featureloc_id)
);

CREATE TABLE chado.featureloc_pub (
	featureloc_pub_id serial NOT NULL,
	featureloc_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (featureloc_pub_id)
);

CREATE TABLE chado.featuremap (
	featuremap_id serial NOT NULL,
	"name" varchar(255),
	description text,
	unittype_id int4,
	PRIMARY KEY (featuremap_id)
);

CREATE TABLE chado.featuremap_pub (
	featuremap_pub_id serial NOT NULL,
	featuremap_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (featuremap_pub_id)
);

CREATE TABLE chado.featurepos (
	featurepos_id serial NOT NULL,
	featuremap_id serial NOT NULL,
	feature_id int4 NOT NULL,
	map_feature_id int4 NOT NULL,
	mappos float8 NOT NULL,
	PRIMARY KEY (featurepos_id)
);

CREATE TABLE chado.featureprop (
	featureprop_id serial NOT NULL,
	feature_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (featureprop_id)
);

CREATE TABLE chado.featureprop_pub (
	featureprop_pub_id serial NOT NULL,
	featureprop_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (featureprop_pub_id)
);

CREATE TABLE chado.featurerange (
	featurerange_id serial NOT NULL,
	featuremap_id int4 NOT NULL,
	feature_id int4 NOT NULL,
	leftstartf_id int4 NOT NULL,
	leftendf_id int4,
	rightstartf_id int4,
	rightendf_id int4 NOT NULL,
	rangestr varchar(255),
	PRIMARY KEY (featurerange_id)
);

CREATE TABLE chado.genotype (
	genotype_id serial NOT NULL,
	"name" text,
	uniquename text NOT NULL,
	description text,
	type_id int4 NOT NULL,
	dbxref_id int4,
	PRIMARY KEY (genotype_id)
);

CREATE TABLE chado.genotype_cvterm (
	genotype_cvterm_id serial NOT NULL,
	genotype_id int4 NOT NULL,
	cvterm_id int4 NOT NULL,
	pub_id int4,
	is_not bool DEFAULT false NOT NULL,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (genotype_cvterm_id)
);

CREATE TABLE chado.genotype_dbxref (
	genotype_dbxref_id serial NOT NULL,
	genotype_id int4 NOT NULL,
	dbxref_id int4 NOT NULL,
	is_current bool DEFAULT true NOT NULL,
	PRIMARY KEY (genotype_dbxref_id)
);

CREATE TABLE chado.genotype_synonym (
	genotype_synonym_id serial NOT NULL,
	synonym_id int4 NOT NULL,
	genotype_id int4 NOT NULL,
	pub_id int4,
	is_current bool DEFAULT true NOT NULL,
	is_internal bool DEFAULT false NOT NULL,
	PRIMARY KEY (genotype_synonym_id)
);

CREATE TABLE chado.genotypeprop (
	genotypeprop_id serial NOT NULL,
	genotype_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (genotypeprop_id)
);

CREATE TABLE chado."library" (
	library_id serial NOT NULL,
	organism_id int4 NOT NULL,
	"name" varchar(255),
	uniquename text NOT NULL,
	type_id int4 NOT NULL,
	is_obsolete int4 DEFAULT 0 NOT NULL,
	timeaccessioned timestamp DEFAULT now() NOT NULL,
	timelastmodified timestamp DEFAULT now() NOT NULL,
	PRIMARY KEY (library_id)
);

CREATE TABLE chado.library_cvterm (
	library_cvterm_id serial NOT NULL,
	library_id int4 NOT NULL,
	cvterm_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (library_cvterm_id)
);

CREATE TABLE chado.library_dbxref (
	library_dbxref_id serial NOT NULL,
	library_id int4 NOT NULL,
	dbxref_id int4 NOT NULL,
	is_current bool DEFAULT true NOT NULL,
	PRIMARY KEY (library_dbxref_id)
);

CREATE TABLE chado.library_feature (
	library_feature_id serial NOT NULL,
	library_id int4 NOT NULL,
	feature_id int4 NOT NULL,
	PRIMARY KEY (library_feature_id)
);

CREATE TABLE chado.library_pub (
	library_pub_id serial NOT NULL,
	library_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (library_pub_id)
);

CREATE TABLE chado.library_synonym (
	library_synonym_id serial NOT NULL,
	synonym_id int4 NOT NULL,
	library_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	is_current bool DEFAULT true NOT NULL,
	is_internal bool DEFAULT false NOT NULL,
	PRIMARY KEY (library_synonym_id)
);

CREATE TABLE chado.libraryprop (
	libraryprop_id serial NOT NULL,
	library_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (libraryprop_id)
);

CREATE TABLE chado.libraryprop_pub (
	libraryprop_pub_id serial NOT NULL,
	libraryprop_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (libraryprop_pub_id)
);

CREATE TABLE chado.magedocumentation (
	magedocumentation_id serial NOT NULL,
	mageml_id int4 NOT NULL,
	tableinfo_id int4 NOT NULL,
	row_id int4 NOT NULL,
	mageidentifier text NOT NULL,
	PRIMARY KEY (magedocumentation_id)
);

CREATE TABLE chado.mageml (
	mageml_id serial NOT NULL,
	mage_package text NOT NULL,
	mage_ml text NOT NULL,
	PRIMARY KEY (mageml_id)
);

CREATE TABLE chado.materialized_view (
	materialized_view_id serial NOT NULL,
	last_update timestamp,
	refresh_time int4,
	"name" varchar(64),
	mv_schema varchar(64),
	mv_table varchar(128),
	mv_specs text,
	indexed text,
	query text,
	special_index text
);

CREATE TABLE chado.nd_experiment (
	nd_experiment_id serial NOT NULL,
	nd_geolocation_id int4 NOT NULL,
	type_id int4 NOT NULL,
	PRIMARY KEY (nd_experiment_id)
);

CREATE TABLE chado.nd_experiment_contact (
	nd_experiment_contact_id serial NOT NULL,
	nd_experiment_id int4 NOT NULL,
	contact_id int4 NOT NULL,
	PRIMARY KEY (nd_experiment_contact_id)
);

CREATE TABLE chado.nd_experiment_dbxref (
	nd_experiment_dbxref_id serial NOT NULL,
	nd_experiment_id int4 NOT NULL,
	dbxref_id int4 NOT NULL,
	PRIMARY KEY (nd_experiment_dbxref_id)
);

CREATE TABLE chado.nd_experiment_genotype (
	nd_experiment_genotype_id serial NOT NULL,
	nd_experiment_id int4 NOT NULL,
	genotype_id int4 NOT NULL,
	PRIMARY KEY (nd_experiment_genotype_id)
);

CREATE TABLE chado.nd_experiment_phenotype (
	nd_experiment_phenotype_id serial NOT NULL,
	nd_experiment_id int4 NOT NULL,
	phenotype_id int4 NOT NULL,
	PRIMARY KEY (nd_experiment_phenotype_id)
);

CREATE TABLE chado.nd_experiment_project (
	nd_experiment_project_id serial NOT NULL,
	project_id int4 NOT NULL,
	nd_experiment_id int4 NOT NULL,
	PRIMARY KEY (nd_experiment_project_id)
);

CREATE TABLE chado.nd_experiment_protocol (
	nd_experiment_protocol_id serial NOT NULL,
	nd_experiment_id int4 NOT NULL,
	nd_protocol_id int4 NOT NULL,
	PRIMARY KEY (nd_experiment_protocol_id)
);

CREATE TABLE chado.nd_experiment_pub (
	nd_experiment_pub_id serial NOT NULL,
	nd_experiment_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (nd_experiment_pub_id)
);

CREATE TABLE chado.nd_experiment_stock (
	nd_experiment_stock_id serial NOT NULL,
	nd_experiment_id int4 NOT NULL,
	stock_id int4 NOT NULL,
	type_id int4 NOT NULL,
	PRIMARY KEY (nd_experiment_stock_id)
);

CREATE TABLE chado.nd_experiment_stock_dbxref (
	nd_experiment_stock_dbxref_id serial NOT NULL,
	nd_experiment_stock_id int4 NOT NULL,
	dbxref_id int4 NOT NULL,
	PRIMARY KEY (nd_experiment_stock_dbxref_id)
);

CREATE TABLE chado.nd_experiment_stockprop (
	nd_experiment_stockprop_id serial NOT NULL,
	nd_experiment_stock_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (nd_experiment_stockprop_id)
);

CREATE TABLE chado.nd_experimentprop (
	nd_experimentprop_id serial NOT NULL,
	nd_experiment_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (nd_experimentprop_id)
);

CREATE TABLE chado.nd_geolocation (
	nd_geolocation_id serial NOT NULL,
	description varchar(255),
	latitude float4,
	longitude float4,
	geodetic_datum varchar(32),
	altitude float4,
	PRIMARY KEY (nd_geolocation_id)
);

CREATE TABLE chado.nd_geolocationprop (
	nd_geolocationprop_id serial NOT NULL,
	nd_geolocation_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (nd_geolocationprop_id)
);

CREATE TABLE chado.nd_protocol (
	nd_protocol_id serial NOT NULL,
	"name" varchar(255) NOT NULL,
	type_id int4 NOT NULL,
	PRIMARY KEY (nd_protocol_id)
);

CREATE TABLE chado.nd_protocol_reagent (
	nd_protocol_reagent_id serial NOT NULL,
	nd_protocol_id int4 NOT NULL,
	reagent_id int4 NOT NULL,
	type_id int4 NOT NULL,
	PRIMARY KEY (nd_protocol_reagent_id)
);

CREATE TABLE chado.nd_protocolprop (
	nd_protocolprop_id serial NOT NULL,
	nd_protocol_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (nd_protocolprop_id)
);

CREATE TABLE chado.nd_reagent (
	nd_reagent_id serial NOT NULL,
	"name" varchar(80) NOT NULL,
	type_id int4 NOT NULL,
	feature_id int4,
	PRIMARY KEY (nd_reagent_id)
);

CREATE TABLE chado.nd_reagent_relationship (
	nd_reagent_relationship_id serial NOT NULL,
	subject_reagent_id int4 NOT NULL,
	object_reagent_id int4 NOT NULL,
	type_id int4 NOT NULL,
	PRIMARY KEY (nd_reagent_relationship_id)
);

CREATE TABLE chado.nd_reagentprop (
	nd_reagentprop_id serial NOT NULL,
	nd_reagent_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (nd_reagentprop_id)
);

CREATE TABLE chado.oauth_common_consumer (
	csid serial NOT NULL,
	key_hash char(40) NOT NULL,
	consumer_key text NOT NULL,
	secret text NOT NULL,
	"configuration" text NOT NULL,
	PRIMARY KEY (csid)
);

CREATE TABLE chado.oauth_common_context (
	cid serial NOT NULL,
	"name" varchar(32) NOT NULL,
	title varchar(100) NOT NULL,
	authorization_options text NOT NULL,
	authorization_levels text NOT NULL,
	PRIMARY KEY (cid)
);

CREATE TABLE chado.oauth_common_nonce (
	nonce varchar(255) NOT NULL,
	"timestamp" int4 NOT NULL,
	token_key varchar(32) NOT NULL,
	PRIMARY KEY (nonce)
);

CREATE TABLE chado.oauth_common_provider_consumer (
	csid int8 DEFAULT 0,
	consumer_key char(32) NOT NULL,
	created int4 DEFAULT 0 NOT NULL,
	changed int4 DEFAULT 0 NOT NULL,
	uid int8 NOT NULL,
	"name" varchar(128) NOT NULL,
	context varchar(32) DEFAULT ''::character varying NOT NULL,
	callback_url varchar(255) NOT NULL,
	PRIMARY KEY (consumer_key)
);

CREATE TABLE chado.oauth_common_provider_token (
	tid int8 DEFAULT 0,
	token_key char(32) NOT NULL,
	created int4 DEFAULT 0 NOT NULL,
	changed int4 DEFAULT 0 NOT NULL,
	services text,
	authorized int2 DEFAULT 0 NOT NULL,
	PRIMARY KEY (token_key)
);

CREATE TABLE chado.oauth_common_token (
	tid serial NOT NULL,
	csid int8 DEFAULT 0 NOT NULL,
	key_hash char(40) NOT NULL,
	token_key text NOT NULL,
	secret text NOT NULL,
	expires int4 DEFAULT 0 NOT NULL,
	"type" int2 DEFAULT 1 NOT NULL,
	uid int8 DEFAULT 0 NOT NULL,
	PRIMARY KEY (tid)
);

CREATE TABLE chado.organism (
	organism_id serial NOT NULL,
	abbreviation varchar(255),
	genus varchar(255) NOT NULL,
	species varchar(255) NOT NULL,
	common_name varchar(255),
	"comment" text,
	PRIMARY KEY (organism_id)
);

CREATE TABLE chado.organism_dbxref (
	organism_dbxref_id serial NOT NULL,
	organism_id int4 NOT NULL,
	dbxref_id int4 NOT NULL,
	PRIMARY KEY (organism_dbxref_id)
);

CREATE TABLE chado.organism_feature_count (
	organism_id int4 NOT NULL,
	genus varchar(255) NOT NULL,
	species varchar(255) NOT NULL,
	common_name varchar(255),
	num_features int4 NOT NULL,
	cvterm_id int4 NOT NULL,
	feature_type varchar(255) NOT NULL
);

CREATE TABLE chado.organismprop (
	organismprop_id serial NOT NULL,
	organism_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (organismprop_id)
);

CREATE TABLE chado.phendesc (
	phendesc_id serial NOT NULL,
	genotype_id int4 NOT NULL,
	environment_id int4 NOT NULL,
	description text NOT NULL,
	type_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (phendesc_id)
);

CREATE TABLE chado.phenotype (
	phenotype_id serial NOT NULL,
	uniquename text NOT NULL,
	"name" text,
	observable_id int4,
	attr_id int4,
	"value" text,
	cvalue_id int4,
	assay_id int4,
	PRIMARY KEY (phenotype_id)
);

CREATE TABLE chado.phenotype_comparison (
	phenotype_comparison_id serial NOT NULL,
	genotype1_id int4 NOT NULL,
	environment1_id int4 NOT NULL,
	genotype2_id int4 NOT NULL,
	environment2_id int4 NOT NULL,
	phenotype1_id int4 NOT NULL,
	phenotype2_id int4,
	pub_id int4 NOT NULL,
	organism_id int4 NOT NULL,
	PRIMARY KEY (phenotype_comparison_id)
);

CREATE TABLE chado.phenotype_comparison_cvterm (
	phenotype_comparison_cvterm_id serial NOT NULL,
	phenotype_comparison_id int4 NOT NULL,
	cvterm_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (phenotype_comparison_cvterm_id)
);

CREATE TABLE chado.phenotype_cvterm (
	phenotype_cvterm_id serial NOT NULL,
	phenotype_id int4 NOT NULL,
	cvterm_id int4 NOT NULL,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (phenotype_cvterm_id)
);

CREATE TABLE chado.phenstatement (
	phenstatement_id serial NOT NULL,
	genotype_id int4 NOT NULL,
	environment_id int4 NOT NULL,
	phenotype_id int4 NOT NULL,
	type_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (phenstatement_id)
);

CREATE TABLE chado.phylonode (
	phylonode_id serial NOT NULL,
	phylotree_id int4 NOT NULL,
	parent_phylonode_id int4,
	left_idx int4 NOT NULL,
	right_idx int4 NOT NULL,
	type_id int4,
	feature_id int4,
	"label" varchar(255),
	distance float8,
	PRIMARY KEY (phylonode_id)
);

CREATE TABLE chado.phylonode_dbxref (
	phylonode_dbxref_id serial NOT NULL,
	phylonode_id int4 NOT NULL,
	dbxref_id int4 NOT NULL,
	PRIMARY KEY (phylonode_dbxref_id)
);

CREATE TABLE chado.phylonode_organism (
	phylonode_organism_id serial NOT NULL,
	phylonode_id int4 NOT NULL,
	organism_id int4 NOT NULL,
	PRIMARY KEY (phylonode_organism_id)
);

CREATE TABLE chado.phylonode_pub (
	phylonode_pub_id serial NOT NULL,
	phylonode_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (phylonode_pub_id)
);

CREATE TABLE chado.phylonode_relationship (
	phylonode_relationship_id serial NOT NULL,
	subject_id int4 NOT NULL,
	object_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"rank" int4,
	phylotree_id int4 NOT NULL,
	PRIMARY KEY (phylonode_relationship_id)
);

CREATE TABLE chado.phylonodeprop (
	phylonodeprop_id serial NOT NULL,
	phylonode_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text DEFAULT ''::text NOT NULL,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (phylonodeprop_id)
);

CREATE TABLE chado.phylotree (
	phylotree_id serial NOT NULL,
	dbxref_id int4 NOT NULL,
	"name" varchar(255),
	type_id int4,
	analysis_id int4,
	"comment" text,
	PRIMARY KEY (phylotree_id)
);

CREATE TABLE chado.phylotree_pub (
	phylotree_pub_id serial NOT NULL,
	phylotree_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (phylotree_pub_id)
);

CREATE TABLE chado.project (
	project_id serial NOT NULL,
	"name" varchar(255) NOT NULL,
	description varchar(255) NOT NULL,
	PRIMARY KEY (project_id)
);

CREATE TABLE chado.project_contact (
	project_contact_id serial NOT NULL,
	project_id int4 NOT NULL,
	contact_id int4 NOT NULL,
	PRIMARY KEY (project_contact_id)
);

CREATE TABLE chado.project_pub (
	project_pub_id serial NOT NULL,
	project_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (project_pub_id)
);

CREATE TABLE chado.project_relationship (
	project_relationship_id serial NOT NULL,
	subject_project_id int4 NOT NULL,
	object_project_id int4 NOT NULL,
	type_id int4 NOT NULL,
	PRIMARY KEY (project_relationship_id)
);

CREATE TABLE chado.projectprop (
	projectprop_id serial NOT NULL,
	project_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (projectprop_id)
);

CREATE TABLE chado.protocol (
	protocol_id serial NOT NULL,
	type_id int4 NOT NULL,
	pub_id int4,
	dbxref_id int4,
	"name" text NOT NULL,
	"uri" text,
	protocoldescription text,
	hardwaredescription text,
	softwaredescription text,
	PRIMARY KEY (protocol_id)
);

CREATE TABLE chado.protocolparam (
	protocolparam_id serial NOT NULL,
	protocol_id int4 NOT NULL,
	"name" text NOT NULL,
	datatype_id int4,
	unittype_id int4,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (protocolparam_id)
);

CREATE TABLE chado.pub (
	pub_id serial NOT NULL,
	title text,
	volumetitle text,
	volume varchar(255),
	series_name varchar(255),
	issue varchar(255),
	pyear varchar(255),
	pages varchar(255),
	miniref varchar(255),
	uniquename text NOT NULL,
	type_id int4 NOT NULL,
	is_obsolete bool DEFAULT false,
	publisher varchar(255),
	pubplace varchar(255),
	PRIMARY KEY (pub_id)
);

CREATE TABLE chado.pub_dbxref (
	pub_dbxref_id serial NOT NULL,
	pub_id int4 NOT NULL,
	dbxref_id int4 NOT NULL,
	is_current bool DEFAULT true NOT NULL,
	PRIMARY KEY (pub_dbxref_id)
);

CREATE TABLE chado.pub_relationship (
	pub_relationship_id serial NOT NULL,
	subject_id int4 NOT NULL,
	object_id int4 NOT NULL,
	type_id int4 NOT NULL,
	PRIMARY KEY (pub_relationship_id)
);

CREATE TABLE chado.pubauthor (
	pubauthor_id serial NOT NULL,
	pub_id int4 NOT NULL,
	"rank" int4 NOT NULL,
	editor bool DEFAULT false,
	surname varchar(100) NOT NULL,
	givennames varchar(100),
	suffix varchar(100),
	PRIMARY KEY (pubauthor_id)
);

CREATE TABLE chado.pubauthor_contact (
	pubauthor_contact_id serial NOT NULL,
	contact_id int4 NOT NULL,
	pubauthor_id int4 NOT NULL,
	PRIMARY KEY (pubauthor_contact_id)
);

CREATE TABLE chado.pubprop (
	pubprop_id serial NOT NULL,
	pub_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text NOT NULL,
	"rank" int4,
	PRIMARY KEY (pubprop_id)
);

CREATE TABLE chado.quantification (
	quantification_id serial NOT NULL,
	acquisition_id int4 NOT NULL,
	operator_id int4,
	protocol_id int4,
	analysis_id int4 NOT NULL,
	quantificationdate timestamp DEFAULT now(),
	"name" text,
	"uri" text,
	PRIMARY KEY (quantification_id)
);

CREATE TABLE chado.quantification_relationship (
	quantification_relationship_id serial NOT NULL,
	subject_id int4 NOT NULL,
	type_id int4 NOT NULL,
	object_id int4 NOT NULL,
	PRIMARY KEY (quantification_relationship_id)
);

CREATE TABLE chado.quantificationprop (
	quantificationprop_id serial NOT NULL,
	quantification_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (quantificationprop_id)
);

CREATE TABLE chado.services_endpoint (
	eid serial NOT NULL,
	"name" varchar(255) NOT NULL,
	"server" varchar(32) NOT NULL,
	"path" varchar(255) NOT NULL,
	authentication text NOT NULL,
	server_settings bytea NOT NULL,
	resources text NOT NULL,
	debug int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (eid)
);

CREATE TABLE chado.services_user (
	uid int8 NOT NULL,
	created int4 DEFAULT 0 NOT NULL,
	changed int4 DEFAULT 0 NOT NULL
);

CREATE TABLE chado.stock (
	stock_id serial NOT NULL,
	dbxref_id int4,
	organism_id int4,
	"name" varchar(255),
	uniquename text NOT NULL,
	description text,
	type_id int4 NOT NULL,
	is_obsolete bool DEFAULT false NOT NULL,
	PRIMARY KEY (stock_id)
);

CREATE TABLE chado.stock_cvterm (
	stock_cvterm_id serial NOT NULL,
	stock_id int4 NOT NULL,
	cvterm_id int4 NOT NULL,
	pub_id int4,
	is_not bool DEFAULT false NOT NULL,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (stock_cvterm_id)
);

CREATE TABLE chado.stock_cvtermprop (
	stock_cvtermprop_id serial NOT NULL,
	stock_cvterm_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (stock_cvtermprop_id)
);

CREATE TABLE chado.stock_dbxref (
	stock_dbxref_id serial NOT NULL,
	stock_id int4 NOT NULL,
	dbxref_id int4 NOT NULL,
	is_current bool DEFAULT true NOT NULL,
	PRIMARY KEY (stock_dbxref_id)
);

CREATE TABLE chado.stock_dbxrefprop (
	stock_dbxrefprop_id serial NOT NULL,
	stock_dbxref_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (stock_dbxrefprop_id)
);

CREATE TABLE chado.stock_genotype (
	stock_genotype_id serial NOT NULL,
	stock_id int4 NOT NULL,
	genotype_id int4 NOT NULL,
	PRIMARY KEY (stock_genotype_id)
);

CREATE TABLE chado.stock_genotype_cvterm (
	stock_genotype_cvterm_id serial NOT NULL,
	stock_genotype_id int4 NOT NULL,
	cvterm_id int4 NOT NULL,
	pub_id int4,
	PRIMARY KEY (stock_genotype_cvterm_id)
);

CREATE TABLE chado.stock_genotype_prop (
	stock_genotype_prop_id serial NOT NULL,
	stock_genotype_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (stock_genotype_prop_id)
);

CREATE TABLE chado.stock_pub (
	stock_pub_id serial NOT NULL,
	stock_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (stock_pub_id)
);

CREATE TABLE chado.stock_relationship (
	stock_relationship_id serial NOT NULL,
	subject_id int4 NOT NULL,
	object_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	background_accession_id int8,
	PRIMARY KEY (stock_relationship_id)
);

CREATE TABLE chado.stock_relationship_cvterm (
	stock_relationship_cvterm_id serial NOT NULL,
	stock_relationship_id int4 NOT NULL,
	cvterm_id int4 NOT NULL,
	pub_id int4,
	PRIMARY KEY (stock_relationship_cvterm_id)
);

CREATE TABLE chado.stock_relationship_pub (
	stock_relationship_pub_id serial NOT NULL,
	stock_relationship_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (stock_relationship_pub_id)
);

CREATE TABLE chado.stock_synonym (
	stock_synonym_id serial NOT NULL,
	synonym_id int4 NOT NULL,
	stock_id int4 NOT NULL,
	pub_id int4,
	is_current bool DEFAULT true NOT NULL,
	is_internal bool DEFAULT false NOT NULL,
	PRIMARY KEY (stock_synonym_id)
);

CREATE TABLE chado.stockcollection (
	stockcollection_id serial NOT NULL,
	type_id int4 NOT NULL,
	contact_id int4,
	"name" varchar(255),
	uniquename text NOT NULL,
	PRIMARY KEY (stockcollection_id)
);

CREATE TABLE chado.stockcollection_stock (
	stockcollection_stock_id serial NOT NULL,
	stockcollection_id int4 NOT NULL,
	stock_id int4 NOT NULL,
	PRIMARY KEY (stockcollection_stock_id)
);

CREATE TABLE chado.stockcollectionprop (
	stockcollectionprop_id serial NOT NULL,
	stockcollection_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (stockcollectionprop_id)
);

CREATE TABLE chado.stockprop (
	stockprop_id serial NOT NULL,
	stock_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (stockprop_id)
);

CREATE TABLE chado.stockprop_pub (
	stockprop_pub_id serial NOT NULL,
	stockprop_id int4 NOT NULL,
	pub_id int4 NOT NULL,
	PRIMARY KEY (stockprop_pub_id)
);

CREATE TABLE chado.study (
	study_id serial NOT NULL,
	contact_id int4 NOT NULL,
	pub_id int4,
	dbxref_id int4,
	"name" text NOT NULL,
	description text,
	PRIMARY KEY (study_id)
);

CREATE TABLE chado.study_assay (
	study_assay_id serial NOT NULL,
	study_id int4 NOT NULL,
	assay_id int4 NOT NULL,
	PRIMARY KEY (study_assay_id)
);

CREATE TABLE chado.studydesign (
	studydesign_id serial NOT NULL,
	study_id int4 NOT NULL,
	description text,
	PRIMARY KEY (studydesign_id)
);

CREATE TABLE chado.studydesignprop (
	studydesignprop_id serial NOT NULL,
	studydesign_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (studydesignprop_id)
);

CREATE TABLE chado.studyfactor (
	studyfactor_id serial NOT NULL,
	studydesign_id int4 NOT NULL,
	type_id int4,
	"name" text NOT NULL,
	description text,
	PRIMARY KEY (studyfactor_id)
);

CREATE TABLE chado.studyfactorvalue (
	studyfactorvalue_id serial NOT NULL,
	studyfactor_id int4 NOT NULL,
	assay_id int4 NOT NULL,
	factorvalue text,
	"name" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (studyfactorvalue_id)
);

CREATE TABLE chado.studyprop (
	studyprop_id serial NOT NULL,
	study_id int4 NOT NULL,
	type_id int4 NOT NULL,
	"value" text,
	"rank" int4 DEFAULT 0 NOT NULL,
	PRIMARY KEY (studyprop_id)
);

CREATE TABLE chado.studyprop_feature (
	studyprop_feature_id serial NOT NULL,
	studyprop_id int4 NOT NULL,
	feature_id int4 NOT NULL,
	type_id int4,
	PRIMARY KEY (studyprop_feature_id)
);

CREATE TABLE chado.synonym (
	synonym_id serial NOT NULL,
	"name" varchar(255) NOT NULL,
	type_id int4 NOT NULL,
	synonym_sgml varchar(255) NOT NULL,
	PRIMARY KEY (synonym_id)
);

CREATE TABLE chado.tableinfo (
	tableinfo_id serial NOT NULL,
	"name" varchar(30) NOT NULL,
	primary_key_column varchar(30),
	is_view int4 DEFAULT 0 NOT NULL,
	view_on_table_id int4,
	superclass_table_id int4,
	is_updateable int4 DEFAULT 1 NOT NULL,
	modification_date date DEFAULT now() NOT NULL,
	PRIMARY KEY (tableinfo_id)
);

CREATE TABLE chado.treatment (
	treatment_id serial NOT NULL,
	"rank" int4 DEFAULT 0 NOT NULL,
	biomaterial_id int4 NOT NULL,
	type_id int4 NOT NULL,
	protocol_id int4,
	"name" text,
	PRIMARY KEY (treatment_id)
);

CREATE TABLE chado.tripal_gff_temp (
	feature_id int4 NOT NULL,
	organism_id int4 NOT NULL,
	uniquename text NOT NULL,
	type_name varchar(1024) NOT NULL
);

CREATE TABLE chado.tripal_obo_temp (
	"id" varchar(255) NOT NULL,
	stanza text NOT NULL,
	"type" varchar(50) NOT NULL
);

ALTER TABLE chado.acquisition
	ADD FOREIGN KEY (assay_id) 
	REFERENCES chado.assay (assay_id);

ALTER TABLE chado.acquisition
	ADD FOREIGN KEY (channel_id) 
	REFERENCES chado.channel (channel_id);

ALTER TABLE chado.acquisition
	ADD FOREIGN KEY (protocol_id) 
	REFERENCES chado.protocol (protocol_id);



ALTER TABLE chado.acquisition_relationship
	ADD FOREIGN KEY (object_id,subject_id) 
	REFERENCES chado.acquisition (acquisition_id,acquisition_id);

ALTER TABLE chado.acquisition_relationship
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado.acquisitionprop
	ADD FOREIGN KEY (acquisition_id) 
	REFERENCES chado.acquisition (acquisition_id);

ALTER TABLE chado.acquisitionprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado.analysis_organism
	ADD FOREIGN KEY (analysis_id) 
	REFERENCES chado.analysis (analysis_id);

ALTER TABLE chado.analysis_organism
	ADD FOREIGN KEY (organism_id) 
	REFERENCES chado.organism (organism_id);



ALTER TABLE chado.analysisfeature
	ADD FOREIGN KEY (analysis_id) 
	REFERENCES chado.analysis (analysis_id);

ALTER TABLE chado.analysisfeature
	ADD FOREIGN KEY (feature_id) 
	REFERENCES chado.feature (feature_id);



ALTER TABLE chado.analysisfeatureprop
	ADD FOREIGN KEY (analysisfeature_id) 
	REFERENCES chado.analysisfeature (analysisfeature_id);

ALTER TABLE chado.analysisfeatureprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado.analysisprop
	ADD FOREIGN KEY (analysis_id) 
	REFERENCES chado.analysis (analysis_id);

ALTER TABLE chado.analysisprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado.arraydesign
	ADD FOREIGN KEY (manufacturer_id) 
	REFERENCES chado.contact (contact_id);

ALTER TABLE chado.arraydesign
	ADD FOREIGN KEY (platformtype_id,substratetype_id) 
	REFERENCES chado.cvterm (cvterm_id,cvterm_id);

ALTER TABLE chado.arraydesign
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);

ALTER TABLE chado.arraydesign
	ADD FOREIGN KEY (protocol_id) 
	REFERENCES chado.protocol (protocol_id);



ALTER TABLE chado.arraydesignprop
	ADD FOREIGN KEY (arraydesign_id) 
	REFERENCES chado.arraydesign (arraydesign_id);

ALTER TABLE chado.arraydesignprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado.assay
	ADD FOREIGN KEY (arraydesign_id) 
	REFERENCES chado.arraydesign (arraydesign_id);

ALTER TABLE chado.assay
	ADD FOREIGN KEY (operator_id) 
	REFERENCES chado.contact (contact_id);

ALTER TABLE chado.assay
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);

ALTER TABLE chado.assay
	ADD FOREIGN KEY (protocol_id) 
	REFERENCES chado.protocol (protocol_id);



ALTER TABLE chado.assay_biomaterial
	ADD FOREIGN KEY (assay_id) 
	REFERENCES chado.assay (assay_id);

ALTER TABLE chado.assay_biomaterial
	ADD FOREIGN KEY (biomaterial_id) 
	REFERENCES chado.biomaterial (biomaterial_id);

ALTER TABLE chado.assay_biomaterial
	ADD FOREIGN KEY (channel_id) 
	REFERENCES chado.channel (channel_id);



ALTER TABLE chado.assay_project
	ADD FOREIGN KEY (assay_id) 
	REFERENCES chado.assay (assay_id);

ALTER TABLE chado.assay_project
	ADD FOREIGN KEY (project_id) 
	REFERENCES chado.project (project_id);



ALTER TABLE chado.assayprop
	ADD FOREIGN KEY (assay_id) 
	REFERENCES chado.assay (assay_id);

ALTER TABLE chado.assayprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado.biomaterial
	ADD FOREIGN KEY (biosourceprovider_id) 
	REFERENCES chado.contact (contact_id);

ALTER TABLE chado.biomaterial
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);

ALTER TABLE chado.biomaterial
	ADD FOREIGN KEY (taxon_id) 
	REFERENCES chado.organism (organism_id);



ALTER TABLE chado.biomaterial_dbxref
	ADD FOREIGN KEY (biomaterial_id) 
	REFERENCES chado.biomaterial (biomaterial_id);

ALTER TABLE chado.biomaterial_dbxref
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);



ALTER TABLE chado.biomaterial_relationship
	ADD FOREIGN KEY (object_id,subject_id) 
	REFERENCES chado.biomaterial (biomaterial_id,biomaterial_id);

ALTER TABLE chado.biomaterial_relationship
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado.biomaterial_treatment
	ADD FOREIGN KEY (biomaterial_id) 
	REFERENCES chado.biomaterial (biomaterial_id);

ALTER TABLE chado.biomaterial_treatment
	ADD FOREIGN KEY (unittype_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.biomaterial_treatment
	ADD FOREIGN KEY (treatment_id) 
	REFERENCES chado.treatment (treatment_id);



ALTER TABLE chado.biomaterialprop
	ADD FOREIGN KEY (biomaterial_id) 
	REFERENCES chado.biomaterial (biomaterial_id);

ALTER TABLE chado.biomaterialprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado.cell_line
	ADD FOREIGN KEY (organism_id) 
	REFERENCES chado.organism (organism_id);



ALTER TABLE chado.cell_line_cvterm
	ADD FOREIGN KEY (cell_line_id) 
	REFERENCES chado.cell_line (cell_line_id);

ALTER TABLE chado.cell_line_cvterm
	ADD FOREIGN KEY (cvterm_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.cell_line_cvterm
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.cell_line_cvtermprop
	ADD FOREIGN KEY (cell_line_cvterm_id) 
	REFERENCES chado.cell_line_cvterm (cell_line_cvterm_id);

ALTER TABLE chado.cell_line_cvtermprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado.cell_line_dbxref
	ADD FOREIGN KEY (cell_line_id) 
	REFERENCES chado.cell_line (cell_line_id);

ALTER TABLE chado.cell_line_dbxref
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);



ALTER TABLE chado.cell_line_feature
	ADD FOREIGN KEY (cell_line_id) 
	REFERENCES chado.cell_line (cell_line_id);

ALTER TABLE chado.cell_line_feature
	ADD FOREIGN KEY (feature_id) 
	REFERENCES chado.feature (feature_id);

ALTER TABLE chado.cell_line_feature
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.cell_line_library
	ADD FOREIGN KEY (cell_line_id) 
	REFERENCES chado.cell_line (cell_line_id);

ALTER TABLE chado.cell_line_library
	ADD FOREIGN KEY (library_id) 
	REFERENCES chado."library" (library_id);

ALTER TABLE chado.cell_line_library
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.cell_line_pub
	ADD FOREIGN KEY (cell_line_id) 
	REFERENCES chado.cell_line (cell_line_id);

ALTER TABLE chado.cell_line_pub
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.cell_line_relationship
	ADD FOREIGN KEY (object_id,subject_id) 
	REFERENCES chado.cell_line (cell_line_id,cell_line_id);

ALTER TABLE chado.cell_line_relationship
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado.cell_line_synonym
	ADD FOREIGN KEY (cell_line_id) 
	REFERENCES chado.cell_line (cell_line_id);

ALTER TABLE chado.cell_line_synonym
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);

ALTER TABLE chado.cell_line_synonym
	ADD FOREIGN KEY (synonym_id) 
	REFERENCES chado.synonym (synonym_id);



ALTER TABLE chado.cell_lineprop
	ADD FOREIGN KEY (cell_line_id) 
	REFERENCES chado.cell_line (cell_line_id);

ALTER TABLE chado.cell_lineprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado.cell_lineprop_pub
	ADD FOREIGN KEY (cell_lineprop_id) 
	REFERENCES chado.cell_lineprop (cell_lineprop_id);

ALTER TABLE chado.cell_lineprop_pub
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.chadoprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado.contact
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado.contact_relationship
	ADD FOREIGN KEY (object_id,subject_id) 
	REFERENCES chado.contact (contact_id,contact_id);

ALTER TABLE chado.contact_relationship
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado."control"
	ADD FOREIGN KEY (assay_id) 
	REFERENCES chado.assay (assay_id);

ALTER TABLE chado."control"
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado."control"
	ADD FOREIGN KEY (tableinfo_id) 
	REFERENCES chado.tableinfo (tableinfo_id);



ALTER TABLE chado.cvprop
	ADD FOREIGN KEY (cv_id) 
	REFERENCES chado.cv (cv_id);

ALTER TABLE chado.cvprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado.cvterm
	ADD FOREIGN KEY (cv_id) 
	REFERENCES chado.cv (cv_id);

ALTER TABLE chado.cvterm
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);



ALTER TABLE chado.cvterm_dbxref
	ADD FOREIGN KEY (cvterm_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.cvterm_dbxref
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);



ALTER TABLE chado.cvterm_relationship
	ADD FOREIGN KEY (object_id,subject_id,type_id) 
	REFERENCES chado.cvterm (cvterm_id,cvterm_id,cvterm_id);



ALTER TABLE chado.cvtermpath
	ADD FOREIGN KEY (cv_id) 
	REFERENCES chado.cv (cv_id);

ALTER TABLE chado.cvtermpath
	ADD FOREIGN KEY (object_id,subject_id,type_id) 
	REFERENCES chado.cvterm (cvterm_id,cvterm_id,cvterm_id);



ALTER TABLE chado.cvtermprop
	ADD FOREIGN KEY (cvterm_id,type_id) 
	REFERENCES chado.cvterm (cvterm_id,cvterm_id);



ALTER TABLE chado.cvtermsynonym
	ADD FOREIGN KEY (cvterm_id,type_id) 
	REFERENCES chado.cvterm (cvterm_id,cvterm_id);



ALTER TABLE chado.dbxref
	ADD FOREIGN KEY (db_id) 
	REFERENCES chado."db" (db_id);



ALTER TABLE chado.dbxrefprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.dbxrefprop
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);



ALTER TABLE chado."element"
	ADD FOREIGN KEY (arraydesign_id) 
	REFERENCES chado.arraydesign (arraydesign_id);

ALTER TABLE chado."element"
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado."element"
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);

ALTER TABLE chado."element"
	ADD FOREIGN KEY (feature_id) 
	REFERENCES chado.feature (feature_id);



ALTER TABLE chado.element_relationship
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.element_relationship
	ADD FOREIGN KEY (object_id,subject_id) 
	REFERENCES chado."element" (element_id,element_id);



ALTER TABLE chado.elementresult
	ADD FOREIGN KEY (element_id) 
	REFERENCES chado."element" (element_id);

ALTER TABLE chado.elementresult
	ADD FOREIGN KEY (quantification_id) 
	REFERENCES chado.quantification (quantification_id);



ALTER TABLE chado.elementresult_relationship
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.elementresult_relationship
	ADD FOREIGN KEY (object_id,subject_id) 
	REFERENCES chado.elementresult (elementresult_id,elementresult_id);



ALTER TABLE chado.environment_cvterm
	ADD FOREIGN KEY (cvterm_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.environment_cvterm
	ADD FOREIGN KEY (environment_id) 
	REFERENCES chado.environment (environment_id);



ALTER TABLE chado.expression_cvterm
	ADD FOREIGN KEY (cvterm_id,cvterm_type_id) 
	REFERENCES chado.cvterm (cvterm_id,cvterm_id);

ALTER TABLE chado.expression_cvterm
	ADD FOREIGN KEY (expression_id) 
	REFERENCES chado.expression (expression_id);



ALTER TABLE chado.expression_cvtermprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.expression_cvtermprop
	ADD FOREIGN KEY (expression_cvterm_id) 
	REFERENCES chado.expression_cvterm (expression_cvterm_id);



ALTER TABLE chado.expression_image
	ADD FOREIGN KEY (eimage_id) 
	REFERENCES chado.eimage (eimage_id);

ALTER TABLE chado.expression_image
	ADD FOREIGN KEY (expression_id) 
	REFERENCES chado.expression (expression_id);



ALTER TABLE chado.expression_pub
	ADD FOREIGN KEY (expression_id) 
	REFERENCES chado.expression (expression_id);

ALTER TABLE chado.expression_pub
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.expressionprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.expressionprop
	ADD FOREIGN KEY (expression_id) 
	REFERENCES chado.expression (expression_id);



ALTER TABLE chado.feature
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.feature
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);

ALTER TABLE chado.feature
	ADD FOREIGN KEY (organism_id) 
	REFERENCES chado.organism (organism_id);



ALTER TABLE chado.feature_cvterm
	ADD FOREIGN KEY (cvterm_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.feature_cvterm
	ADD FOREIGN KEY (feature_id) 
	REFERENCES chado.feature (feature_id);

ALTER TABLE chado.feature_cvterm
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.feature_cvterm_dbxref
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);

ALTER TABLE chado.feature_cvterm_dbxref
	ADD FOREIGN KEY (feature_cvterm_id) 
	REFERENCES chado.feature_cvterm (feature_cvterm_id);



ALTER TABLE chado.feature_cvterm_pub
	ADD FOREIGN KEY (feature_cvterm_id) 
	REFERENCES chado.feature_cvterm (feature_cvterm_id);

ALTER TABLE chado.feature_cvterm_pub
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.feature_cvtermprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.feature_cvtermprop
	ADD FOREIGN KEY (feature_cvterm_id) 
	REFERENCES chado.feature_cvterm (feature_cvterm_id);



ALTER TABLE chado.feature_dbxref
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);

ALTER TABLE chado.feature_dbxref
	ADD FOREIGN KEY (feature_id) 
	REFERENCES chado.feature (feature_id);



ALTER TABLE chado.feature_expression
	ADD FOREIGN KEY (expression_id) 
	REFERENCES chado.expression (expression_id);

ALTER TABLE chado.feature_expression
	ADD FOREIGN KEY (feature_id) 
	REFERENCES chado.feature (feature_id);

ALTER TABLE chado.feature_expression
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.feature_expressionprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.feature_expressionprop
	ADD FOREIGN KEY (feature_expression_id) 
	REFERENCES chado.feature_expression (feature_expression_id);



ALTER TABLE chado.feature_genotype
	ADD FOREIGN KEY (cvterm_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.feature_genotype
	ADD FOREIGN KEY (chromosome_id,feature_id) 
	REFERENCES chado.feature (feature_id,feature_id);

ALTER TABLE chado.feature_genotype
	ADD FOREIGN KEY (genotype_id) 
	REFERENCES chado.genotype (genotype_id);

ALTER TABLE chado.feature_genotype
	ADD FOREIGN KEY (background_accession_id) 
	REFERENCES chado.stock (stock_id);



ALTER TABLE chado.feature_genotype_cvterm
	ADD FOREIGN KEY (cvterm_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.feature_genotype_cvterm
	ADD FOREIGN KEY (feature_genotype_id) 
	REFERENCES chado.feature_genotype (feature_genotype_id);

ALTER TABLE chado.feature_genotype_cvterm
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.feature_genotype_prop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.feature_genotype_prop
	ADD FOREIGN KEY (feature_genotype_id) 
	REFERENCES chado.feature_genotype (feature_genotype_id);



ALTER TABLE chado.feature_phenotype
	ADD FOREIGN KEY (feature_id) 
	REFERENCES chado.feature (feature_id);

ALTER TABLE chado.feature_phenotype
	ADD FOREIGN KEY (phenotype_id) 
	REFERENCES chado.phenotype (phenotype_id);



ALTER TABLE chado.feature_pub
	ADD FOREIGN KEY (feature_id) 
	REFERENCES chado.feature (feature_id);

ALTER TABLE chado.feature_pub
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.feature_pubprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.feature_pubprop
	ADD FOREIGN KEY (feature_pub_id) 
	REFERENCES chado.feature_pub (feature_pub_id);



ALTER TABLE chado.feature_relationship
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.feature_relationship
	ADD FOREIGN KEY (object_id,subject_id) 
	REFERENCES chado.feature (feature_id,feature_id);



ALTER TABLE chado.feature_relationship_pub
	ADD FOREIGN KEY (feature_relationship_id) 
	REFERENCES chado.feature_relationship (feature_relationship_id);

ALTER TABLE chado.feature_relationship_pub
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.feature_relationshipprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.feature_relationshipprop
	ADD FOREIGN KEY (feature_relationship_id) 
	REFERENCES chado.feature_relationship (feature_relationship_id);



ALTER TABLE chado.feature_relationshipprop_pub
	ADD FOREIGN KEY (feature_relationshipprop_id) 
	REFERENCES chado.feature_relationshipprop (feature_relationshipprop_id);

ALTER TABLE chado.feature_relationshipprop_pub
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.feature_synonym
	ADD FOREIGN KEY (feature_id) 
	REFERENCES chado.feature (feature_id);

ALTER TABLE chado.feature_synonym
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);

ALTER TABLE chado.feature_synonym
	ADD FOREIGN KEY (synonym_id) 
	REFERENCES chado.synonym (synonym_id);



ALTER TABLE chado.featureloc
	ADD FOREIGN KEY (feature_id,srcfeature_id) 
	REFERENCES chado.feature (feature_id,feature_id);



ALTER TABLE chado.featureloc_pub
	ADD FOREIGN KEY (featureloc_id) 
	REFERENCES chado.featureloc (featureloc_id);

ALTER TABLE chado.featureloc_pub
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.featuremap
	ADD FOREIGN KEY (unittype_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado.featuremap_pub
	ADD FOREIGN KEY (featuremap_id) 
	REFERENCES chado.featuremap (featuremap_id);

ALTER TABLE chado.featuremap_pub
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.featurepos
	ADD FOREIGN KEY (feature_id,map_feature_id) 
	REFERENCES chado.feature (feature_id,feature_id);

ALTER TABLE chado.featurepos
	ADD FOREIGN KEY (featuremap_id) 
	REFERENCES chado.featuremap (featuremap_id);



ALTER TABLE chado.featureprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.featureprop
	ADD FOREIGN KEY (feature_id) 
	REFERENCES chado.feature (feature_id);



ALTER TABLE chado.featureprop_pub
	ADD FOREIGN KEY (featureprop_id) 
	REFERENCES chado.featureprop (featureprop_id);

ALTER TABLE chado.featureprop_pub
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.featurerange
	ADD FOREIGN KEY (feature_id,leftendf_id,leftstartf_id,rightendf_id,rightstartf_id) 
	REFERENCES chado.feature (feature_id,feature_id,feature_id,feature_id,feature_id);

ALTER TABLE chado.featurerange
	ADD FOREIGN KEY (featuremap_id) 
	REFERENCES chado.featuremap (featuremap_id);



ALTER TABLE chado.genotype
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.genotype
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);



ALTER TABLE chado.genotype_cvterm
	ADD FOREIGN KEY (cvterm_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.genotype_cvterm
	ADD FOREIGN KEY (genotype_id) 
	REFERENCES chado.genotype (genotype_id);

ALTER TABLE chado.genotype_cvterm
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.genotype_dbxref
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);

ALTER TABLE chado.genotype_dbxref
	ADD FOREIGN KEY (genotype_id) 
	REFERENCES chado.genotype (genotype_id);



ALTER TABLE chado.genotype_synonym
	ADD FOREIGN KEY (synonym_id) 
	REFERENCES chado.synonym (synonym_id);



ALTER TABLE chado.genotypeprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.genotypeprop
	ADD FOREIGN KEY (genotype_id) 
	REFERENCES chado.genotype (genotype_id);



ALTER TABLE chado."library"
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado."library"
	ADD FOREIGN KEY (organism_id) 
	REFERENCES chado.organism (organism_id);



ALTER TABLE chado.library_cvterm
	ADD FOREIGN KEY (cvterm_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.library_cvterm
	ADD FOREIGN KEY (library_id) 
	REFERENCES chado."library" (library_id);

ALTER TABLE chado.library_cvterm
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.library_dbxref
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);

ALTER TABLE chado.library_dbxref
	ADD FOREIGN KEY (library_id) 
	REFERENCES chado."library" (library_id);



ALTER TABLE chado.library_feature
	ADD FOREIGN KEY (feature_id) 
	REFERENCES chado.feature (feature_id);

ALTER TABLE chado.library_feature
	ADD FOREIGN KEY (library_id) 
	REFERENCES chado."library" (library_id);



ALTER TABLE chado.library_pub
	ADD FOREIGN KEY (library_id) 
	REFERENCES chado."library" (library_id);

ALTER TABLE chado.library_pub
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.library_synonym
	ADD FOREIGN KEY (library_id) 
	REFERENCES chado."library" (library_id);

ALTER TABLE chado.library_synonym
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);

ALTER TABLE chado.library_synonym
	ADD FOREIGN KEY (synonym_id) 
	REFERENCES chado.synonym (synonym_id);



ALTER TABLE chado.libraryprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.libraryprop
	ADD FOREIGN KEY (library_id) 
	REFERENCES chado."library" (library_id);



ALTER TABLE chado.libraryprop_pub
	ADD FOREIGN KEY (libraryprop_id) 
	REFERENCES chado.libraryprop (libraryprop_id);

ALTER TABLE chado.libraryprop_pub
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.magedocumentation
	ADD FOREIGN KEY (mageml_id) 
	REFERENCES chado.mageml (mageml_id);

ALTER TABLE chado.magedocumentation
	ADD FOREIGN KEY (tableinfo_id) 
	REFERENCES chado.tableinfo (tableinfo_id);



ALTER TABLE chado.nd_experiment
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.nd_experiment
	ADD FOREIGN KEY (nd_geolocation_id) 
	REFERENCES chado.nd_geolocation (nd_geolocation_id);



ALTER TABLE chado.nd_experiment_contact
	ADD FOREIGN KEY (contact_id) 
	REFERENCES chado.contact (contact_id);

ALTER TABLE chado.nd_experiment_contact
	ADD FOREIGN KEY (nd_experiment_id) 
	REFERENCES chado.nd_experiment (nd_experiment_id);



ALTER TABLE chado.nd_experiment_dbxref
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);

ALTER TABLE chado.nd_experiment_dbxref
	ADD FOREIGN KEY (nd_experiment_id) 
	REFERENCES chado.nd_experiment (nd_experiment_id);



ALTER TABLE chado.nd_experiment_genotype
	ADD FOREIGN KEY (genotype_id) 
	REFERENCES chado.genotype (genotype_id);

ALTER TABLE chado.nd_experiment_genotype
	ADD FOREIGN KEY (nd_experiment_id) 
	REFERENCES chado.nd_experiment (nd_experiment_id);



ALTER TABLE chado.nd_experiment_phenotype
	ADD FOREIGN KEY (nd_experiment_id) 
	REFERENCES chado.nd_experiment (nd_experiment_id);

ALTER TABLE chado.nd_experiment_phenotype
	ADD FOREIGN KEY (phenotype_id) 
	REFERENCES chado.phenotype (phenotype_id);



ALTER TABLE chado.nd_experiment_project
	ADD FOREIGN KEY (nd_experiment_id) 
	REFERENCES chado.nd_experiment (nd_experiment_id);

ALTER TABLE chado.nd_experiment_project
	ADD FOREIGN KEY (project_id) 
	REFERENCES chado.project (project_id);



ALTER TABLE chado.nd_experiment_protocol
	ADD FOREIGN KEY (nd_experiment_id) 
	REFERENCES chado.nd_experiment (nd_experiment_id);

ALTER TABLE chado.nd_experiment_protocol
	ADD FOREIGN KEY (nd_protocol_id) 
	REFERENCES chado.nd_protocol (nd_protocol_id);



ALTER TABLE chado.nd_experiment_pub
	ADD FOREIGN KEY (nd_experiment_id) 
	REFERENCES chado.nd_experiment (nd_experiment_id);

ALTER TABLE chado.nd_experiment_pub
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.nd_experiment_stock
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.nd_experiment_stock
	ADD FOREIGN KEY (nd_experiment_id) 
	REFERENCES chado.nd_experiment (nd_experiment_id);

ALTER TABLE chado.nd_experiment_stock
	ADD FOREIGN KEY (stock_id) 
	REFERENCES chado.stock (stock_id);



ALTER TABLE chado.nd_experiment_stock_dbxref
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);

ALTER TABLE chado.nd_experiment_stock_dbxref
	ADD FOREIGN KEY (nd_experiment_stock_id) 
	REFERENCES chado.nd_experiment_stock (nd_experiment_stock_id);



ALTER TABLE chado.nd_experiment_stockprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.nd_experiment_stockprop
	ADD FOREIGN KEY (nd_experiment_stock_id) 
	REFERENCES chado.nd_experiment_stock (nd_experiment_stock_id);



ALTER TABLE chado.nd_experimentprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.nd_experimentprop
	ADD FOREIGN KEY (nd_experiment_id) 
	REFERENCES chado.nd_experiment (nd_experiment_id);



ALTER TABLE chado.nd_geolocationprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.nd_geolocationprop
	ADD FOREIGN KEY (nd_geolocation_id) 
	REFERENCES chado.nd_geolocation (nd_geolocation_id);



ALTER TABLE chado.nd_protocol
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado.nd_protocol_reagent
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.nd_protocol_reagent
	ADD FOREIGN KEY (nd_protocol_id) 
	REFERENCES chado.nd_protocol (nd_protocol_id);

ALTER TABLE chado.nd_protocol_reagent
	ADD FOREIGN KEY (reagent_id) 
	REFERENCES chado.nd_reagent (nd_reagent_id);



ALTER TABLE chado.nd_protocolprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.nd_protocolprop
	ADD FOREIGN KEY (nd_protocol_id) 
	REFERENCES chado.nd_protocol (nd_protocol_id);



ALTER TABLE chado.nd_reagent
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado.nd_reagent_relationship
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.nd_reagent_relationship
	ADD FOREIGN KEY (object_reagent_id,subject_reagent_id) 
	REFERENCES chado.nd_reagent (nd_reagent_id,nd_reagent_id);



ALTER TABLE chado.nd_reagentprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.nd_reagentprop
	ADD FOREIGN KEY (nd_reagent_id) 
	REFERENCES chado.nd_reagent (nd_reagent_id);



ALTER TABLE chado.organism_dbxref
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);

ALTER TABLE chado.organism_dbxref
	ADD FOREIGN KEY (organism_id) 
	REFERENCES chado.organism (organism_id);



ALTER TABLE chado.organismprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.organismprop
	ADD FOREIGN KEY (organism_id) 
	REFERENCES chado.organism (organism_id);



ALTER TABLE chado.phendesc
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.phendesc
	ADD FOREIGN KEY (environment_id) 
	REFERENCES chado.environment (environment_id);

ALTER TABLE chado.phendesc
	ADD FOREIGN KEY (genotype_id) 
	REFERENCES chado.genotype (genotype_id);

ALTER TABLE chado.phendesc
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.phenotype
	ADD FOREIGN KEY (assay_id,attr_id,cvalue_id,observable_id) 
	REFERENCES chado.cvterm (cvterm_id,cvterm_id,cvterm_id,cvterm_id);



ALTER TABLE chado.phenotype_comparison
	ADD FOREIGN KEY (environment1_id,environment2_id) 
	REFERENCES chado.environment (environment_id,environment_id);

ALTER TABLE chado.phenotype_comparison
	ADD FOREIGN KEY (genotype1_id,genotype2_id) 
	REFERENCES chado.genotype (genotype_id,genotype_id);

ALTER TABLE chado.phenotype_comparison
	ADD FOREIGN KEY (organism_id) 
	REFERENCES chado.organism (organism_id);

ALTER TABLE chado.phenotype_comparison
	ADD FOREIGN KEY (phenotype1_id,phenotype2_id) 
	REFERENCES chado.phenotype (phenotype_id,phenotype_id);

ALTER TABLE chado.phenotype_comparison
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.phenotype_comparison_cvterm
	ADD FOREIGN KEY (cvterm_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.phenotype_comparison_cvterm
	ADD FOREIGN KEY (phenotype_comparison_id) 
	REFERENCES chado.phenotype_comparison (phenotype_comparison_id);

ALTER TABLE chado.phenotype_comparison_cvterm
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.phenotype_cvterm
	ADD FOREIGN KEY (cvterm_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.phenotype_cvterm
	ADD FOREIGN KEY (phenotype_id) 
	REFERENCES chado.phenotype (phenotype_id);



ALTER TABLE chado.phenstatement
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.phenstatement
	ADD FOREIGN KEY (environment_id) 
	REFERENCES chado.environment (environment_id);

ALTER TABLE chado.phenstatement
	ADD FOREIGN KEY (genotype_id) 
	REFERENCES chado.genotype (genotype_id);

ALTER TABLE chado.phenstatement
	ADD FOREIGN KEY (phenotype_id) 
	REFERENCES chado.phenotype (phenotype_id);

ALTER TABLE chado.phenstatement
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.phylonode
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.phylonode
	ADD FOREIGN KEY (feature_id) 
	REFERENCES chado.feature (feature_id);

ALTER TABLE chado.phylonode
	ADD FOREIGN KEY (parent_phylonode_id) 
	REFERENCES chado.phylonode (phylonode_id);

ALTER TABLE chado.phylonode
	ADD FOREIGN KEY (phylotree_id) 
	REFERENCES chado.phylotree (phylotree_id);



ALTER TABLE chado.phylonode_dbxref
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);

ALTER TABLE chado.phylonode_dbxref
	ADD FOREIGN KEY (phylonode_id) 
	REFERENCES chado.phylonode (phylonode_id);



ALTER TABLE chado.phylonode_organism
	ADD FOREIGN KEY (organism_id) 
	REFERENCES chado.organism (organism_id);

ALTER TABLE chado.phylonode_organism
	ADD FOREIGN KEY (phylonode_id) 
	REFERENCES chado.phylonode (phylonode_id);



ALTER TABLE chado.phylonode_pub
	ADD FOREIGN KEY (phylonode_id) 
	REFERENCES chado.phylonode (phylonode_id);

ALTER TABLE chado.phylonode_pub
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.phylonode_relationship
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.phylonode_relationship
	ADD FOREIGN KEY (object_id,subject_id) 
	REFERENCES chado.phylonode (phylonode_id,phylonode_id);

ALTER TABLE chado.phylonode_relationship
	ADD FOREIGN KEY (phylotree_id) 
	REFERENCES chado.phylotree (phylotree_id);



ALTER TABLE chado.phylonodeprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.phylonodeprop
	ADD FOREIGN KEY (phylonode_id) 
	REFERENCES chado.phylonode (phylonode_id);



ALTER TABLE chado.phylotree
	ADD FOREIGN KEY (analysis_id) 
	REFERENCES chado.analysis (analysis_id);

ALTER TABLE chado.phylotree
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.phylotree
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);



ALTER TABLE chado.phylotree_pub
	ADD FOREIGN KEY (phylotree_id) 
	REFERENCES chado.phylotree (phylotree_id);

ALTER TABLE chado.phylotree_pub
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.project_contact
	ADD FOREIGN KEY (contact_id) 
	REFERENCES chado.contact (contact_id);

ALTER TABLE chado.project_contact
	ADD FOREIGN KEY (project_id) 
	REFERENCES chado.project (project_id);



ALTER TABLE chado.project_pub
	ADD FOREIGN KEY (project_id) 
	REFERENCES chado.project (project_id);

ALTER TABLE chado.project_pub
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.project_relationship
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.project_relationship
	ADD FOREIGN KEY (object_project_id,subject_project_id) 
	REFERENCES chado.project (project_id,project_id);



ALTER TABLE chado.projectprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.projectprop
	ADD FOREIGN KEY (project_id) 
	REFERENCES chado.project (project_id);



ALTER TABLE chado.protocol
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.protocol
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);

ALTER TABLE chado.protocol
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.protocolparam
	ADD FOREIGN KEY (datatype_id,unittype_id) 
	REFERENCES chado.cvterm (cvterm_id,cvterm_id);

ALTER TABLE chado.protocolparam
	ADD FOREIGN KEY (protocol_id) 
	REFERENCES chado.protocol (protocol_id);



ALTER TABLE chado.pub
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado.pub_dbxref
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);

ALTER TABLE chado.pub_dbxref
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.pub_relationship
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.pub_relationship
	ADD FOREIGN KEY (object_id,subject_id) 
	REFERENCES chado.pub (pub_id,pub_id);



ALTER TABLE chado.pubauthor
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.pubprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.pubprop
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.quantification
	ADD FOREIGN KEY (acquisition_id) 
	REFERENCES chado.acquisition (acquisition_id);

ALTER TABLE chado.quantification
	ADD FOREIGN KEY (analysis_id) 
	REFERENCES chado.analysis (analysis_id);

ALTER TABLE chado.quantification
	ADD FOREIGN KEY (operator_id) 
	REFERENCES chado.contact (contact_id);

ALTER TABLE chado.quantification
	ADD FOREIGN KEY (protocol_id) 
	REFERENCES chado.protocol (protocol_id);



ALTER TABLE chado.quantification_relationship
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.quantification_relationship
	ADD FOREIGN KEY (object_id,subject_id) 
	REFERENCES chado.quantification (quantification_id,quantification_id);



ALTER TABLE chado.quantificationprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.quantificationprop
	ADD FOREIGN KEY (quantification_id) 
	REFERENCES chado.quantification (quantification_id);



ALTER TABLE chado.stock
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.stock
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);

ALTER TABLE chado.stock
	ADD FOREIGN KEY (organism_id) 
	REFERENCES chado.organism (organism_id);



ALTER TABLE chado.stock_cvterm
	ADD FOREIGN KEY (cvterm_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.stock_cvterm
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);

ALTER TABLE chado.stock_cvterm
	ADD FOREIGN KEY (stock_id) 
	REFERENCES chado.stock (stock_id);



ALTER TABLE chado.stock_cvtermprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.stock_cvtermprop
	ADD FOREIGN KEY (stock_cvterm_id) 
	REFERENCES chado.stock_cvterm (stock_cvterm_id);



ALTER TABLE chado.stock_dbxref
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);

ALTER TABLE chado.stock_dbxref
	ADD FOREIGN KEY (stock_id) 
	REFERENCES chado.stock (stock_id);



ALTER TABLE chado.stock_dbxrefprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.stock_dbxrefprop
	ADD FOREIGN KEY (stock_dbxref_id) 
	REFERENCES chado.stock_dbxref (stock_dbxref_id);



ALTER TABLE chado.stock_genotype
	ADD FOREIGN KEY (genotype_id) 
	REFERENCES chado.genotype (genotype_id);

ALTER TABLE chado.stock_genotype
	ADD FOREIGN KEY (stock_id) 
	REFERENCES chado.stock (stock_id);



ALTER TABLE chado.stock_genotype_cvterm
	ADD FOREIGN KEY (cvterm_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.stock_genotype_cvterm
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);

ALTER TABLE chado.stock_genotype_cvterm
	ADD FOREIGN KEY (stock_genotype_id) 
	REFERENCES chado.stock_genotype (stock_genotype_id);



ALTER TABLE chado.stock_genotype_prop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.stock_genotype_prop
	ADD FOREIGN KEY (stock_genotype_id) 
	REFERENCES chado.stock_genotype (stock_genotype_id);



ALTER TABLE chado.stock_pub
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);

ALTER TABLE chado.stock_pub
	ADD FOREIGN KEY (stock_id) 
	REFERENCES chado.stock (stock_id);



ALTER TABLE chado.stock_relationship
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.stock_relationship
	ADD FOREIGN KEY (object_id,subject_id,background_accession_id) 
	REFERENCES chado.stock (stock_id,stock_id,stock_id);



ALTER TABLE chado.stock_relationship_cvterm
	ADD FOREIGN KEY (cvterm_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.stock_relationship_cvterm
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);

ALTER TABLE chado.stock_relationship_cvterm
	ADD FOREIGN KEY (stock_relationship_id) 
	REFERENCES chado.stock_relationship (stock_relationship_id);



ALTER TABLE chado.stock_relationship_pub
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);

ALTER TABLE chado.stock_relationship_pub
	ADD FOREIGN KEY (stock_relationship_id) 
	REFERENCES chado.stock_relationship (stock_relationship_id);



ALTER TABLE chado.stock_synonym
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);

ALTER TABLE chado.stock_synonym
	ADD FOREIGN KEY (stock_id) 
	REFERENCES chado.stock (stock_id);

ALTER TABLE chado.stock_synonym
	ADD FOREIGN KEY (synonym_id) 
	REFERENCES chado.synonym (synonym_id);



ALTER TABLE chado.stockcollection
	ADD FOREIGN KEY (contact_id) 
	REFERENCES chado.contact (contact_id);

ALTER TABLE chado.stockcollection
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado.stockcollection_stock
	ADD FOREIGN KEY (stock_id) 
	REFERENCES chado.stock (stock_id);

ALTER TABLE chado.stockcollection_stock
	ADD FOREIGN KEY (stockcollection_id) 
	REFERENCES chado.stockcollection (stockcollection_id);



ALTER TABLE chado.stockcollectionprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.stockcollectionprop
	ADD FOREIGN KEY (stockcollection_id) 
	REFERENCES chado.stockcollection (stockcollection_id);



ALTER TABLE chado.stockprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.stockprop
	ADD FOREIGN KEY (stock_id) 
	REFERENCES chado.stock (stock_id);



ALTER TABLE chado.stockprop_pub
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);

ALTER TABLE chado.stockprop_pub
	ADD FOREIGN KEY (stockprop_id) 
	REFERENCES chado.stockprop (stockprop_id);



ALTER TABLE chado.study
	ADD FOREIGN KEY (contact_id) 
	REFERENCES chado.contact (contact_id);

ALTER TABLE chado.study
	ADD FOREIGN KEY (dbxref_id) 
	REFERENCES chado.dbxref (dbxref_id);

ALTER TABLE chado.study
	ADD FOREIGN KEY (pub_id) 
	REFERENCES chado.pub (pub_id);



ALTER TABLE chado.study_assay
	ADD FOREIGN KEY (assay_id) 
	REFERENCES chado.assay (assay_id);

ALTER TABLE chado.study_assay
	ADD FOREIGN KEY (study_id) 
	REFERENCES chado.study (study_id);



ALTER TABLE chado.studydesign
	ADD FOREIGN KEY (study_id) 
	REFERENCES chado.study (study_id);



ALTER TABLE chado.studydesignprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.studydesignprop
	ADD FOREIGN KEY (studydesign_id) 
	REFERENCES chado.studydesign (studydesign_id);



ALTER TABLE chado.studyfactor
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.studyfactor
	ADD FOREIGN KEY (studydesign_id) 
	REFERENCES chado.studydesign (studydesign_id);



ALTER TABLE chado.studyfactorvalue
	ADD FOREIGN KEY (assay_id) 
	REFERENCES chado.assay (assay_id);

ALTER TABLE chado.studyfactorvalue
	ADD FOREIGN KEY (studyfactor_id) 
	REFERENCES chado.studyfactor (studyfactor_id);



ALTER TABLE chado.studyprop
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.studyprop
	ADD FOREIGN KEY (study_id) 
	REFERENCES chado.study (study_id);



ALTER TABLE chado.studyprop_feature
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.studyprop_feature
	ADD FOREIGN KEY (feature_id) 
	REFERENCES chado.feature (feature_id);

ALTER TABLE chado.studyprop_feature
	ADD FOREIGN KEY (studyprop_id) 
	REFERENCES chado.studyprop (studyprop_id);



ALTER TABLE chado.synonym
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);



ALTER TABLE chado.treatment
	ADD FOREIGN KEY (biomaterial_id) 
	REFERENCES chado.biomaterial (biomaterial_id);

ALTER TABLE chado.treatment
	ADD FOREIGN KEY (type_id) 
	REFERENCES chado.cvterm (cvterm_id);

ALTER TABLE chado.treatment
	ADD FOREIGN KEY (protocol_id) 
	REFERENCES chado.protocol (protocol_id);



CREATE VIEW chado.all_feature_names (feature_id,"name",organism_id) AS  SELECT feature.feature_id,
    ("substring"(feature.uniquename, 0, 255))::character varying(255) AS name,
    feature.organism_id
   FROM feature
UNION
 SELECT feature.feature_id,
    feature.name,
    feature.organism_id
   FROM feature
  WHERE (feature.name IS NOT NULL)
UNION
 SELECT fs.feature_id,
    s.name,
    f.organism_id
   FROM feature_synonym fs,
    synonym s,
    feature f
  WHERE ((fs.synonym_id = s.synonym_id) AND (fs.feature_id = f.feature_id))
UNION
 SELECT fp.feature_id,
    ("substring"(fp.value, 0, 255))::character varying(255) AS name,
    f.organism_id
   FROM featureprop fp,
    feature f
  WHERE (f.feature_id = fp.feature_id)
UNION
 SELECT fd.feature_id,
    d.accession AS name,
    f.organism_id
   FROM feature_dbxref fd,
    dbxref d,
    feature f
  WHERE ((fd.dbxref_id = d.dbxref_id) AND (fd.feature_id = f.feature_id));

CREATE VIEW chado.common_ancestor_cvterm (cvterm1_id,cvterm2_id,ancestor_cvterm_id,pathdistance1,pathdistance2,total_pathdistance) AS  SELECT p1.subject_id AS cvterm1_id,
    p2.subject_id AS cvterm2_id,
    p1.object_id AS ancestor_cvterm_id,
    p1.pathdistance AS pathdistance1,
    p2.pathdistance AS pathdistance2,
    (p1.pathdistance + p2.pathdistance) AS total_pathdistance
   FROM cvtermpath p1,
    cvtermpath p2
  WHERE (p1.object_id = p2.object_id);

CREATE VIEW chado.common_descendant_cvterm (cvterm1_id,cvterm2_id,ancestor_cvterm_id,pathdistance1,pathdistance2,total_pathdistance) AS  SELECT p1.object_id AS cvterm1_id,
    p2.object_id AS cvterm2_id,
    p1.subject_id AS ancestor_cvterm_id,
    p1.pathdistance AS pathdistance1,
    p2.pathdistance AS pathdistance2,
    (p1.pathdistance + p2.pathdistance) AS total_pathdistance
   FROM cvtermpath p1,
    cvtermpath p2
  WHERE (p1.subject_id = p2.subject_id);

CREATE VIEW chado.cv_cvterm_count ("name",num_terms_excl_obs) AS  SELECT cv.name,
    count(*) AS num_terms_excl_obs
   FROM (cv
     JOIN cvterm USING (cv_id))
  WHERE (cvterm.is_obsolete = 0)
  GROUP BY cv.name;

CREATE VIEW chado.cv_cvterm_count_with_obs ("name",num_terms_incl_obs) AS  SELECT cv.name,
    count(*) AS num_terms_incl_obs
   FROM (cv
     JOIN cvterm USING (cv_id))
  GROUP BY cv.name;

CREATE VIEW chado.cv_leaf (cv_id,cvterm_id) AS  SELECT cvterm.cv_id,
    cvterm.cvterm_id
   FROM cvterm
  WHERE (NOT (cvterm.cvterm_id IN ( SELECT cvterm_relationship.object_id
           FROM cvterm_relationship)));

CREATE VIEW chado.cv_link_count (cv_name,relation_name,relation_cv_name,num_links) AS  SELECT cv.name AS cv_name,
    relation.name AS relation_name,
    relation_cv.name AS relation_cv_name,
    count(*) AS num_links
   FROM ((((cv
     JOIN cvterm ON ((cvterm.cv_id = cv.cv_id)))
     JOIN cvterm_relationship ON ((cvterm.cvterm_id = cvterm_relationship.subject_id)))
     JOIN cvterm relation ON ((cvterm_relationship.type_id = relation.cvterm_id)))
     JOIN cv relation_cv ON ((relation.cv_id = relation_cv.cv_id)))
  GROUP BY cv.name, relation.name, relation_cv.name;

CREATE VIEW chado.cv_path_count (cv_name,relation_name,relation_cv_name,num_paths) AS  SELECT cv.name AS cv_name,
    relation.name AS relation_name,
    relation_cv.name AS relation_cv_name,
    count(*) AS num_paths
   FROM ((((cv
     JOIN cvterm ON ((cvterm.cv_id = cv.cv_id)))
     JOIN cvtermpath ON ((cvterm.cvterm_id = cvtermpath.subject_id)))
     JOIN cvterm relation ON ((cvtermpath.type_id = relation.cvterm_id)))
     JOIN cv relation_cv ON ((relation.cv_id = relation_cv.cv_id)))
  GROUP BY cv.name, relation.name, relation_cv.name;

CREATE VIEW chado.cv_root (cv_id,root_cvterm_id) AS  SELECT cvterm.cv_id,
    cvterm.cvterm_id AS root_cvterm_id
   FROM cvterm
  WHERE ((NOT (cvterm.cvterm_id IN ( SELECT cvterm_relationship.subject_id
           FROM cvterm_relationship))) AND (cvterm.is_obsolete = 0));

CREATE VIEW chado.db_dbxref_count ("name",num_dbxrefs) AS  SELECT db.name,
    count(*) AS num_dbxrefs
   FROM (db
     JOIN dbxref USING (db_id))
  GROUP BY db.name;

CREATE VIEW chado.dfeatureloc (featureloc_id,feature_id,srcfeature_id,nbeg,is_nbeg_partial,nend,is_nend_partial,strand,phase,residue_info,locgroup,"rank") AS  SELECT featureloc.featureloc_id,
    featureloc.feature_id,
    featureloc.srcfeature_id,
    featureloc.fmin AS nbeg,
    featureloc.is_fmin_partial AS is_nbeg_partial,
    featureloc.fmax AS nend,
    featureloc.is_fmax_partial AS is_nend_partial,
    featureloc.strand,
    featureloc.phase,
    featureloc.residue_info,
    featureloc.locgroup,
    featureloc.rank
   FROM featureloc
  WHERE ((featureloc.strand < 0) OR (featureloc.phase < 0))
UNION
 SELECT featureloc.featureloc_id,
    featureloc.feature_id,
    featureloc.srcfeature_id,
    featureloc.fmax AS nbeg,
    featureloc.is_fmax_partial AS is_nbeg_partial,
    featureloc.fmin AS nend,
    featureloc.is_fmin_partial AS is_nend_partial,
    featureloc.strand,
    featureloc.phase,
    featureloc.residue_info,
    featureloc.locgroup,
    featureloc.rank
   FROM featureloc
  WHERE (((featureloc.strand IS NULL) OR (featureloc.strand >= 0)) OR (featureloc.phase >= 0));

CREATE VIEW chado.f_loc (feature_id,"name",dbxref_id,nbeg,nend,strand) AS  SELECT f.feature_id,
    f.name,
    f.dbxref_id,
    fl.nbeg,
    fl.nend,
    fl.strand
   FROM dfeatureloc fl,
    f_type f
  WHERE (f.feature_id = fl.feature_id);

CREATE VIEW chado.f_type (feature_id,"name",dbxref_id,"type",residues,seqlen,md5checksum,type_id,timeaccessioned,timelastmodified) AS  SELECT f.feature_id,
    f.name,
    f.dbxref_id,
    c.name AS type,
    f.residues,
    f.seqlen,
    f.md5checksum,
    f.type_id,
    f.timeaccessioned,
    f.timelastmodified
   FROM feature f,
    cvterm c
  WHERE (f.type_id = c.cvterm_id);

CREATE VIEW chado.feature_contains (subject_id,object_id) AS  SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id
   FROM featureloc x,
    featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((y.fmin >= x.fmin) AND (y.fmin <= x.fmax)));

CREATE VIEW chado.feature_difference (subject_id,object_id,srcfeature_id,fmin,fmax,strand) AS  SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id,
    x.strand AS srcfeature_id,
    x.srcfeature_id AS fmin,
    x.fmin AS fmax,
    y.fmin AS strand
   FROM featureloc x,
    featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmin < y.fmin) AND (x.fmax >= y.fmax)))
UNION
 SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id,
    x.strand AS srcfeature_id,
    x.srcfeature_id AS fmin,
    y.fmax,
    x.fmax AS strand
   FROM featureloc x,
    featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax > y.fmax) AND (x.fmin <= y.fmin)));

CREATE VIEW chado.feature_disjoint (subject_id,object_id) AS  SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id
   FROM featureloc x,
    featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax < y.fmin) AND (x.fmin > y.fmax)));

CREATE VIEW chado.feature_distance (subject_id,object_id,srcfeature_id,subject_strand,object_strand,distance) AS  SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id,
    x.srcfeature_id,
    x.strand AS subject_strand,
    y.strand AS object_strand,
        CASE
            WHEN (x.fmax <= y.fmin) THEN (x.fmax - y.fmin)
            ELSE (y.fmax - x.fmin)
        END AS distance
   FROM featureloc x,
    featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax <= y.fmin) OR (x.fmin >= y.fmax)));

CREATE VIEW chado.feature_intersection (subject_id,object_id,srcfeature_id,subject_strand,object_strand,fmin,fmax) AS  SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id,
    x.srcfeature_id,
    x.strand AS subject_strand,
    y.strand AS object_strand,
        CASE
            WHEN (x.fmin < y.fmin) THEN y.fmin
            ELSE x.fmin
        END AS fmin,
        CASE
            WHEN (x.fmax > y.fmax) THEN y.fmax
            ELSE x.fmax
        END AS fmax
   FROM featureloc x,
    featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax >= y.fmin) AND (x.fmin <= y.fmax)));

CREATE VIEW chado.feature_meets (subject_id,object_id) AS  SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id
   FROM featureloc x,
    featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax >= y.fmin) AND (x.fmin <= y.fmax)));

CREATE VIEW chado.feature_meets_on_same_strand (subject_id,object_id) AS  SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id
   FROM featureloc x,
    featureloc y
  WHERE (((x.srcfeature_id = y.srcfeature_id) AND (x.strand = y.strand)) AND ((x.fmax >= y.fmin) AND (x.fmin <= y.fmax)));

CREATE VIEW chado.feature_union (subject_id,object_id,srcfeature_id,subject_strand,object_strand,fmin,fmax) AS  SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id,
    x.srcfeature_id,
    x.strand AS subject_strand,
    y.strand AS object_strand,
        CASE
            WHEN (x.fmin < y.fmin) THEN x.fmin
            ELSE y.fmin
        END AS fmin,
        CASE
            WHEN (x.fmax > y.fmax) THEN x.fmax
            ELSE y.fmax
        END AS fmax
   FROM featureloc x,
    featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax >= y.fmin) AND (x.fmin <= y.fmax)));

CREATE VIEW chado.featureset_meets (subject_id,object_id) AS  SELECT x.object_id AS subject_id,
    y.object_id
   FROM ((feature_meets r
     JOIN feature_relationship x ON ((r.subject_id = x.subject_id)))
     JOIN feature_relationship y ON ((r.object_id = y.subject_id)));

CREATE VIEW chado.fnr_type (feature_id,"name",dbxref_id,"type",residues,seqlen,md5checksum,type_id,timeaccessioned,timelastmodified) AS  SELECT f.feature_id,
    f.name,
    f.dbxref_id,
    c.name AS type,
    f.residues,
    f.seqlen,
    f.md5checksum,
    f.type_id,
    f.timeaccessioned,
    f.timelastmodified
   FROM (feature f
     LEFT JOIN analysisfeature af ON ((f.feature_id = af.feature_id))),
    cvterm c
  WHERE ((f.type_id = c.cvterm_id) AND (af.feature_id IS NULL));

CREATE VIEW chado.fp_key (feature_id,pkey,"value") AS  SELECT fp.feature_id,
    c.name AS pkey,
    fp.value
   FROM featureprop fp,
    cvterm c
  WHERE (fp.featureprop_id = c.cvterm_id);

CREATE VIEW chado.gff3atts (feature_id,"type","attribute") AS  SELECT fs.feature_id,
    'Ontology_term'::text AS type,
        CASE
            WHEN ((db.name)::text ~~ '%Gene Ontology%'::text) THEN (('GO:'::text || (dbx.accession)::text))::character varying
            WHEN ((db.name)::text ~~ 'Sequence Ontology%'::text) THEN (('SO:'::text || (dbx.accession)::text))::character varying
            ELSE ((((db.name)::text || ':'::text) || (dbx.accession)::text))::character varying
        END AS attribute
   FROM cvterm s,
    dbxref dbx,
    feature_cvterm fs,
    db
  WHERE (((fs.cvterm_id = s.cvterm_id) AND (s.dbxref_id = dbx.dbxref_id)) AND (db.db_id = dbx.db_id))
UNION ALL
 SELECT fs.feature_id,
    'Dbxref'::text AS type,
    (((d.name)::text || ':'::text) || (s.accession)::text) AS attribute
   FROM dbxref s,
    feature_dbxref fs,
    db d
  WHERE (((fs.dbxref_id = s.dbxref_id) AND (s.db_id = d.db_id)) AND ((d.name)::text <> 'GFF_source'::text))
UNION ALL
 SELECT f.feature_id,
    'Alias'::text AS type,
    s.name AS attribute
   FROM synonym s,
    feature_synonym fs,
    feature f
  WHERE ((((fs.synonym_id = s.synonym_id) AND (f.feature_id = fs.feature_id)) AND ((f.name)::text <> (s.name)::text)) AND (f.uniquename <> (s.name)::text))
UNION ALL
 SELECT fp.feature_id,
    cv.name AS type,
    fp.value AS attribute
   FROM featureprop fp,
    cvterm cv
  WHERE (fp.type_id = cv.cvterm_id)
UNION ALL
 SELECT fs.feature_id,
    'pub'::text AS type,
    (((s.series_name)::text || ':'::text) || s.title) AS attribute
   FROM pub s,
    feature_pub fs
  WHERE (fs.pub_id = s.pub_id)
UNION ALL
 SELECT fr.subject_id AS feature_id,
    'Parent'::text AS type,
    parent.uniquename AS attribute
   FROM feature_relationship fr,
    feature parent
  WHERE ((fr.object_id = parent.feature_id) AND (fr.type_id = ( SELECT cvterm.cvterm_id
           FROM cvterm
          WHERE (((cvterm.name)::text = 'part_of'::text) AND (cvterm.cv_id IN ( SELECT cv.cv_id
                   FROM cv
                  WHERE ((cv.name)::text = 'relationship'::text)))))))
UNION ALL
 SELECT fr.subject_id AS feature_id,
    'Derives_from'::text AS type,
    parent.uniquename AS attribute
   FROM feature_relationship fr,
    feature parent
  WHERE ((fr.object_id = parent.feature_id) AND (fr.type_id = ( SELECT cvterm.cvterm_id
           FROM cvterm
          WHERE (((cvterm.name)::text = 'derives_from'::text) AND (cvterm.cv_id IN ( SELECT cv.cv_id
                   FROM cv
                  WHERE ((cv.name)::text = 'relationship'::text)))))))
UNION ALL
 SELECT fl.feature_id,
    'Target'::text AS type,
    (((((((target.name)::text || ' '::text) || (fl.fmin + 1)) || ' '::text) || fl.fmax) || ' '::text) || fl.strand) AS attribute
   FROM featureloc fl,
    feature target
  WHERE ((fl.srcfeature_id = target.feature_id) AND (fl.rank <> 0))
UNION ALL
 SELECT feature.feature_id,
    'ID'::text AS type,
    feature.uniquename AS attribute
   FROM feature
  WHERE (NOT (feature.type_id IN ( SELECT cvterm.cvterm_id
           FROM cvterm
          WHERE ((cvterm.name)::text = 'CDS'::text))))
UNION ALL
 SELECT feature.feature_id,
    'chado_feature_id'::text AS type,
    (feature.feature_id)::character varying AS attribute
   FROM feature
UNION ALL
 SELECT feature.feature_id,
    'Name'::text AS type,
    feature.name AS attribute
   FROM feature;

CREATE VIEW chado.gff3view (feature_id,"ref","source","type",fstart,fend,score,strand,phase,seqlen,"name",organism_id) AS  SELECT f.feature_id,
    sf.name AS ref,
    COALESCE(gffdbx.accession, '.'::character varying(255)) AS source,
    cv.name AS type,
    (fl.fmin + 1) AS fstart,
    fl.fmax AS fend,
    COALESCE((af.significance)::text, '.'::text) AS score,
        CASE
            WHEN (fl.strand = (-1)) THEN '-'::text
            WHEN (fl.strand = 1) THEN '+'::text
            ELSE '.'::text
        END AS strand,
    COALESCE((fl.phase)::text, '.'::text) AS phase,
    f.seqlen,
    f.name,
    f.organism_id
   FROM (((((feature f
     LEFT JOIN featureloc fl ON ((f.feature_id = fl.feature_id)))
     LEFT JOIN feature sf ON ((fl.srcfeature_id = sf.feature_id)))
     LEFT JOIN ( SELECT fd.feature_id,
            d.accession
           FROM ((feature_dbxref fd
             JOIN dbxref d USING (dbxref_id))
             JOIN db USING (db_id))
          WHERE ((db.name)::text = 'GFF_source'::text)) gffdbx ON ((f.feature_id = gffdbx.feature_id)))
     LEFT JOIN cvterm cv ON ((f.type_id = cv.cvterm_id)))
     LEFT JOIN analysisfeature af ON ((f.feature_id = af.feature_id)));

CREATE VIEW chado.gffatts (feature_id,"type","attribute") AS  SELECT fs.feature_id,
    'Ontology_term'::text AS type,
    s.name AS attribute
   FROM cvterm s,
    feature_cvterm fs
  WHERE (fs.cvterm_id = s.cvterm_id)
UNION ALL
 SELECT fs.feature_id,
    'Dbxref'::text AS type,
    (((d.name)::text || ':'::text) || (s.accession)::text) AS attribute
   FROM dbxref s,
    feature_dbxref fs,
    db d
  WHERE ((fs.dbxref_id = s.dbxref_id) AND (s.db_id = d.db_id))
UNION ALL
 SELECT fs.feature_id,
    'Alias'::text AS type,
    s.name AS attribute
   FROM synonym s,
    feature_synonym fs
  WHERE (fs.synonym_id = s.synonym_id)
UNION ALL
 SELECT fp.feature_id,
    cv.name AS type,
    fp.value AS attribute
   FROM featureprop fp,
    cvterm cv
  WHERE (fp.type_id = cv.cvterm_id)
UNION ALL
 SELECT fs.feature_id,
    'pub'::text AS type,
    (((s.series_name)::text || ':'::text) || s.title) AS attribute
   FROM pub s,
    feature_pub fs
  WHERE (fs.pub_id = s.pub_id);

CREATE VIEW chado.intron_combined_view (exon1_id,exon2_id,fmin,fmax,strand,srcfeature_id,intron_rank,transcript_id) AS  SELECT x1.feature_id AS exon1_id,
    x2.feature_id AS exon2_id,
        CASE
            WHEN (l1.strand = (-1)) THEN l2.fmax
            ELSE l1.fmax
        END AS fmin,
        CASE
            WHEN (l1.strand = (-1)) THEN l1.fmin
            ELSE l2.fmin
        END AS fmax,
    l1.strand,
    l1.srcfeature_id,
    r1.rank AS intron_rank,
    r1.object_id AS transcript_id
   FROM ((((((cvterm
     JOIN feature x1 ON ((x1.type_id = cvterm.cvterm_id)))
     JOIN feature_relationship r1 ON ((x1.feature_id = r1.subject_id)))
     JOIN featureloc l1 ON ((x1.feature_id = l1.feature_id)))
     JOIN feature x2 ON ((x2.type_id = cvterm.cvterm_id)))
     JOIN feature_relationship r2 ON ((x2.feature_id = r2.subject_id)))
     JOIN featureloc l2 ON ((x2.feature_id = l2.feature_id)))
  WHERE ((((((((cvterm.name)::text = 'exon'::text) AND ((r2.rank - r1.rank) = 1)) AND (r1.object_id = r2.object_id)) AND (l1.strand = l2.strand)) AND (l1.srcfeature_id = l2.srcfeature_id)) AND (l1.locgroup = 0)) AND (l2.locgroup = 0));

CREATE VIEW chado.intronloc_view (exon1_id,exon2_id,fmin,fmax,strand,srcfeature_id) AS  SELECT DISTINCT intron_combined_view.exon1_id,
    intron_combined_view.exon2_id,
    intron_combined_view.fmin,
    intron_combined_view.fmax,
    intron_combined_view.strand,
    intron_combined_view.srcfeature_id
   FROM intron_combined_view;

CREATE VIEW chado.protein_coding_gene (feature_id,dbxref_id,organism_id,"name",uniquename,residues,seqlen,md5checksum,type_id,is_analysis,is_obsolete,timeaccessioned,timelastmodified) AS  SELECT DISTINCT gene.feature_id,
    gene.dbxref_id,
    gene.organism_id,
    gene.name,
    gene.uniquename,
    gene.residues,
    gene.seqlen,
    gene.md5checksum,
    gene.type_id,
    gene.is_analysis,
    gene.is_obsolete,
    gene.timeaccessioned,
    gene.timelastmodified
   FROM ((feature gene
     JOIN feature_relationship fr ON ((gene.feature_id = fr.object_id)))
     JOIN so.mrna ON ((mrna.feature_id = fr.subject_id)));

CREATE VIEW chado.stats_paths_to_root (cvterm_id,total_paths,avg_distance,min_distance,max_distance) AS  SELECT cvtermpath.subject_id AS cvterm_id,
    count(DISTINCT cvtermpath.cvtermpath_id) AS total_paths,
    avg(cvtermpath.pathdistance) AS avg_distance,
    min(cvtermpath.pathdistance) AS min_distance,
    max(cvtermpath.pathdistance) AS max_distance
   FROM (cvtermpath
     JOIN cv_root ON ((cvtermpath.object_id = cv_root.root_cvterm_id)))
  GROUP BY cvtermpath.subject_id;

CREATE VIEW chado.type_feature_count ("type",num_features) AS  SELECT t.name AS type,
    count(*) AS num_features
   FROM (cvterm t
     JOIN feature ON ((feature.type_id = t.cvterm_id)))
  GROUP BY t.name;

CREATE UNIQUE INDEX acquisition_c1 ON acquisition USING btree (name)

CREATE INDEX acquisition_idx1 ON acquisition USING btree (assay_id)

CREATE INDEX acquisition_idx2 ON acquisition USING btree (protocol_id)

CREATE INDEX acquisition_idx3 ON acquisition USING btree (channel_id)

CREATE UNIQUE INDEX acquisition_pkey ON acquisition USING btree (acquisition_id)

CREATE UNIQUE INDEX acquisition_relationship_c1 ON acquisition_relationship USING btree (subject_id, object_id, type_id, rank)

CREATE INDEX acquisition_relationship_idx1 ON acquisition_relationship USING btree (subject_id)

CREATE INDEX acquisition_relationship_idx2 ON acquisition_relationship USING btree (type_id)

CREATE INDEX acquisition_relationship_idx3 ON acquisition_relationship USING btree (object_id)

CREATE UNIQUE INDEX acquisition_relationship_pkey ON acquisition_relationship USING btree (acquisition_relationship_id)

CREATE UNIQUE INDEX acquisitionprop_c1 ON acquisitionprop USING btree (acquisition_id, type_id, rank)

CREATE INDEX acquisitionprop_idx1 ON acquisitionprop USING btree (acquisition_id)

CREATE INDEX acquisitionprop_idx2 ON acquisitionprop USING btree (type_id)

CREATE UNIQUE INDEX acquisitionprop_pkey ON acquisitionprop USING btree (acquisitionprop_id)

CREATE UNIQUE INDEX analysis_c1 ON analysis USING btree (program, programversion, sourcename)

CREATE INDEX analysis_organism_networkmod_qtl_indx0_idx ON analysis_organism USING btree (analysis_id)

CREATE INDEX analysis_organism_networkmod_qtl_indx1_idx ON analysis_organism USING btree (organism_id)

CREATE UNIQUE INDEX analysis_pkey ON analysis USING btree (analysis_id)

CREATE UNIQUE INDEX analysisfeature_c1 ON analysisfeature USING btree (feature_id, analysis_id)

CREATE UNIQUE INDEX analysisfeature_id_type_id_rank ON analysisfeatureprop USING btree (analysisfeature_id, type_id, rank)

CREATE INDEX analysisfeature_idx1 ON analysisfeature USING btree (feature_id)

CREATE INDEX analysisfeature_idx2 ON analysisfeature USING btree (analysis_id)

CREATE UNIQUE INDEX analysisfeature_pkey ON analysisfeature USING btree (analysisfeature_id)

CREATE UNIQUE INDEX analysisfeatureprop_pkey ON analysisfeatureprop USING btree (analysisfeatureprop_id)

CREATE UNIQUE INDEX analysisprop_c1 ON analysisprop USING btree (analysis_id, type_id, rank)

CREATE INDEX analysisprop_idx1 ON analysisprop USING btree (analysis_id)

CREATE INDEX analysisprop_idx2 ON analysisprop USING btree (type_id)

CREATE UNIQUE INDEX analysisprop_pkey ON analysisprop USING btree (analysisprop_id)

CREATE UNIQUE INDEX arraydesign_c1 ON arraydesign USING btree (name)

CREATE INDEX arraydesign_idx1 ON arraydesign USING btree (manufacturer_id)

CREATE INDEX arraydesign_idx2 ON arraydesign USING btree (platformtype_id)

CREATE INDEX arraydesign_idx3 ON arraydesign USING btree (substratetype_id)

CREATE INDEX arraydesign_idx4 ON arraydesign USING btree (protocol_id)

CREATE INDEX arraydesign_idx5 ON arraydesign USING btree (dbxref_id)

CREATE UNIQUE INDEX arraydesign_pkey ON arraydesign USING btree (arraydesign_id)

CREATE UNIQUE INDEX arraydesignprop_c1 ON arraydesignprop USING btree (arraydesign_id, type_id, rank)

CREATE INDEX arraydesignprop_idx1 ON arraydesignprop USING btree (arraydesign_id)

CREATE INDEX arraydesignprop_idx2 ON arraydesignprop USING btree (type_id)

CREATE UNIQUE INDEX arraydesignprop_pkey ON arraydesignprop USING btree (arraydesignprop_id)

CREATE UNIQUE INDEX assay_biomaterial_c1 ON assay_biomaterial USING btree (assay_id, biomaterial_id, channel_id, rank)

CREATE INDEX assay_biomaterial_idx1 ON assay_biomaterial USING btree (assay_id)

CREATE INDEX assay_biomaterial_idx2 ON assay_biomaterial USING btree (biomaterial_id)

CREATE INDEX assay_biomaterial_idx3 ON assay_biomaterial USING btree (channel_id)

CREATE UNIQUE INDEX assay_biomaterial_pkey ON assay_biomaterial USING btree (assay_biomaterial_id)

CREATE UNIQUE INDEX assay_c1 ON assay USING btree (name)

CREATE INDEX assay_idx1 ON assay USING btree (arraydesign_id)

CREATE INDEX assay_idx2 ON assay USING btree (protocol_id)

CREATE INDEX assay_idx3 ON assay USING btree (operator_id)

CREATE INDEX assay_idx4 ON assay USING btree (dbxref_id)

CREATE UNIQUE INDEX assay_pkey ON assay USING btree (assay_id)

CREATE UNIQUE INDEX assay_project_c1 ON assay_project USING btree (assay_id, project_id)

CREATE INDEX assay_project_idx1 ON assay_project USING btree (assay_id)

CREATE INDEX assay_project_idx2 ON assay_project USING btree (project_id)

CREATE UNIQUE INDEX assay_project_pkey ON assay_project USING btree (assay_project_id)

CREATE UNIQUE INDEX assayprop_c1 ON assayprop USING btree (assay_id, type_id, rank)

CREATE INDEX assayprop_idx1 ON assayprop USING btree (assay_id)

CREATE INDEX assayprop_idx2 ON assayprop USING btree (type_id)

CREATE UNIQUE INDEX assayprop_pkey ON assayprop USING btree (assayprop_id)

CREATE INDEX binloc_boxrange ON featureloc USING gist (boxrange(fmin, fmax))

CREATE INDEX binloc_boxrange_src ON featureloc USING gist (boxrange(srcfeature_id, fmin, fmax))

CREATE UNIQUE INDEX biomaterial_c1 ON biomaterial USING btree (name)

CREATE UNIQUE INDEX biomaterial_dbxref_c1 ON biomaterial_dbxref USING btree (biomaterial_id, dbxref_id)

CREATE INDEX biomaterial_dbxref_idx1 ON biomaterial_dbxref USING btree (biomaterial_id)

CREATE INDEX biomaterial_dbxref_idx2 ON biomaterial_dbxref USING btree (dbxref_id)

CREATE UNIQUE INDEX biomaterial_dbxref_pkey ON biomaterial_dbxref USING btree (biomaterial_dbxref_id)

CREATE INDEX biomaterial_idx1 ON biomaterial USING btree (taxon_id)

CREATE INDEX biomaterial_idx2 ON biomaterial USING btree (biosourceprovider_id)

CREATE INDEX biomaterial_idx3 ON biomaterial USING btree (dbxref_id)

CREATE UNIQUE INDEX biomaterial_pkey ON biomaterial USING btree (biomaterial_id)

CREATE UNIQUE INDEX biomaterial_relationship_c1 ON biomaterial_relationship USING btree (subject_id, object_id, type_id)

CREATE INDEX biomaterial_relationship_idx1 ON biomaterial_relationship USING btree (subject_id)

CREATE INDEX biomaterial_relationship_idx2 ON biomaterial_relationship USING btree (object_id)

CREATE INDEX biomaterial_relationship_idx3 ON biomaterial_relationship USING btree (type_id)

CREATE UNIQUE INDEX biomaterial_relationship_pkey ON biomaterial_relationship USING btree (biomaterial_relationship_id)

CREATE UNIQUE INDEX biomaterial_treatment_c1 ON biomaterial_treatment USING btree (biomaterial_id, treatment_id)

CREATE INDEX biomaterial_treatment_idx1 ON biomaterial_treatment USING btree (biomaterial_id)

CREATE INDEX biomaterial_treatment_idx2 ON biomaterial_treatment USING btree (treatment_id)

CREATE INDEX biomaterial_treatment_idx3 ON biomaterial_treatment USING btree (unittype_id)

CREATE UNIQUE INDEX biomaterial_treatment_pkey ON biomaterial_treatment USING btree (biomaterial_treatment_id)

CREATE UNIQUE INDEX biomaterialprop_c1 ON biomaterialprop USING btree (biomaterial_id, type_id, rank)

CREATE INDEX biomaterialprop_idx1 ON biomaterialprop USING btree (biomaterial_id)

CREATE INDEX biomaterialprop_idx2 ON biomaterialprop USING btree (type_id)

CREATE UNIQUE INDEX biomaterialprop_pkey ON biomaterialprop USING btree (biomaterialprop_id)

CREATE INDEX cache_libraries_expire_idx ON cache_libraries USING btree (expire)

CREATE UNIQUE INDEX cache_libraries_pkey ON cache_libraries USING btree (cid)

CREATE UNIQUE INDEX cell_line_c1 ON cell_line USING btree (uniquename, organism_id)

CREATE UNIQUE INDEX cell_line_cvterm_c1 ON cell_line_cvterm USING btree (cell_line_id, cvterm_id, pub_id, rank)

CREATE UNIQUE INDEX cell_line_cvterm_pkey ON cell_line_cvterm USING btree (cell_line_cvterm_id)

CREATE UNIQUE INDEX cell_line_cvtermprop_c1 ON cell_line_cvtermprop USING btree (cell_line_cvterm_id, type_id, rank)

CREATE UNIQUE INDEX cell_line_cvtermprop_pkey ON cell_line_cvtermprop USING btree (cell_line_cvtermprop_id)

CREATE UNIQUE INDEX cell_line_dbxref_c1 ON cell_line_dbxref USING btree (cell_line_id, dbxref_id)

CREATE UNIQUE INDEX cell_line_dbxref_pkey ON cell_line_dbxref USING btree (cell_line_dbxref_id)

CREATE UNIQUE INDEX cell_line_feature_c1 ON cell_line_feature USING btree (cell_line_id, feature_id, pub_id)

CREATE UNIQUE INDEX cell_line_feature_pkey ON cell_line_feature USING btree (cell_line_feature_id)

CREATE UNIQUE INDEX cell_line_library_c1 ON cell_line_library USING btree (cell_line_id, library_id, pub_id)

CREATE UNIQUE INDEX cell_line_library_pkey ON cell_line_library USING btree (cell_line_library_id)

CREATE UNIQUE INDEX cell_line_pkey ON cell_line USING btree (cell_line_id)

CREATE UNIQUE INDEX cell_line_pub_c1 ON cell_line_pub USING btree (cell_line_id, pub_id)

CREATE UNIQUE INDEX cell_line_pub_pkey ON cell_line_pub USING btree (cell_line_pub_id)

CREATE UNIQUE INDEX cell_line_relationship_c1 ON cell_line_relationship USING btree (subject_id, object_id, type_id)

CREATE UNIQUE INDEX cell_line_relationship_pkey ON cell_line_relationship USING btree (cell_line_relationship_id)

CREATE UNIQUE INDEX cell_line_synonym_c1 ON cell_line_synonym USING btree (synonym_id, cell_line_id, pub_id)

CREATE UNIQUE INDEX cell_line_synonym_pkey ON cell_line_synonym USING btree (cell_line_synonym_id)

CREATE UNIQUE INDEX cell_lineprop_c1 ON cell_lineprop USING btree (cell_line_id, type_id, rank)

CREATE UNIQUE INDEX cell_lineprop_pkey ON cell_lineprop USING btree (cell_lineprop_id)

CREATE UNIQUE INDEX cell_lineprop_pub_c1 ON cell_lineprop_pub USING btree (cell_lineprop_id, pub_id)

CREATE UNIQUE INDEX cell_lineprop_pub_pkey ON cell_lineprop_pub USING btree (cell_lineprop_pub_id)

CREATE UNIQUE INDEX chadoprop_c1 ON chadoprop USING btree (type_id, rank)

CREATE UNIQUE INDEX chadoprop_pkey ON chadoprop USING btree (chadoprop_id)

CREATE UNIQUE INDEX channel_c1 ON channel USING btree (name)

CREATE UNIQUE INDEX channel_pkey ON channel USING btree (channel_id)

CREATE UNIQUE INDEX contact_c1 ON contact USING btree (name)

CREATE UNIQUE INDEX contact_pkey ON contact USING btree (contact_id)

CREATE UNIQUE INDEX contact_relationship_c1 ON contact_relationship USING btree (subject_id, object_id, type_id)

CREATE INDEX contact_relationship_idx1 ON contact_relationship USING btree (type_id)

CREATE INDEX contact_relationship_idx2 ON contact_relationship USING btree (subject_id)

CREATE INDEX contact_relationship_idx3 ON contact_relationship USING btree (object_id)

CREATE UNIQUE INDEX contact_relationship_pkey ON contact_relationship USING btree (contact_relationship_id)

CREATE UNIQUE INDEX contactprop_contactprop_c1_key ON contactprop USING btree (contact_id, type_id, rank)

CREATE INDEX contactprop_contactprop_idx1_idx ON contactprop USING btree (contact_id)

CREATE INDEX contactprop_contactprop_idx2_idx ON contactprop USING btree (type_id)

CREATE UNIQUE INDEX contactprop_pkey ON contactprop USING btree (contactprop_id)

CREATE INDEX control_idx1 ON control USING btree (type_id)

CREATE INDEX control_idx2 ON control USING btree (assay_id)

CREATE INDEX control_idx3 ON control USING btree (tableinfo_id)

CREATE INDEX control_idx4 ON control USING btree (row_id)

CREATE UNIQUE INDEX control_pkey ON control USING btree (control_id)

CREATE UNIQUE INDEX cv_c1 ON cv USING btree (name)

CREATE UNIQUE INDEX cv_pkey ON cv USING btree (cv_id)

CREATE INDEX cv_root_mview_cv_root_mview_indx1_idx ON cv_root_mview USING btree (cvterm_id)

CREATE INDEX cv_root_mview_cv_root_mview_indx2_idx ON cv_root_mview USING btree (cv_id)

CREATE UNIQUE INDEX cvprop_c1 ON cvprop USING btree (cv_id, type_id, rank)

CREATE UNIQUE INDEX cvprop_pkey ON cvprop USING btree (cvprop_id)

CREATE UNIQUE INDEX cvterm_c1 ON cvterm USING btree (name, cv_id, is_obsolete)

CREATE UNIQUE INDEX cvterm_c2 ON cvterm USING btree (dbxref_id)

CREATE UNIQUE INDEX cvterm_dbxref_c1 ON cvterm_dbxref USING btree (cvterm_id, dbxref_id)

CREATE INDEX cvterm_dbxref_idx1 ON cvterm_dbxref USING btree (cvterm_id)

CREATE INDEX cvterm_dbxref_idx2 ON cvterm_dbxref USING btree (dbxref_id)

CREATE UNIQUE INDEX cvterm_dbxref_pkey ON cvterm_dbxref USING btree (cvterm_dbxref_id)

CREATE INDEX cvterm_idx1 ON cvterm USING btree (cv_id)

CREATE INDEX cvterm_idx2 ON cvterm USING btree (name)

CREATE INDEX cvterm_idx3 ON cvterm USING btree (dbxref_id)

CREATE UNIQUE INDEX cvterm_pkey ON cvterm USING btree (cvterm_id)

CREATE UNIQUE INDEX cvterm_relationship_c1 ON cvterm_relationship USING btree (subject_id, object_id, type_id)

CREATE INDEX cvterm_relationship_idx1 ON cvterm_relationship USING btree (type_id)

CREATE INDEX cvterm_relationship_idx2 ON cvterm_relationship USING btree (subject_id)

CREATE INDEX cvterm_relationship_idx3 ON cvterm_relationship USING btree (object_id)

CREATE UNIQUE INDEX cvterm_relationship_pkey ON cvterm_relationship USING btree (cvterm_relationship_id)

CREATE UNIQUE INDEX cvtermpath_c1 ON cvtermpath USING btree (subject_id, object_id, type_id, pathdistance)

CREATE INDEX cvtermpath_idx1 ON cvtermpath USING btree (type_id)

CREATE INDEX cvtermpath_idx2 ON cvtermpath USING btree (subject_id)

CREATE INDEX cvtermpath_idx3 ON cvtermpath USING btree (object_id)

CREATE INDEX cvtermpath_idx4 ON cvtermpath USING btree (cv_id)

CREATE UNIQUE INDEX cvtermpath_pkey ON cvtermpath USING btree (cvtermpath_id)

CREATE UNIQUE INDEX cvtermprop_cvterm_id_type_id_value_rank_key ON cvtermprop USING btree (cvterm_id, type_id, value, rank)

CREATE INDEX cvtermprop_idx1 ON cvtermprop USING btree (cvterm_id)

CREATE INDEX cvtermprop_idx2 ON cvtermprop USING btree (type_id)

CREATE UNIQUE INDEX cvtermprop_pkey ON cvtermprop USING btree (cvtermprop_id)

CREATE UNIQUE INDEX cvtermsynonym_c1 ON cvtermsynonym USING btree (cvterm_id, synonym)

CREATE INDEX cvtermsynonym_idx1 ON cvtermsynonym USING btree (cvterm_id)

CREATE UNIQUE INDEX cvtermsynonym_pkey ON cvtermsynonym USING btree (cvtermsynonym_id)

CREATE UNIQUE INDEX db_c1 ON db USING btree (name)

CREATE UNIQUE INDEX db_pkey ON db USING btree (db_id)

CREATE UNIQUE INDEX dbxref_c1 ON dbxref USING btree (db_id, accession, version)

CREATE INDEX dbxref_idx1 ON dbxref USING btree (db_id)

CREATE INDEX dbxref_idx2 ON dbxref USING btree (accession)

CREATE INDEX dbxref_idx3 ON dbxref USING btree (version)

CREATE UNIQUE INDEX dbxref_pkey ON dbxref USING btree (dbxref_id)

CREATE UNIQUE INDEX dbxrefprop_c1 ON dbxrefprop USING btree (dbxref_id, type_id, rank)

CREATE INDEX dbxrefprop_idx1 ON dbxrefprop USING btree (dbxref_id)

CREATE INDEX dbxrefprop_idx2 ON dbxrefprop USING btree (type_id)

CREATE UNIQUE INDEX dbxrefprop_pkey ON dbxrefprop USING btree (dbxrefprop_id)

CREATE UNIQUE INDEX eimage_pkey ON eimage USING btree (eimage_id)

CREATE UNIQUE INDEX element_c1 ON element USING btree (feature_id, arraydesign_id)

CREATE INDEX element_idx1 ON element USING btree (feature_id)

CREATE INDEX element_idx2 ON element USING btree (arraydesign_id)

CREATE INDEX element_idx3 ON element USING btree (type_id)

CREATE INDEX element_idx4 ON element USING btree (dbxref_id)

CREATE UNIQUE INDEX element_pkey ON element USING btree (element_id)

CREATE UNIQUE INDEX element_relationship_c1 ON element_relationship USING btree (subject_id, object_id, type_id, rank)

CREATE INDEX element_relationship_idx1 ON element_relationship USING btree (subject_id)

CREATE INDEX element_relationship_idx2 ON element_relationship USING btree (type_id)

CREATE INDEX element_relationship_idx3 ON element_relationship USING btree (object_id)

CREATE INDEX element_relationship_idx4 ON element_relationship USING btree (value)

CREATE UNIQUE INDEX element_relationship_pkey ON element_relationship USING btree (element_relationship_id)

CREATE UNIQUE INDEX elementresult_c1 ON elementresult USING btree (element_id, quantification_id)

CREATE INDEX elementresult_idx1 ON elementresult USING btree (element_id)

CREATE INDEX elementresult_idx2 ON elementresult USING btree (quantification_id)

CREATE INDEX elementresult_idx3 ON elementresult USING btree (signal)

CREATE UNIQUE INDEX elementresult_pkey ON elementresult USING btree (elementresult_id)

CREATE UNIQUE INDEX elementresult_relationship_c1 ON elementresult_relationship USING btree (subject_id, object_id, type_id, rank)

CREATE INDEX elementresult_relationship_idx1 ON elementresult_relationship USING btree (subject_id)

CREATE INDEX elementresult_relationship_idx2 ON elementresult_relationship USING btree (type_id)

CREATE INDEX elementresult_relationship_idx3 ON elementresult_relationship USING btree (object_id)

CREATE INDEX elementresult_relationship_idx4 ON elementresult_relationship USING btree (value)

CREATE UNIQUE INDEX elementresult_relationship_pkey ON elementresult_relationship USING btree (elementresult_relationship_id)

CREATE UNIQUE INDEX environment_c1 ON environment USING btree (uniquename)

CREATE UNIQUE INDEX environment_cvterm_c1 ON environment_cvterm USING btree (environment_id, cvterm_id)

CREATE INDEX environment_cvterm_idx1 ON environment_cvterm USING btree (environment_id)

CREATE INDEX environment_cvterm_idx2 ON environment_cvterm USING btree (cvterm_id)

CREATE UNIQUE INDEX environment_cvterm_pkey ON environment_cvterm USING btree (environment_cvterm_id)

CREATE INDEX environment_idx1 ON environment USING btree (uniquename)

CREATE UNIQUE INDEX environment_pkey ON environment USING btree (environment_id)

CREATE UNIQUE INDEX expression_c1 ON expression USING btree (uniquename)

CREATE UNIQUE INDEX expression_cvterm_c1 ON expression_cvterm USING btree (expression_id, cvterm_id, cvterm_type_id)

CREATE INDEX expression_cvterm_idx1 ON expression_cvterm USING btree (expression_id)

CREATE INDEX expression_cvterm_idx2 ON expression_cvterm USING btree (cvterm_id)

CREATE INDEX expression_cvterm_idx3 ON expression_cvterm USING btree (cvterm_type_id)

CREATE UNIQUE INDEX expression_cvterm_pkey ON expression_cvterm USING btree (expression_cvterm_id)

CREATE UNIQUE INDEX expression_cvtermprop_c1 ON expression_cvtermprop USING btree (expression_cvterm_id, type_id, rank)

CREATE INDEX expression_cvtermprop_idx1 ON expression_cvtermprop USING btree (expression_cvterm_id)

CREATE INDEX expression_cvtermprop_idx2 ON expression_cvtermprop USING btree (type_id)

CREATE UNIQUE INDEX expression_cvtermprop_pkey ON expression_cvtermprop USING btree (expression_cvtermprop_id)

CREATE UNIQUE INDEX expression_image_c1 ON expression_image USING btree (expression_id, eimage_id)

CREATE INDEX expression_image_idx1 ON expression_image USING btree (expression_id)

CREATE INDEX expression_image_idx2 ON expression_image USING btree (eimage_id)

CREATE UNIQUE INDEX expression_image_pkey ON expression_image USING btree (expression_image_id)

CREATE UNIQUE INDEX expression_pkey ON expression USING btree (expression_id)

CREATE UNIQUE INDEX expression_pub_c1 ON expression_pub USING btree (expression_id, pub_id)

CREATE INDEX expression_pub_idx1 ON expression_pub USING btree (expression_id)

CREATE INDEX expression_pub_idx2 ON expression_pub USING btree (pub_id)

CREATE UNIQUE INDEX expression_pub_pkey ON expression_pub USING btree (expression_pub_id)

CREATE UNIQUE INDEX expressionprop_c1 ON expressionprop USING btree (expression_id, type_id, rank)

CREATE INDEX expressionprop_idx1 ON expressionprop USING btree (expression_id)

CREATE INDEX expressionprop_idx2 ON expressionprop USING btree (type_id)

CREATE UNIQUE INDEX expressionprop_pkey ON expressionprop USING btree (expressionprop_id)

CREATE UNIQUE INDEX feature_c1 ON feature USING btree (organism_id, uniquename, type_id)

CREATE UNIQUE INDEX feature_cvterm_c1 ON feature_cvterm USING btree (feature_id, cvterm_id, pub_id, rank)

CREATE UNIQUE INDEX feature_cvterm_dbxref_c1 ON feature_cvterm_dbxref USING btree (feature_cvterm_id, dbxref_id)

CREATE INDEX feature_cvterm_dbxref_idx1 ON feature_cvterm_dbxref USING btree (feature_cvterm_id)

CREATE INDEX feature_cvterm_dbxref_idx2 ON feature_cvterm_dbxref USING btree (dbxref_id)

CREATE UNIQUE INDEX feature_cvterm_dbxref_pkey ON feature_cvterm_dbxref USING btree (feature_cvterm_dbxref_id)

CREATE INDEX feature_cvterm_idx1 ON feature_cvterm USING btree (feature_id)

CREATE INDEX feature_cvterm_idx2 ON feature_cvterm USING btree (cvterm_id)

CREATE INDEX feature_cvterm_idx3 ON feature_cvterm USING btree (pub_id)

CREATE UNIQUE INDEX feature_cvterm_pkey ON feature_cvterm USING btree (feature_cvterm_id)

CREATE UNIQUE INDEX feature_cvterm_pub_c1 ON feature_cvterm_pub USING btree (feature_cvterm_id, pub_id)

CREATE INDEX feature_cvterm_pub_idx1 ON feature_cvterm_pub USING btree (feature_cvterm_id)

CREATE INDEX feature_cvterm_pub_idx2 ON feature_cvterm_pub USING btree (pub_id)

CREATE UNIQUE INDEX feature_cvterm_pub_pkey ON feature_cvterm_pub USING btree (feature_cvterm_pub_id)

CREATE UNIQUE INDEX feature_cvtermprop_c1 ON feature_cvtermprop USING btree (feature_cvterm_id, type_id, rank)

CREATE INDEX feature_cvtermprop_idx1 ON feature_cvtermprop USING btree (feature_cvterm_id)

CREATE INDEX feature_cvtermprop_idx2 ON feature_cvtermprop USING btree (type_id)

CREATE UNIQUE INDEX feature_cvtermprop_pkey ON feature_cvtermprop USING btree (feature_cvtermprop_id)

CREATE UNIQUE INDEX feature_dbxref_c1 ON feature_dbxref USING btree (feature_id, dbxref_id)

CREATE INDEX feature_dbxref_idx1 ON feature_dbxref USING btree (feature_id)

CREATE INDEX feature_dbxref_idx2 ON feature_dbxref USING btree (dbxref_id)

CREATE UNIQUE INDEX feature_dbxref_pkey ON feature_dbxref USING btree (feature_dbxref_id)

CREATE UNIQUE INDEX feature_expression_c1 ON feature_expression USING btree (expression_id, feature_id, pub_id)

CREATE INDEX feature_expression_idx1 ON feature_expression USING btree (expression_id)

CREATE INDEX feature_expression_idx2 ON feature_expression USING btree (feature_id)

CREATE INDEX feature_expression_idx3 ON feature_expression USING btree (pub_id)

CREATE UNIQUE INDEX feature_expression_pkey ON feature_expression USING btree (feature_expression_id)

CREATE UNIQUE INDEX feature_expressionprop_c1 ON feature_expressionprop USING btree (feature_expression_id, type_id, rank)

CREATE INDEX feature_expressionprop_idx1 ON feature_expressionprop USING btree (feature_expression_id)

CREATE INDEX feature_expressionprop_idx2 ON feature_expressionprop USING btree (type_id)

CREATE UNIQUE INDEX feature_expressionprop_pkey ON feature_expressionprop USING btree (feature_expressionprop_id)

CREATE UNIQUE INDEX feature_genotype_c1 ON feature_genotype USING btree (feature_id, genotype_id, cvterm_id, chromosome_id, rank, cgroup)

CREATE UNIQUE INDEX feature_genotype_cvterm_pkey ON feature_genotype_cvterm USING btree (feature_genotype_cvterm_id)

CREATE INDEX feature_genotype_idx1 ON feature_genotype USING btree (feature_id)

CREATE INDEX feature_genotype_idx2 ON feature_genotype USING btree (genotype_id)

CREATE UNIQUE INDEX feature_genotype_pkey ON feature_genotype USING btree (feature_genotype_id)

CREATE UNIQUE INDEX feature_genotype_prop_pkey ON feature_genotype_prop USING btree (feature_genotype_prop_id)

CREATE INDEX feature_idx1 ON feature USING btree (dbxref_id)

CREATE INDEX feature_idx2 ON feature USING btree (organism_id)

CREATE INDEX feature_idx3 ON feature USING btree (type_id)

CREATE INDEX feature_idx4 ON feature USING btree (uniquename)

CREATE INDEX feature_idx5 ON feature USING btree (lower((name)::text))

CREATE INDEX feature_name_ind1 ON feature USING btree (name)

CREATE UNIQUE INDEX feature_phenotype_c1 ON feature_phenotype USING btree (feature_id, phenotype_id)

CREATE INDEX feature_phenotype_idx1 ON feature_phenotype USING btree (feature_id)

CREATE INDEX feature_phenotype_idx2 ON feature_phenotype USING btree (phenotype_id)

CREATE UNIQUE INDEX feature_phenotype_pkey ON feature_phenotype USING btree (feature_phenotype_id)

CREATE UNIQUE INDEX feature_pkey ON feature USING btree (feature_id)

CREATE UNIQUE INDEX feature_pub_c1 ON feature_pub USING btree (feature_id, pub_id)

CREATE INDEX feature_pub_idx1 ON feature_pub USING btree (feature_id)

CREATE INDEX feature_pub_idx2 ON feature_pub USING btree (pub_id)

CREATE UNIQUE INDEX feature_pub_pkey ON feature_pub USING btree (feature_pub_id)

CREATE UNIQUE INDEX feature_pubprop_c1 ON feature_pubprop USING btree (feature_pub_id, type_id, rank)

CREATE INDEX feature_pubprop_idx1 ON feature_pubprop USING btree (feature_pub_id)

CREATE UNIQUE INDEX feature_pubprop_pkey ON feature_pubprop USING btree (feature_pubprop_id)

CREATE UNIQUE INDEX feature_relationship_c1 ON feature_relationship USING btree (subject_id, object_id, type_id, rank)

CREATE INDEX feature_relationship_idx1 ON feature_relationship USING btree (subject_id)

CREATE INDEX feature_relationship_idx2 ON feature_relationship USING btree (object_id)

CREATE INDEX feature_relationship_idx3 ON feature_relationship USING btree (type_id)

CREATE UNIQUE INDEX feature_relationship_pkey ON feature_relationship USING btree (feature_relationship_id)

CREATE UNIQUE INDEX feature_relationship_pub_c1 ON feature_relationship_pub USING btree (feature_relationship_id, pub_id)

CREATE INDEX feature_relationship_pub_idx1 ON feature_relationship_pub USING btree (feature_relationship_id)

CREATE INDEX feature_relationship_pub_idx2 ON feature_relationship_pub USING btree (pub_id)

CREATE UNIQUE INDEX feature_relationship_pub_pkey ON feature_relationship_pub USING btree (feature_relationship_pub_id)

CREATE UNIQUE INDEX feature_relationshipprop_c1 ON feature_relationshipprop USING btree (feature_relationship_id, type_id, rank)

CREATE INDEX feature_relationshipprop_idx1 ON feature_relationshipprop USING btree (feature_relationship_id)

CREATE INDEX feature_relationshipprop_idx2 ON feature_relationshipprop USING btree (type_id)

CREATE UNIQUE INDEX feature_relationshipprop_pkey ON feature_relationshipprop USING btree (feature_relationshipprop_id)

CREATE UNIQUE INDEX feature_relationshipprop_pub_c1 ON feature_relationshipprop_pub USING btree (feature_relationshipprop_id, pub_id)

CREATE INDEX feature_relationshipprop_pub_idx1 ON feature_relationshipprop_pub USING btree (feature_relationshipprop_id)

CREATE INDEX feature_relationshipprop_pub_idx2 ON feature_relationshipprop_pub USING btree (pub_id)

CREATE UNIQUE INDEX feature_relationshipprop_pub_pkey ON feature_relationshipprop_pub USING btree (feature_relationshipprop_pub_id)

CREATE UNIQUE INDEX feature_synonym_c1 ON feature_synonym USING btree (synonym_id, feature_id, pub_id)

CREATE INDEX feature_synonym_idx1 ON feature_synonym USING btree (synonym_id)

CREATE INDEX feature_synonym_idx2 ON feature_synonym USING btree (feature_id)

CREATE INDEX feature_synonym_idx3 ON feature_synonym USING btree (pub_id)

CREATE UNIQUE INDEX feature_synonym_pkey ON feature_synonym USING btree (feature_synonym_id)

CREATE UNIQUE INDEX featureloc_c1 ON featureloc USING btree (feature_id, locgroup, rank)

CREATE INDEX featureloc_idx1 ON featureloc USING btree (feature_id)

CREATE INDEX featureloc_idx2 ON featureloc USING btree (srcfeature_id)

CREATE INDEX featureloc_idx3 ON featureloc USING btree (srcfeature_id, fmin, fmax)

CREATE UNIQUE INDEX featureloc_pkey ON featureloc USING btree (featureloc_id)

CREATE UNIQUE INDEX featureloc_pub_c1 ON featureloc_pub USING btree (featureloc_id, pub_id)

CREATE INDEX featureloc_pub_idx1 ON featureloc_pub USING btree (featureloc_id)

CREATE INDEX featureloc_pub_idx2 ON featureloc_pub USING btree (pub_id)

CREATE UNIQUE INDEX featureloc_pub_pkey ON featureloc_pub USING btree (featureloc_pub_id)

CREATE UNIQUE INDEX featuremap_c1 ON featuremap USING btree (name)

CREATE UNIQUE INDEX featuremap_pkey ON featuremap USING btree (featuremap_id)

CREATE INDEX featuremap_pub_idx1 ON featuremap_pub USING btree (featuremap_id)

CREATE INDEX featuremap_pub_idx2 ON featuremap_pub USING btree (pub_id)

CREATE UNIQUE INDEX featuremap_pub_pkey ON featuremap_pub USING btree (featuremap_pub_id)

CREATE INDEX featurepos_idx1 ON featurepos USING btree (featuremap_id)

CREATE INDEX featurepos_idx2 ON featurepos USING btree (feature_id)

CREATE INDEX featurepos_idx3 ON featurepos USING btree (map_feature_id)

CREATE UNIQUE INDEX featurepos_pkey ON featurepos USING btree (featurepos_id)

CREATE UNIQUE INDEX featureprop_c1 ON featureprop USING btree (feature_id, type_id, rank)

CREATE INDEX featureprop_idx1 ON featureprop USING btree (feature_id)

CREATE INDEX featureprop_idx2 ON featureprop USING btree (type_id)

CREATE UNIQUE INDEX featureprop_pkey ON featureprop USING btree (featureprop_id)

CREATE UNIQUE INDEX featureprop_pub_c1 ON featureprop_pub USING btree (featureprop_id, pub_id)

CREATE INDEX featureprop_pub_idx1 ON featureprop_pub USING btree (featureprop_id)

CREATE INDEX featureprop_pub_idx2 ON featureprop_pub USING btree (pub_id)

CREATE UNIQUE INDEX featureprop_pub_pkey ON featureprop_pub USING btree (featureprop_pub_id)

CREATE INDEX featurerange_idx1 ON featurerange USING btree (featuremap_id)

CREATE INDEX featurerange_idx2 ON featurerange USING btree (feature_id)

CREATE INDEX featurerange_idx3 ON featurerange USING btree (leftstartf_id)

CREATE INDEX featurerange_idx4 ON featurerange USING btree (leftendf_id)

CREATE INDEX featurerange_idx5 ON featurerange USING btree (rightstartf_id)

CREATE INDEX featurerange_idx6 ON featurerange USING btree (rightendf_id)

CREATE UNIQUE INDEX featurerange_pkey ON featurerange USING btree (featurerange_id)

CREATE UNIQUE INDEX genotype_c1 ON genotype USING btree (uniquename)

CREATE UNIQUE INDEX genotype_cvterm_pkey ON genotype_cvterm USING btree (genotype_cvterm_id)

CREATE UNIQUE INDEX genotype_dbxref_pkey ON genotype_dbxref USING btree (genotype_dbxref_id)

CREATE INDEX genotype_idx1 ON genotype USING btree (uniquename)

CREATE INDEX genotype_idx2 ON genotype USING btree (name)

CREATE UNIQUE INDEX genotype_pkey ON genotype USING btree (genotype_id)

CREATE UNIQUE INDEX genotype_synonym_pkey ON genotype_synonym USING btree (genotype_synonym_id)

CREATE UNIQUE INDEX genotypeprop_c1 ON genotypeprop USING btree (genotype_id, type_id, rank)

CREATE INDEX genotypeprop_idx1 ON genotypeprop USING btree (genotype_id)

CREATE INDEX genotypeprop_idx2 ON genotypeprop USING btree (type_id)

CREATE UNIQUE INDEX genotypeprop_pkey ON genotypeprop USING btree (genotypeprop_id)

CREATE UNIQUE INDEX library_c1 ON library USING btree (organism_id, uniquename, type_id)

CREATE UNIQUE INDEX library_cvterm_c1 ON library_cvterm USING btree (library_id, cvterm_id, pub_id)

CREATE INDEX library_cvterm_idx1 ON library_cvterm USING btree (library_id)

CREATE INDEX library_cvterm_idx2 ON library_cvterm USING btree (cvterm_id)

CREATE INDEX library_cvterm_idx3 ON library_cvterm USING btree (pub_id)

CREATE UNIQUE INDEX library_cvterm_pkey ON library_cvterm USING btree (library_cvterm_id)

CREATE UNIQUE INDEX library_dbxref_c1 ON library_dbxref USING btree (library_id, dbxref_id)

CREATE INDEX library_dbxref_idx1 ON library_dbxref USING btree (library_id)

CREATE INDEX library_dbxref_idx2 ON library_dbxref USING btree (dbxref_id)

CREATE UNIQUE INDEX library_dbxref_pkey ON library_dbxref USING btree (library_dbxref_id)

CREATE UNIQUE INDEX library_feature_c1 ON library_feature USING btree (library_id, feature_id)

CREATE INDEX library_feature_idx1 ON library_feature USING btree (library_id)

CREATE INDEX library_feature_idx2 ON library_feature USING btree (feature_id)

CREATE UNIQUE INDEX library_feature_pkey ON library_feature USING btree (library_feature_id)

CREATE INDEX library_idx1 ON library USING btree (organism_id)

CREATE INDEX library_idx2 ON library USING btree (type_id)

CREATE INDEX library_idx3 ON library USING btree (uniquename)

CREATE INDEX library_name_ind1 ON library USING btree (name)

CREATE UNIQUE INDEX library_pkey ON library USING btree (library_id)

CREATE UNIQUE INDEX library_pub_c1 ON library_pub USING btree (library_id, pub_id)

CREATE INDEX library_pub_idx1 ON library_pub USING btree (library_id)

CREATE INDEX library_pub_idx2 ON library_pub USING btree (pub_id)

CREATE UNIQUE INDEX library_pub_pkey ON library_pub USING btree (library_pub_id)

CREATE UNIQUE INDEX library_synonym_c1 ON library_synonym USING btree (synonym_id, library_id, pub_id)

CREATE INDEX library_synonym_idx1 ON library_synonym USING btree (synonym_id)

CREATE INDEX library_synonym_idx2 ON library_synonym USING btree (library_id)

CREATE INDEX library_synonym_idx3 ON library_synonym USING btree (pub_id)

CREATE UNIQUE INDEX library_synonym_pkey ON library_synonym USING btree (library_synonym_id)

CREATE UNIQUE INDEX libraryprop_c1 ON libraryprop USING btree (library_id, type_id, rank)

CREATE INDEX libraryprop_idx1 ON libraryprop USING btree (library_id)

CREATE INDEX libraryprop_idx2 ON libraryprop USING btree (type_id)

CREATE UNIQUE INDEX libraryprop_pkey ON libraryprop USING btree (libraryprop_id)

CREATE UNIQUE INDEX libraryprop_pub_c1 ON libraryprop_pub USING btree (libraryprop_id, pub_id)

CREATE INDEX libraryprop_pub_idx1 ON libraryprop_pub USING btree (libraryprop_id)

CREATE INDEX libraryprop_pub_idx2 ON libraryprop_pub USING btree (pub_id)

CREATE UNIQUE INDEX libraryprop_pub_pkey ON libraryprop_pub USING btree (libraryprop_pub_id)

CREATE INDEX magedocumentation_idx1 ON magedocumentation USING btree (mageml_id)

CREATE INDEX magedocumentation_idx2 ON magedocumentation USING btree (tableinfo_id)

CREATE INDEX magedocumentation_idx3 ON magedocumentation USING btree (row_id)

CREATE UNIQUE INDEX magedocumentation_pkey ON magedocumentation USING btree (magedocumentation_id)

CREATE UNIQUE INDEX mageml_pkey ON mageml USING btree (mageml_id)

CREATE UNIQUE INDEX materialized_view_name_key ON materialized_view USING btree (name)

CREATE UNIQUE INDEX nd_experiment_contact_pkey ON nd_experiment_contact USING btree (nd_experiment_contact_id)

CREATE UNIQUE INDEX nd_experiment_dbxref_pkey ON nd_experiment_dbxref USING btree (nd_experiment_dbxref_id)

CREATE UNIQUE INDEX nd_experiment_genotype_c1 ON nd_experiment_genotype USING btree (nd_experiment_id, genotype_id)

CREATE UNIQUE INDEX nd_experiment_genotype_pkey ON nd_experiment_genotype USING btree (nd_experiment_genotype_id)

CREATE UNIQUE INDEX nd_experiment_phenotype_c1 ON nd_experiment_phenotype USING btree (nd_experiment_id, phenotype_id)

CREATE UNIQUE INDEX nd_experiment_phenotype_pkey ON nd_experiment_phenotype USING btree (nd_experiment_phenotype_id)

CREATE UNIQUE INDEX nd_experiment_pkey ON nd_experiment USING btree (nd_experiment_id)

CREATE UNIQUE INDEX nd_experiment_project_pkey ON nd_experiment_project USING btree (nd_experiment_project_id)

CREATE UNIQUE INDEX nd_experiment_protocol_pkey ON nd_experiment_protocol USING btree (nd_experiment_protocol_id)

CREATE UNIQUE INDEX nd_experiment_pub_c1 ON nd_experiment_pub USING btree (nd_experiment_id, pub_id)

CREATE INDEX nd_experiment_pub_idx1 ON nd_experiment_pub USING btree (nd_experiment_id)

CREATE INDEX nd_experiment_pub_idx2 ON nd_experiment_pub USING btree (pub_id)

CREATE UNIQUE INDEX nd_experiment_pub_pkey ON nd_experiment_pub USING btree (nd_experiment_pub_id)

CREATE UNIQUE INDEX nd_experiment_stock_dbxref_pkey ON nd_experiment_stock_dbxref USING btree (nd_experiment_stock_dbxref_id)

CREATE UNIQUE INDEX nd_experiment_stock_pkey ON nd_experiment_stock USING btree (nd_experiment_stock_id)

CREATE UNIQUE INDEX nd_experiment_stockprop_c1 ON nd_experiment_stockprop USING btree (nd_experiment_stock_id, type_id, rank)

CREATE UNIQUE INDEX nd_experiment_stockprop_pkey ON nd_experiment_stockprop USING btree (nd_experiment_stockprop_id)

CREATE UNIQUE INDEX nd_experimentprop_c1 ON nd_experimentprop USING btree (nd_experiment_id, type_id, rank)

CREATE UNIQUE INDEX nd_experimentprop_pkey ON nd_experimentprop USING btree (nd_experimentprop_id)

CREATE UNIQUE INDEX nd_geolocation_pkey ON nd_geolocation USING btree (nd_geolocation_id)

CREATE UNIQUE INDEX nd_geolocationprop_c1 ON nd_geolocationprop USING btree (nd_geolocation_id, type_id, rank)

CREATE UNIQUE INDEX nd_geolocationprop_pkey ON nd_geolocationprop USING btree (nd_geolocationprop_id)

CREATE UNIQUE INDEX nd_protocol_name_key ON nd_protocol USING btree (name)

CREATE UNIQUE INDEX nd_protocol_pkey ON nd_protocol USING btree (nd_protocol_id)

CREATE UNIQUE INDEX nd_protocol_reagent_pkey ON nd_protocol_reagent USING btree (nd_protocol_reagent_id)

CREATE UNIQUE INDEX nd_protocolprop_c1 ON nd_protocolprop USING btree (nd_protocol_id, type_id, rank)

CREATE UNIQUE INDEX nd_protocolprop_pkey ON nd_protocolprop USING btree (nd_protocolprop_id)

CREATE UNIQUE INDEX nd_reagent_pkey ON nd_reagent USING btree (nd_reagent_id)

CREATE UNIQUE INDEX nd_reagent_relationship_pkey ON nd_reagent_relationship USING btree (nd_reagent_relationship_id)

CREATE UNIQUE INDEX nd_reagentprop_c1 ON nd_reagentprop USING btree (nd_reagent_id, type_id, rank)

CREATE UNIQUE INDEX nd_reagentprop_pkey ON nd_reagentprop USING btree (nd_reagentprop_id)

CREATE INDEX oauth_common_consumer_key_hash_idx ON oauth_common_consumer USING btree (key_hash)

CREATE UNIQUE INDEX oauth_common_consumer_pkey ON oauth_common_consumer USING btree (csid)

CREATE UNIQUE INDEX oauth_common_context_context_key ON oauth_common_context USING btree (name)

CREATE UNIQUE INDEX oauth_common_context_pkey ON oauth_common_context USING btree (cid)

CREATE UNIQUE INDEX oauth_common_nonce_pkey ON oauth_common_nonce USING btree (nonce)

CREATE INDEX oauth_common_nonce_timekey_idx ON oauth_common_nonce USING btree ("timestamp", token_key)

CREATE UNIQUE INDEX oauth_common_provider_consumer_csid_key ON oauth_common_provider_consumer USING btree (csid)

CREATE UNIQUE INDEX oauth_common_provider_consumer_pkey ON oauth_common_provider_consumer USING btree (consumer_key)

CREATE INDEX oauth_common_provider_consumer_uid_idx ON oauth_common_provider_consumer USING btree (uid)

CREATE UNIQUE INDEX oauth_common_provider_token_pkey ON oauth_common_provider_token USING btree (token_key)

CREATE UNIQUE INDEX oauth_common_provider_token_tid_key ON oauth_common_provider_token USING btree (tid)

CREATE INDEX oauth_common_token_key_hash_idx ON oauth_common_token USING btree (key_hash)

CREATE UNIQUE INDEX oauth_common_token_pkey ON oauth_common_token USING btree (tid)

CREATE UNIQUE INDEX organism_c1 ON organism USING btree (genus, species)

CREATE UNIQUE INDEX organism_dbxref_c1 ON organism_dbxref USING btree (organism_id, dbxref_id)

CREATE INDEX organism_dbxref_idx1 ON organism_dbxref USING btree (organism_id)

CREATE INDEX organism_dbxref_idx2 ON organism_dbxref USING btree (dbxref_id)

CREATE UNIQUE INDEX organism_dbxref_pkey ON organism_dbxref USING btree (organism_dbxref_id)

CREATE INDEX organism_feature_count_organism_feature_count_idx1_idx ON organism_feature_count USING btree (organism_id)

CREATE INDEX organism_feature_count_organism_feature_count_idx2_idx ON organism_feature_count USING btree (cvterm_id)

CREATE INDEX organism_feature_count_organism_feature_count_idx3_idx ON organism_feature_count USING btree (feature_type)

CREATE UNIQUE INDEX organism_pkey ON organism USING btree (organism_id)

CREATE UNIQUE INDEX organismprop_c1 ON organismprop USING btree (organism_id, type_id, rank)

CREATE INDEX organismprop_idx1 ON organismprop USING btree (organism_id)

CREATE INDEX organismprop_idx2 ON organismprop USING btree (type_id)

CREATE UNIQUE INDEX organismprop_pkey ON organismprop USING btree (organismprop_id)

CREATE UNIQUE INDEX phendesc_c1 ON phendesc USING btree (genotype_id, environment_id, type_id, pub_id)

CREATE INDEX phendesc_idx1 ON phendesc USING btree (genotype_id)

CREATE INDEX phendesc_idx2 ON phendesc USING btree (environment_id)

CREATE INDEX phendesc_idx3 ON phendesc USING btree (pub_id)

CREATE UNIQUE INDEX phendesc_pkey ON phendesc USING btree (phendesc_id)

CREATE UNIQUE INDEX phenotype_c1 ON phenotype USING btree (uniquename)

CREATE UNIQUE INDEX phenotype_comparison_c1 ON phenotype_comparison USING btree (genotype1_id, environment1_id, genotype2_id, environment2_id, phenotype1_id, pub_id)

CREATE UNIQUE INDEX phenotype_comparison_cvterm_c1 ON phenotype_comparison_cvterm USING btree (phenotype_comparison_id, cvterm_id)

CREATE INDEX phenotype_comparison_cvterm_idx1 ON phenotype_comparison_cvterm USING btree (phenotype_comparison_id)

CREATE INDEX phenotype_comparison_cvterm_idx2 ON phenotype_comparison_cvterm USING btree (cvterm_id)

CREATE UNIQUE INDEX phenotype_comparison_cvterm_pkey ON phenotype_comparison_cvterm USING btree (phenotype_comparison_cvterm_id)

CREATE INDEX phenotype_comparison_idx1 ON phenotype_comparison USING btree (genotype1_id)

CREATE INDEX phenotype_comparison_idx2 ON phenotype_comparison USING btree (genotype2_id)

CREATE INDEX phenotype_comparison_idx4 ON phenotype_comparison USING btree (pub_id)

CREATE UNIQUE INDEX phenotype_comparison_pkey ON phenotype_comparison USING btree (phenotype_comparison_id)

CREATE UNIQUE INDEX phenotype_cvterm_c1 ON phenotype_cvterm USING btree (phenotype_id, cvterm_id, rank)

CREATE INDEX phenotype_cvterm_idx1 ON phenotype_cvterm USING btree (phenotype_id)

CREATE INDEX phenotype_cvterm_idx2 ON phenotype_cvterm USING btree (cvterm_id)

CREATE UNIQUE INDEX phenotype_cvterm_pkey ON phenotype_cvterm USING btree (phenotype_cvterm_id)

CREATE INDEX phenotype_idx1 ON phenotype USING btree (cvalue_id)

CREATE INDEX phenotype_idx2 ON phenotype USING btree (observable_id)

CREATE INDEX phenotype_idx3 ON phenotype USING btree (attr_id)

CREATE UNIQUE INDEX phenotype_pkey ON phenotype USING btree (phenotype_id)

CREATE UNIQUE INDEX phenstatement_c1 ON phenstatement USING btree (genotype_id, phenotype_id, environment_id, type_id, pub_id)

CREATE INDEX phenstatement_idx1 ON phenstatement USING btree (genotype_id)

CREATE INDEX phenstatement_idx2 ON phenstatement USING btree (phenotype_id)

CREATE UNIQUE INDEX phenstatement_pkey ON phenstatement USING btree (phenstatement_id)

CREATE INDEX phylonode_dbxref_idx1 ON phylonode_dbxref USING btree (phylonode_id)

CREATE INDEX phylonode_dbxref_idx2 ON phylonode_dbxref USING btree (dbxref_id)

CREATE UNIQUE INDEX phylonode_dbxref_phylonode_id_dbxref_id_key ON phylonode_dbxref USING btree (phylonode_id, dbxref_id)

CREATE UNIQUE INDEX phylonode_dbxref_pkey ON phylonode_dbxref USING btree (phylonode_dbxref_id)

CREATE INDEX phylonode_organism_idx1 ON phylonode_organism USING btree (phylonode_id)

CREATE INDEX phylonode_organism_idx2 ON phylonode_organism USING btree (organism_id)

CREATE UNIQUE INDEX phylonode_organism_phylonode_id_key ON phylonode_organism USING btree (phylonode_id)

CREATE UNIQUE INDEX phylonode_organism_pkey ON phylonode_organism USING btree (phylonode_organism_id)

CREATE UNIQUE INDEX phylonode_phylotree_id_left_idx_key ON phylonode USING btree (phylotree_id, left_idx)

CREATE UNIQUE INDEX phylonode_phylotree_id_right_idx_key ON phylonode USING btree (phylotree_id, right_idx)

CREATE UNIQUE INDEX phylonode_pkey ON phylonode USING btree (phylonode_id)

CREATE INDEX phylonode_pub_idx1 ON phylonode_pub USING btree (phylonode_id)

CREATE INDEX phylonode_pub_idx2 ON phylonode_pub USING btree (pub_id)

CREATE UNIQUE INDEX phylonode_pub_phylonode_id_pub_id_key ON phylonode_pub USING btree (phylonode_id, pub_id)

CREATE UNIQUE INDEX phylonode_pub_pkey ON phylonode_pub USING btree (phylonode_pub_id)

CREATE INDEX phylonode_relationship_idx1 ON phylonode_relationship USING btree (subject_id)

CREATE INDEX phylonode_relationship_idx2 ON phylonode_relationship USING btree (object_id)

CREATE INDEX phylonode_relationship_idx3 ON phylonode_relationship USING btree (type_id)

CREATE UNIQUE INDEX phylonode_relationship_pkey ON phylonode_relationship USING btree (phylonode_relationship_id)

CREATE UNIQUE INDEX phylonode_relationship_subject_id_object_id_type_id_key ON phylonode_relationship USING btree (subject_id, object_id, type_id)

CREATE INDEX phylonodeprop_idx1 ON phylonodeprop USING btree (phylonode_id)

CREATE INDEX phylonodeprop_idx2 ON phylonodeprop USING btree (type_id)

CREATE UNIQUE INDEX phylonodeprop_phylonode_id_type_id_value_rank_key ON phylonodeprop USING btree (phylonode_id, type_id, value, rank)

CREATE UNIQUE INDEX phylonodeprop_pkey ON phylonodeprop USING btree (phylonodeprop_id)

CREATE INDEX phylotree_idx1 ON phylotree USING btree (phylotree_id)

CREATE UNIQUE INDEX phylotree_pkey ON phylotree USING btree (phylotree_id)

CREATE INDEX phylotree_pub_idx1 ON phylotree_pub USING btree (phylotree_id)

CREATE INDEX phylotree_pub_idx2 ON phylotree_pub USING btree (pub_id)

CREATE UNIQUE INDEX phylotree_pub_phylotree_id_pub_id_key ON phylotree_pub USING btree (phylotree_id, pub_id)

CREATE UNIQUE INDEX phylotree_pub_pkey ON phylotree_pub USING btree (phylotree_pub_id)

CREATE UNIQUE INDEX project_c1 ON project USING btree (name)

CREATE UNIQUE INDEX project_contact_c1 ON project_contact USING btree (project_id, contact_id)

CREATE INDEX project_contact_idx1 ON project_contact USING btree (project_id)

CREATE INDEX project_contact_idx2 ON project_contact USING btree (contact_id)

CREATE UNIQUE INDEX project_contact_pkey ON project_contact USING btree (project_contact_id)

CREATE UNIQUE INDEX project_pkey ON project USING btree (project_id)

CREATE UNIQUE INDEX project_pub_c1 ON project_pub USING btree (project_id, pub_id)

CREATE INDEX project_pub_idx1 ON project_pub USING btree (project_id)

CREATE INDEX project_pub_idx2 ON project_pub USING btree (pub_id)

CREATE UNIQUE INDEX project_pub_pkey ON project_pub USING btree (project_pub_id)

CREATE UNIQUE INDEX project_relationship_c1 ON project_relationship USING btree (subject_project_id, object_project_id, type_id)

CREATE UNIQUE INDEX project_relationship_pkey ON project_relationship USING btree (project_relationship_id)

CREATE UNIQUE INDEX projectprop_c1 ON projectprop USING btree (project_id, type_id, rank)

CREATE UNIQUE INDEX projectprop_pkey ON projectprop USING btree (projectprop_id)

CREATE UNIQUE INDEX protocol_c1 ON protocol USING btree (name)

CREATE INDEX protocol_idx1 ON protocol USING btree (type_id)

CREATE INDEX protocol_idx2 ON protocol USING btree (pub_id)

CREATE INDEX protocol_idx3 ON protocol USING btree (dbxref_id)

CREATE UNIQUE INDEX protocol_pkey ON protocol USING btree (protocol_id)

CREATE INDEX protocolparam_idx1 ON protocolparam USING btree (protocol_id)

CREATE INDEX protocolparam_idx2 ON protocolparam USING btree (datatype_id)

CREATE INDEX protocolparam_idx3 ON protocolparam USING btree (unittype_id)

CREATE UNIQUE INDEX protocolparam_pkey ON protocolparam USING btree (protocolparam_id)

CREATE UNIQUE INDEX pub_c1 ON pub USING btree (uniquename)

CREATE UNIQUE INDEX pub_dbxref_c1 ON pub_dbxref USING btree (pub_id, dbxref_id)

CREATE INDEX pub_dbxref_idx1 ON pub_dbxref USING btree (pub_id)

CREATE INDEX pub_dbxref_idx2 ON pub_dbxref USING btree (dbxref_id)

CREATE UNIQUE INDEX pub_dbxref_pkey ON pub_dbxref USING btree (pub_dbxref_id)

CREATE INDEX pub_idx1 ON pub USING btree (type_id)

CREATE UNIQUE INDEX pub_pkey ON pub USING btree (pub_id)

CREATE UNIQUE INDEX pub_relationship_c1 ON pub_relationship USING btree (subject_id, object_id, type_id)

CREATE INDEX pub_relationship_idx1 ON pub_relationship USING btree (subject_id)

CREATE INDEX pub_relationship_idx2 ON pub_relationship USING btree (object_id)

CREATE INDEX pub_relationship_idx3 ON pub_relationship USING btree (type_id)

CREATE UNIQUE INDEX pub_relationship_pkey ON pub_relationship USING btree (pub_relationship_id)

CREATE UNIQUE INDEX pubauthor_c1 ON pubauthor USING btree (pub_id, rank)

CREATE UNIQUE INDEX pubauthor_contact_pkey ON pubauthor_contact USING btree (pubauthor_contact_id)

CREATE UNIQUE INDEX pubauthor_contact_pubauthor_contact_c1_key ON pubauthor_contact USING btree (contact_id, pubauthor_id)

CREATE INDEX pubauthor_idx2 ON pubauthor USING btree (pub_id)

CREATE UNIQUE INDEX pubauthor_pkey ON pubauthor USING btree (pubauthor_id)

CREATE UNIQUE INDEX pubprop_c1 ON pubprop USING btree (pub_id, type_id, rank)

CREATE INDEX pubprop_idx1 ON pubprop USING btree (pub_id)

CREATE INDEX pubprop_idx2 ON pubprop USING btree (type_id)

CREATE UNIQUE INDEX pubprop_pkey ON pubprop USING btree (pubprop_id)

CREATE UNIQUE INDEX quantification_c1 ON quantification USING btree (name, analysis_id)

CREATE INDEX quantification_idx1 ON quantification USING btree (acquisition_id)

CREATE INDEX quantification_idx2 ON quantification USING btree (operator_id)

CREATE INDEX quantification_idx3 ON quantification USING btree (protocol_id)

CREATE INDEX quantification_idx4 ON quantification USING btree (analysis_id)

CREATE UNIQUE INDEX quantification_pkey ON quantification USING btree (quantification_id)

CREATE UNIQUE INDEX quantification_relationship_c1 ON quantification_relationship USING btree (subject_id, object_id, type_id)

CREATE INDEX quantification_relationship_idx1 ON quantification_relationship USING btree (subject_id)

CREATE INDEX quantification_relationship_idx2 ON quantification_relationship USING btree (type_id)

CREATE INDEX quantification_relationship_idx3 ON quantification_relationship USING btree (object_id)

CREATE UNIQUE INDEX quantification_relationship_pkey ON quantification_relationship USING btree (quantification_relationship_id)

CREATE UNIQUE INDEX quantificationprop_c1 ON quantificationprop USING btree (quantification_id, type_id, rank)

CREATE INDEX quantificationprop_idx1 ON quantificationprop USING btree (quantification_id)

CREATE INDEX quantificationprop_idx2 ON quantificationprop USING btree (type_id)

CREATE UNIQUE INDEX quantificationprop_pkey ON quantificationprop USING btree (quantificationprop_id)

CREATE UNIQUE INDEX services_endpoint_name_key ON services_endpoint USING btree (name)

CREATE UNIQUE INDEX services_endpoint_pkey ON services_endpoint USING btree (eid)

CREATE UNIQUE INDEX stock_c1 ON stock USING btree (organism_id, uniquename, type_id)

CREATE UNIQUE INDEX stock_cvterm_c1 ON stock_cvterm USING btree (stock_id, cvterm_id, pub_id, rank)

CREATE INDEX stock_cvterm_idx1 ON stock_cvterm USING btree (stock_id)

CREATE INDEX stock_cvterm_idx2 ON stock_cvterm USING btree (cvterm_id)

CREATE INDEX stock_cvterm_idx3 ON stock_cvterm USING btree (pub_id)

CREATE UNIQUE INDEX stock_cvterm_pkey ON stock_cvterm USING btree (stock_cvterm_id)

CREATE UNIQUE INDEX stock_cvtermprop_c1 ON stock_cvtermprop USING btree (stock_cvterm_id, type_id, rank)

CREATE INDEX stock_cvtermprop_idx1 ON stock_cvtermprop USING btree (stock_cvterm_id)

CREATE INDEX stock_cvtermprop_idx2 ON stock_cvtermprop USING btree (type_id)

CREATE UNIQUE INDEX stock_cvtermprop_pkey ON stock_cvtermprop USING btree (stock_cvtermprop_id)

CREATE UNIQUE INDEX stock_dbxref_c1 ON stock_dbxref USING btree (stock_id, dbxref_id)

CREATE INDEX stock_dbxref_idx1 ON stock_dbxref USING btree (stock_id)

CREATE INDEX stock_dbxref_idx2 ON stock_dbxref USING btree (dbxref_id)

CREATE UNIQUE INDEX stock_dbxref_pkey ON stock_dbxref USING btree (stock_dbxref_id)

CREATE UNIQUE INDEX stock_dbxrefprop_c1 ON stock_dbxrefprop USING btree (stock_dbxref_id, type_id, rank)

CREATE INDEX stock_dbxrefprop_idx1 ON stock_dbxrefprop USING btree (stock_dbxref_id)

CREATE INDEX stock_dbxrefprop_idx2 ON stock_dbxrefprop USING btree (type_id)

CREATE UNIQUE INDEX stock_dbxrefprop_pkey ON stock_dbxrefprop USING btree (stock_dbxrefprop_id)

CREATE UNIQUE INDEX stock_genotype_c1 ON stock_genotype USING btree (stock_id, genotype_id)

CREATE UNIQUE INDEX stock_genotype_cvterm_pkey ON stock_genotype_cvterm USING btree (stock_genotype_cvterm_id)

CREATE INDEX stock_genotype_idx1 ON stock_genotype USING btree (stock_id)

CREATE INDEX stock_genotype_idx2 ON stock_genotype USING btree (genotype_id)

CREATE UNIQUE INDEX stock_genotype_pkey ON stock_genotype USING btree (stock_genotype_id)

CREATE UNIQUE INDEX stock_genotype_prop_pkey ON stock_genotype_prop USING btree (stock_genotype_prop_id)

CREATE INDEX stock_idx1 ON stock USING btree (dbxref_id)

CREATE INDEX stock_idx2 ON stock USING btree (organism_id)

CREATE INDEX stock_idx3 ON stock USING btree (type_id)

CREATE INDEX stock_idx4 ON stock USING btree (uniquename)

CREATE INDEX stock_name_ind1 ON stock USING btree (name)

CREATE UNIQUE INDEX stock_pkey ON stock USING btree (stock_id)

CREATE UNIQUE INDEX stock_pub_c1 ON stock_pub USING btree (stock_id, pub_id)

CREATE INDEX stock_pub_idx1 ON stock_pub USING btree (stock_id)

CREATE INDEX stock_pub_idx2 ON stock_pub USING btree (pub_id)

CREATE UNIQUE INDEX stock_pub_pkey ON stock_pub USING btree (stock_pub_id)

CREATE UNIQUE INDEX stock_relationship_c1 ON stock_relationship USING btree (subject_id, object_id, type_id, rank)

CREATE UNIQUE INDEX stock_relationship_cvterm_pkey ON stock_relationship_cvterm USING btree (stock_relationship_cvterm_id)

CREATE INDEX stock_relationship_idx1 ON stock_relationship USING btree (subject_id)

CREATE INDEX stock_relationship_idx2 ON stock_relationship USING btree (object_id)

CREATE INDEX stock_relationship_idx3 ON stock_relationship USING btree (type_id)

CREATE UNIQUE INDEX stock_relationship_pkey ON stock_relationship USING btree (stock_relationship_id)

CREATE UNIQUE INDEX stock_relationship_pub_c1 ON stock_relationship_pub USING btree (stock_relationship_id, pub_id)

CREATE INDEX stock_relationship_pub_idx1 ON stock_relationship_pub USING btree (stock_relationship_id)

CREATE INDEX stock_relationship_pub_idx2 ON stock_relationship_pub USING btree (pub_id)

CREATE UNIQUE INDEX stock_relationship_pub_pkey ON stock_relationship_pub USING btree (stock_relationship_pub_id)

CREATE UNIQUE INDEX stock_synonym_pkey ON stock_synonym USING btree (stock_synonym_id)

CREATE UNIQUE INDEX stockcollection_c1 ON stockcollection USING btree (uniquename, type_id)

CREATE INDEX stockcollection_idx1 ON stockcollection USING btree (contact_id)

CREATE INDEX stockcollection_idx2 ON stockcollection USING btree (type_id)

CREATE INDEX stockcollection_idx3 ON stockcollection USING btree (uniquename)

CREATE INDEX stockcollection_name_ind1 ON stockcollection USING btree (name)

CREATE UNIQUE INDEX stockcollection_pkey ON stockcollection USING btree (stockcollection_id)

CREATE UNIQUE INDEX stockcollection_stock_c1 ON stockcollection_stock USING btree (stockcollection_id, stock_id)

CREATE INDEX stockcollection_stock_idx1 ON stockcollection_stock USING btree (stockcollection_id)

CREATE INDEX stockcollection_stock_idx2 ON stockcollection_stock USING btree (stock_id)

CREATE UNIQUE INDEX stockcollection_stock_pkey ON stockcollection_stock USING btree (stockcollection_stock_id)

CREATE UNIQUE INDEX stockcollectionprop_c1 ON stockcollectionprop USING btree (stockcollection_id, type_id, rank)

CREATE INDEX stockcollectionprop_idx1 ON stockcollectionprop USING btree (stockcollection_id)

CREATE INDEX stockcollectionprop_idx2 ON stockcollectionprop USING btree (type_id)

CREATE UNIQUE INDEX stockcollectionprop_pkey ON stockcollectionprop USING btree (stockcollectionprop_id)

CREATE UNIQUE INDEX stockprop_c1 ON stockprop USING btree (stock_id, type_id, rank)

CREATE INDEX stockprop_idx1 ON stockprop USING btree (stock_id)

CREATE INDEX stockprop_idx2 ON stockprop USING btree (type_id)

CREATE UNIQUE INDEX stockprop_pkey ON stockprop USING btree (stockprop_id)

CREATE UNIQUE INDEX stockprop_pub_c1 ON stockprop_pub USING btree (stockprop_id, pub_id)

CREATE INDEX stockprop_pub_idx1 ON stockprop_pub USING btree (stockprop_id)

CREATE INDEX stockprop_pub_idx2 ON stockprop_pub USING btree (pub_id)

CREATE UNIQUE INDEX stockprop_pub_pkey ON stockprop_pub USING btree (stockprop_pub_id)

CREATE UNIQUE INDEX study_assay_c1 ON study_assay USING btree (study_id, assay_id)

CREATE INDEX study_assay_idx1 ON study_assay USING btree (study_id)

CREATE INDEX study_assay_idx2 ON study_assay USING btree (assay_id)

CREATE UNIQUE INDEX study_assay_pkey ON study_assay USING btree (study_assay_id)

CREATE UNIQUE INDEX study_c1 ON study USING btree (name)

CREATE INDEX study_idx1 ON study USING btree (contact_id)

CREATE INDEX study_idx2 ON study USING btree (pub_id)

CREATE INDEX study_idx3 ON study USING btree (dbxref_id)

CREATE UNIQUE INDEX study_pkey ON study USING btree (study_id)

CREATE INDEX studydesign_idx1 ON studydesign USING btree (study_id)

CREATE UNIQUE INDEX studydesign_pkey ON studydesign USING btree (studydesign_id)

CREATE UNIQUE INDEX studydesignprop_c1 ON studydesignprop USING btree (studydesign_id, type_id, rank)

CREATE INDEX studydesignprop_idx1 ON studydesignprop USING btree (studydesign_id)

CREATE INDEX studydesignprop_idx2 ON studydesignprop USING btree (type_id)

CREATE UNIQUE INDEX studydesignprop_pkey ON studydesignprop USING btree (studydesignprop_id)

CREATE INDEX studyfactor_idx1 ON studyfactor USING btree (studydesign_id)

CREATE INDEX studyfactor_idx2 ON studyfactor USING btree (type_id)

CREATE UNIQUE INDEX studyfactor_pkey ON studyfactor USING btree (studyfactor_id)

CREATE INDEX studyfactorvalue_idx1 ON studyfactorvalue USING btree (studyfactor_id)

CREATE INDEX studyfactorvalue_idx2 ON studyfactorvalue USING btree (assay_id)

CREATE UNIQUE INDEX studyfactorvalue_pkey ON studyfactorvalue USING btree (studyfactorvalue_id)

CREATE INDEX studyprop_feature_idx1 ON studyprop_feature USING btree (studyprop_id)

CREATE INDEX studyprop_feature_idx2 ON studyprop_feature USING btree (feature_id)

CREATE UNIQUE INDEX studyprop_feature_pkey ON studyprop_feature USING btree (studyprop_feature_id)

CREATE UNIQUE INDEX studyprop_feature_studyprop_id_feature_id_key ON studyprop_feature USING btree (studyprop_id, feature_id)

CREATE INDEX studyprop_idx1 ON studyprop USING btree (study_id)

CREATE INDEX studyprop_idx2 ON studyprop USING btree (type_id)

CREATE UNIQUE INDEX studyprop_pkey ON studyprop USING btree (studyprop_id)

CREATE UNIQUE INDEX studyprop_study_id_type_id_rank_key ON studyprop USING btree (study_id, type_id, rank)

CREATE UNIQUE INDEX synonym_c1 ON synonym USING btree (name, type_id)

CREATE INDEX synonym_idx1 ON synonym USING btree (type_id)

CREATE INDEX synonym_idx2 ON synonym USING btree (lower((synonym_sgml)::text))

CREATE UNIQUE INDEX synonym_pkey ON synonym USING btree (synonym_id)

CREATE UNIQUE INDEX tableinfo_c1 ON tableinfo USING btree (name)

CREATE UNIQUE INDEX tableinfo_pkey ON tableinfo USING btree (tableinfo_id)

CREATE INDEX treatment_idx1 ON treatment USING btree (biomaterial_id)

CREATE INDEX treatment_idx2 ON treatment USING btree (type_id)

CREATE INDEX treatment_idx3 ON treatment USING btree (protocol_id)

CREATE UNIQUE INDEX treatment_pkey ON treatment USING btree (treatment_id)

CREATE INDEX tripal_gff_temp_idx0 ON tripal_gff_temp USING btree (feature_id)

CREATE INDEX tripal_gff_temp_idx1 ON tripal_gff_temp USING btree (organism_id)

CREATE INDEX tripal_gff_temp_idx2 ON tripal_gff_temp USING btree (uniquename)

CREATE UNIQUE INDEX tripal_gff_temp_uq0 ON tripal_gff_temp USING btree (feature_id)

CREATE UNIQUE INDEX tripal_gff_temp_uq1 ON tripal_gff_temp USING btree (uniquename, organism_id, type_name)

CREATE INDEX tripal_obo_temp_idx0 ON tripal_obo_temp USING btree (id)

CREATE INDEX tripal_obo_temp_idx1 ON tripal_obo_temp USING btree (type)

CREATE UNIQUE INDEX tripal_obo_temp_uq0 ON tripal_obo_temp USING btree (id)

select * from stock_relationship sp;

select * from stock s;

-- CS65790 parent lines
INSERT INTO STOCK_RELATIONSHIP 
(subject_id, object_id, type_id, rank, background_accession_id)
VALUES (3, 11, 44389, 1, 12);

INSERT INTO STOCK_RELATIONSHIP 
(subject_id, object_id, type_id, rank, background_accession_id)
VALUES (3, 10, 44389, 0, 12);

select sp.stock_relationship_id, sb.name, c.name relationship_type, ob.name, sbg.uniquename background_accession, stv_c.name relationship_annotation, sp.rank from stock_relationship sp
join 
cvterm c on c.cvterm_id = sp.type_id
join 
stock sb
on sb.stock_id = sp.subject_id 
join stock ob
on ob.stock_id = sp.object_id
join stock sbg
on sbg.stock_id = sp.background_accession_id
left join stock_relationship_cvterm stv
on 
sp.stock_relationship_id = stv.stock_relationship_id
left join cvterm stv_c
on stv_c.cvterm_id = stv.cvterm_id
where sb.name = 'CS65790'
order by sp. rank;


select * from cvterm where cvterm_id = 44392;


INSERT INTO CV 
 (name, definition)
VALUES ('pedigree_generative_method', 'pedigree_generative_method');

select * from dbxref where accession = 'pedigree_generative_method';

INSERT
	INTO dbxref (
	db_id,
	accession,
	description)
VALUES
	(
	73,
	'pedigree_generative_method',
	'pedigree_generative_method');
	
	
	INSERT INTO 
	CVTERM 
	(cv_id, dbxref_id, name, definition)
	VALUES (55, 792453, 'pedigree_generative_method', 'pedigree_generative_method');
	
	select * from cvterm where "name" = 'pedigree_generative_method';
	
	select * from stock_relationship sp;
	
	INSERT INTO stock_relationship_cvterm
	(stock_relationship_id, cvterm_id)
	VALUES (1,44392);
	